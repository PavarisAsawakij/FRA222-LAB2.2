
QEI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081e8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080083c0  080083c0  000183c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008400  08008400  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08008400  08008400  00018400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008408  08008408  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008408  08008408  00018408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800840c  0800840c  0001840c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08008410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000014  08008424  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08008424  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b04  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a4f  00000000  00000000  00037b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  0003a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001038  00000000  00000000  0003ba98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025b0  00000000  00000000  0003cad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017984  00000000  00000000  0003f080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112a00  00000000  00000000  00056a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b18  00000000  00000000  00169404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0016ef1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080083a8 	.word	0x080083a8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	080083a8 	.word	0x080083a8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b970 	b.w	8000d4c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	460d      	mov	r5, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	460f      	mov	r7, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4694      	mov	ip, r2
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0xe2>
 8000a9a:	fab2 f382 	clz	r3, r2
 8000a9e:	b143      	cbz	r3, 8000ab2 <__udivmoddi4+0x2e>
 8000aa0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aa4:	f1c3 0220 	rsb	r2, r3, #32
 8000aa8:	409f      	lsls	r7, r3
 8000aaa:	fa20 f202 	lsr.w	r2, r0, r2
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	409c      	lsls	r4, r3
 8000ab2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ab6:	fa1f f58c 	uxth.w	r5, ip
 8000aba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000abe:	0c22      	lsrs	r2, r4, #16
 8000ac0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ac4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac8:	fb01 f005 	mul.w	r0, r1, r5
 8000acc:	4290      	cmp	r0, r2
 8000ace:	d90a      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad8:	f080 811c 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000adc:	4290      	cmp	r0, r2
 8000ade:	f240 8119 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	4462      	add	r2, ip
 8000ae6:	1a12      	subs	r2, r2, r0
 8000ae8:	b2a4      	uxth	r4, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000af6:	fb00 f505 	mul.w	r5, r0, r5
 8000afa:	42a5      	cmp	r5, r4
 8000afc:	d90a      	bls.n	8000b14 <__udivmoddi4+0x90>
 8000afe:	eb1c 0404 	adds.w	r4, ip, r4
 8000b02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b06:	f080 8107 	bcs.w	8000d18 <__udivmoddi4+0x294>
 8000b0a:	42a5      	cmp	r5, r4
 8000b0c:	f240 8104 	bls.w	8000d18 <__udivmoddi4+0x294>
 8000b10:	4464      	add	r4, ip
 8000b12:	3802      	subs	r0, #2
 8000b14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b18:	1b64      	subs	r4, r4, r5
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11e      	cbz	r6, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40dc      	lsrs	r4, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	e9c6 4300 	strd	r4, r3, [r6]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0xbc>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80ed 	beq.w	8000d0e <__udivmoddi4+0x28a>
 8000b34:	2100      	movs	r1, #0
 8000b36:	e9c6 0500 	strd	r0, r5, [r6]
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b40:	fab3 f183 	clz	r1, r3
 8000b44:	2900      	cmp	r1, #0
 8000b46:	d149      	bne.n	8000bdc <__udivmoddi4+0x158>
 8000b48:	42ab      	cmp	r3, r5
 8000b4a:	d302      	bcc.n	8000b52 <__udivmoddi4+0xce>
 8000b4c:	4282      	cmp	r2, r0
 8000b4e:	f200 80f8 	bhi.w	8000d42 <__udivmoddi4+0x2be>
 8000b52:	1a84      	subs	r4, r0, r2
 8000b54:	eb65 0203 	sbc.w	r2, r5, r3
 8000b58:	2001      	movs	r0, #1
 8000b5a:	4617      	mov	r7, r2
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d0e2      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	e9c6 4700 	strd	r4, r7, [r6]
 8000b64:	e7df      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b66:	b902      	cbnz	r2, 8000b6a <__udivmoddi4+0xe6>
 8000b68:	deff      	udf	#255	; 0xff
 8000b6a:	fab2 f382 	clz	r3, r2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8090 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b74:	1a8a      	subs	r2, r1, r2
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2101      	movs	r1, #1
 8000b80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b84:	fb07 2015 	mls	r0, r7, r5, r2
 8000b88:	0c22      	lsrs	r2, r4, #16
 8000b8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b8e:	fb0e f005 	mul.w	r0, lr, r5
 8000b92:	4290      	cmp	r0, r2
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b96:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2b8>
 8000ba6:	4645      	mov	r5, r8
 8000ba8:	1a12      	subs	r2, r2, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x14e>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x14c>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2c2>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bda:	e79f      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bdc:	f1c1 0720 	rsb	r7, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa05 f401 	lsl.w	r4, r5, r1
 8000bee:	fa20 f307 	lsr.w	r3, r0, r7
 8000bf2:	40fd      	lsrs	r5, r7
 8000bf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf8:	4323      	orrs	r3, r4
 8000bfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bfe:	fa1f fe8c 	uxth.w	lr, ip
 8000c02:	fb09 5518 	mls	r5, r9, r8, r5
 8000c06:	0c1c      	lsrs	r4, r3, #16
 8000c08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c10:	42a5      	cmp	r5, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	fa00 f001 	lsl.w	r0, r0, r1
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2b4>
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2b4>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4464      	add	r4, ip
 8000c34:	1b64      	subs	r4, r4, r5
 8000c36:	b29d      	uxth	r5, r3
 8000c38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2ac>
 8000c56:	45a6      	cmp	lr, r4
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2ac>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	4464      	add	r4, ip
 8000c5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c62:	fba3 9502 	umull	r9, r5, r3, r2
 8000c66:	eba4 040e 	sub.w	r4, r4, lr
 8000c6a:	42ac      	cmp	r4, r5
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46ae      	mov	lr, r5
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x29c>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x298>
 8000c74:	b156      	cbz	r6, 8000c8c <__udivmoddi4+0x208>
 8000c76:	ebb0 0208 	subs.w	r2, r0, r8
 8000c7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c82:	40ca      	lsrs	r2, r1
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	4317      	orrs	r7, r2
 8000c88:	e9c6 7400 	strd	r7, r4, [r6]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	f1c3 0120 	rsb	r1, r3, #32
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ca4:	409d      	lsls	r5, r3
 8000ca6:	432a      	orrs	r2, r5
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb8:	0c11      	lsrs	r1, r2, #16
 8000cba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000cc2:	428d      	cmp	r5, r1
 8000cc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x258>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd4:	428d      	cmp	r5, r1
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4461      	add	r1, ip
 8000cdc:	1b49      	subs	r1, r1, r5
 8000cde:	b292      	uxth	r2, r2
 8000ce0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ce4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cec:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf0:	4291      	cmp	r1, r2
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x282>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2a8>
 8000cfe:	4291      	cmp	r1, r2
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2a8>
 8000d02:	3d02      	subs	r5, #2
 8000d04:	4462      	add	r2, ip
 8000d06:	1a52      	subs	r2, r2, r1
 8000d08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0xfc>
 8000d0e:	4631      	mov	r1, r6
 8000d10:	4630      	mov	r0, r6
 8000d12:	e708      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000d14:	4639      	mov	r1, r7
 8000d16:	e6e6      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	e6fb      	b.n	8000b14 <__udivmoddi4+0x90>
 8000d1c:	4548      	cmp	r0, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2c:	4645      	mov	r5, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d30:	462b      	mov	r3, r5
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x258>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3c:	3d02      	subs	r5, #2
 8000d3e:	4462      	add	r2, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d42:	4608      	mov	r0, r1
 8000d44:	e70a      	b.n	8000b5c <__udivmoddi4+0xd8>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x14e>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f001 f8d9 	bl	8001f0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f8aa 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 fc24 	bl	80015a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d60:	f000 fbf0 	bl	8001544 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d64:	f000 f968 	bl	8001038 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000d68:	f000 fb10 	bl	800138c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000d6c:	f000 fac0 	bl	80012f0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000d70:	f000 fb62 	bl	8001438 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000d74:	f000 f9fc 	bl	8001170 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000d78:	f000 f9a8 	bl	80010cc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000d7c:	f000 f8e4 	bl	8000f48 <MX_ADC1_Init>


  //QEI_init(&encoder, &htim3, 3072, 2000);
  //HAL_TIM_Encoder_Start(htim3,TIM_CHANNEL_ALL);

  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000d80:	213c      	movs	r1, #60	; 0x3c
 8000d82:	483d      	ldr	r0, [pc, #244]	; (8000e78 <main+0x128>)
 8000d84:	f004 fe20 	bl	80059c8 <HAL_TIM_Encoder_Start>

  //HAL_TIM_Base_Start_IT(&htim5);

  HAL_TIM_Base_Start_IT(&htim2);
 8000d88:	483c      	ldr	r0, [pc, #240]	; (8000e7c <main+0x12c>)
 8000d8a:	f004 fb8b 	bl	80054a4 <HAL_TIM_Base_Start_IT>





  HAL_TIM_Base_Start(&htim4);
 8000d8e:	483c      	ldr	r0, [pc, #240]	; (8000e80 <main+0x130>)
 8000d90:	f004 fb18 	bl	80053c4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000d94:	2100      	movs	r1, #0
 8000d96:	483a      	ldr	r0, [pc, #232]	; (8000e80 <main+0x130>)
 8000d98:	f004 fc5e 	bl	8005658 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	4838      	ldr	r0, [pc, #224]	; (8000e80 <main+0x130>)
 8000da0:	f004 fc5a 	bl	8005658 <HAL_TIM_PWM_Start>


  HAL_TIM_Base_Start(&htim1);
 8000da4:	4837      	ldr	r0, [pc, #220]	; (8000e84 <main+0x134>)
 8000da6:	f004 fb0d 	bl	80053c4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000daa:	2100      	movs	r1, #0
 8000dac:	4835      	ldr	r0, [pc, #212]	; (8000e84 <main+0x134>)
 8000dae:	f004 fc53 	bl	8005658 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000db2:	2104      	movs	r1, #4
 8000db4:	4833      	ldr	r0, [pc, #204]	; (8000e84 <main+0x134>)
 8000db6:	f004 fc4f 	bl	8005658 <HAL_TIM_PWM_Start>


  //HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
  HAL_ADC_Start_DMA(&hadc1,ADC,100);
 8000dba:	2264      	movs	r2, #100	; 0x64
 8000dbc:	4932      	ldr	r1, [pc, #200]	; (8000e88 <main+0x138>)
 8000dbe:	4833      	ldr	r0, [pc, #204]	; (8000e8c <main+0x13c>)
 8000dc0:	f001 fcee 	bl	80027a0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000dc4:	482c      	ldr	r0, [pc, #176]	; (8000e78 <main+0x128>)
 8000dc6:	f004 fafd 	bl	80053c4 <HAL_TIM_Base_Start>
		  QEIEncoderPosVel_Update();
		  motor();
	  }
*/

	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000dca:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <main+0x128>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd0:	4a2f      	ldr	r2, [pc, #188]	; (8000e90 <main+0x140>)
 8000dd2:	6013      	str	r3, [r2, #0]
	  deg = (QEIReadRaw/3072.0)*360;
 8000dd4:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <main+0x140>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fb5f 	bl	800049c <__aeabi_ui2d>
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <main+0x144>)
 8000de4:	f7ff fcfe 	bl	80007e4 <__aeabi_ddiv>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4610      	mov	r0, r2
 8000dee:	4619      	mov	r1, r3
 8000df0:	f04f 0200 	mov.w	r2, #0
 8000df4:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <main+0x148>)
 8000df6:	f7ff fbcb 	bl	8000590 <__aeabi_dmul>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f7ff fdd7 	bl	80009b4 <__aeabi_d2f>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a24      	ldr	r2, [pc, #144]	; (8000e9c <main+0x14c>)
 8000e0a:	6013      	str	r3, [r2, #0]
	  rad = (deg*3.14)/180.0;
 8000e0c:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <main+0x14c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fb65 	bl	80004e0 <__aeabi_f2d>
 8000e16:	a316      	add	r3, pc, #88	; (adr r3, 8000e70 <main+0x120>)
 8000e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1c:	f7ff fbb8 	bl	8000590 <__aeabi_dmul>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <main+0x150>)
 8000e2e:	f7ff fcd9 	bl	80007e4 <__aeabi_ddiv>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f7ff fdbb 	bl	80009b4 <__aeabi_d2f>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a18      	ldr	r2, [pc, #96]	; (8000ea4 <main+0x154>)
 8000e42:	6013      	str	r3, [r2, #0]

	  Trim = (avgA*3072)/4096;
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <main+0x158>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	4413      	add	r3, r2
 8000e4e:	029b      	lsls	r3, r3, #10
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	da01      	bge.n	8000e58 <main+0x108>
 8000e54:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000e58:	131b      	asrs	r3, r3, #12
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <main+0x15c>)
 8000e5e:	601a      	str	r2, [r3, #0]

	  average();
 8000e60:	f000 fc74 	bl	800174c <average>
	  motor();
 8000e64:	f000 fc10 	bl	8001688 <motor>
	  PID();
 8000e68:	f000 fca2 	bl	80017b0 <PID>
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000e6c:	e7ad      	b.n	8000dca <main+0x7a>
 8000e6e:	bf00      	nop
 8000e70:	51eb851f 	.word	0x51eb851f
 8000e74:	40091eb8 	.word	0x40091eb8
 8000e78:	2000031c 	.word	0x2000031c
 8000e7c:	200002d0 	.word	0x200002d0
 8000e80:	20000368 	.word	0x20000368
 8000e84:	20000284 	.word	0x20000284
 8000e88:	200003b8 	.word	0x200003b8
 8000e8c:	20000030 	.word	0x20000030
 8000e90:	200003b4 	.word	0x200003b4
 8000e94:	40a80000 	.word	0x40a80000
 8000e98:	40768000 	.word	0x40768000
 8000e9c:	20000498 	.word	0x20000498
 8000ea0:	40668000 	.word	0x40668000
 8000ea4:	2000049c 	.word	0x2000049c
 8000ea8:	20000484 	.word	0x20000484
 8000eac:	20000488 	.word	0x20000488

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b094      	sub	sp, #80	; 0x50
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	2238      	movs	r2, #56	; 0x38
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f007 fa46 	bl	8008350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f003 f9ee 	bl	80042b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee2:	2340      	movs	r3, #64	; 0x40
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eea:	2302      	movs	r3, #2
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ef2:	2355      	movs	r3, #85	; 0x55
 8000ef4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f02:	f107 0318 	add.w	r3, r7, #24
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 fa88 	bl	800441c <HAL_RCC_OscConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f12:	f000 fcbd 	bl	8001890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f16:	230f      	movs	r3, #15
 8000f18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f003 fd86 	bl	8004a40 <HAL_RCC_ClockConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f3a:	f000 fca9 	bl	8001890 <Error_Handler>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3750      	adds	r7, #80	; 0x50
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08c      	sub	sp, #48	; 0x30
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f007 f9f5 	bl	8008350 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f66:	4b32      	ldr	r3, [pc, #200]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000f68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f6e:	4b30      	ldr	r3, [pc, #192]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000f70:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f76:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f82:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f88:	4b29      	ldr	r3, [pc, #164]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f8e:	4b28      	ldr	r3, [pc, #160]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000f90:	2204      	movs	r2, #4
 8000f92:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f94:	4b26      	ldr	r3, [pc, #152]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f9a:	4b25      	ldr	r3, [pc, #148]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa6:	4b22      	ldr	r3, [pc, #136]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd0:	4817      	ldr	r0, [pc, #92]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000fd2:	f001 fa29 	bl	8002428 <HAL_ADC_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000fdc:	f000 fc58 	bl	8001890 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4811      	ldr	r0, [pc, #68]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000fec:	f002 fa5a 	bl	80034a4 <HAL_ADCEx_MultiModeConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ff6:	f000 fc4b 	bl	8001890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_ADC1_Init+0xec>)
 8000ffc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ffe:	2306      	movs	r3, #6
 8001000:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001002:	2307      	movs	r3, #7
 8001004:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001006:	237f      	movs	r3, #127	; 0x7f
 8001008:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800100a:	2304      	movs	r3, #4
 800100c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <MX_ADC1_Init+0xe8>)
 8001018:	f001 fcb4 	bl	8002984 <HAL_ADC_ConfigChannel>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001022:	f000 fc35 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	3730      	adds	r7, #48	; 0x30
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000030 	.word	0x20000030
 8001034:	04300002 	.word	0x04300002

08001038 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_LPUART1_UART_Init+0x8c>)
 800103e:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <MX_LPUART1_UART_Init+0x90>)
 8001040:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <MX_LPUART1_UART_Init+0x8c>)
 8001044:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001048:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800104a:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <MX_LPUART1_UART_Init+0x8c>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_LPUART1_UART_Init+0x8c>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_LPUART1_UART_Init+0x8c>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_LPUART1_UART_Init+0x8c>)
 800105e:	220c      	movs	r2, #12
 8001060:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_LPUART1_UART_Init+0x8c>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_LPUART1_UART_Init+0x8c>)
 800106a:	2200      	movs	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_LPUART1_UART_Init+0x8c>)
 8001070:	2200      	movs	r2, #0
 8001072:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_LPUART1_UART_Init+0x8c>)
 8001076:	2200      	movs	r2, #0
 8001078:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800107a:	4812      	ldr	r0, [pc, #72]	; (80010c4 <MX_LPUART1_UART_Init+0x8c>)
 800107c:	f005 feee 	bl	8006e5c <HAL_UART_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001086:	f000 fc03 	bl	8001890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800108a:	2100      	movs	r1, #0
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_LPUART1_UART_Init+0x8c>)
 800108e:	f007 f895 	bl	80081bc <HAL_UARTEx_SetTxFifoThreshold>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001098:	f000 fbfa 	bl	8001890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800109c:	2100      	movs	r1, #0
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <MX_LPUART1_UART_Init+0x8c>)
 80010a0:	f007 f8ca 	bl	8008238 <HAL_UARTEx_SetRxFifoThreshold>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80010aa:	f000 fbf1 	bl	8001890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_LPUART1_UART_Init+0x8c>)
 80010b0:	f007 f84b 	bl	800814a <HAL_UARTEx_DisableFifoMode>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80010ba:	f000 fbe9 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200000fc 	.word	0x200000fc
 80010c8:	40008000 	.word	0x40008000

080010cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010d0:	4b25      	ldr	r3, [pc, #148]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 80010d2:	4a26      	ldr	r2, [pc, #152]	; (800116c <MX_USART1_UART_Init+0xa0>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010d6:	4b24      	ldr	r3, [pc, #144]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 80010e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 80010ee:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80010f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 8001114:	2200      	movs	r2, #0
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001118:	2300      	movs	r3, #0
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	4812      	ldr	r0, [pc, #72]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 8001120:	f006 ff8c 	bl	800803c <HAL_RS485Ex_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 800112a:	f000 fbb1 	bl	8001890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800112e:	2100      	movs	r1, #0
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 8001132:	f007 f843 	bl	80081bc <HAL_UARTEx_SetTxFifoThreshold>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_USART1_UART_Init+0x74>
  {
    Error_Handler();
 800113c:	f000 fba8 	bl	8001890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001140:	2100      	movs	r1, #0
 8001142:	4809      	ldr	r0, [pc, #36]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 8001144:	f007 f878 	bl	8008238 <HAL_UARTEx_SetRxFifoThreshold>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART1_UART_Init+0x86>
  {
    Error_Handler();
 800114e:	f000 fb9f 	bl	8001890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 8001154:	f006 fff9 	bl	800814a <HAL_UARTEx_DisableFifoMode>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART1_UART_Init+0x96>
  {
    Error_Handler();
 800115e:	f000 fb97 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000190 	.word	0x20000190
 800116c:	40013800 	.word	0x40013800

08001170 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b09c      	sub	sp, #112	; 0x70
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001176:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001190:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	615a      	str	r2, [r3, #20]
 80011a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2234      	movs	r2, #52	; 0x34
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f007 f8d0 	bl	8008350 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011b0:	4b4d      	ldr	r3, [pc, #308]	; (80012e8 <MX_TIM1_Init+0x178>)
 80011b2:	4a4e      	ldr	r2, [pc, #312]	; (80012ec <MX_TIM1_Init+0x17c>)
 80011b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80011b6:	4b4c      	ldr	r3, [pc, #304]	; (80012e8 <MX_TIM1_Init+0x178>)
 80011b8:	22a9      	movs	r2, #169	; 0xa9
 80011ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b4a      	ldr	r3, [pc, #296]	; (80012e8 <MX_TIM1_Init+0x178>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 80011c2:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <MX_TIM1_Init+0x178>)
 80011c4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80011c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <MX_TIM1_Init+0x178>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011d0:	4b45      	ldr	r3, [pc, #276]	; (80012e8 <MX_TIM1_Init+0x178>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <MX_TIM1_Init+0x178>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011dc:	4842      	ldr	r0, [pc, #264]	; (80012e8 <MX_TIM1_Init+0x178>)
 80011de:	f004 f899 	bl	8005314 <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011e8:	f000 fb52 	bl	8001890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011f6:	4619      	mov	r1, r3
 80011f8:	483b      	ldr	r0, [pc, #236]	; (80012e8 <MX_TIM1_Init+0x178>)
 80011fa:	f004 fed7 	bl	8005fac <HAL_TIM_ConfigClockSource>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001204:	f000 fb44 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001208:	4837      	ldr	r0, [pc, #220]	; (80012e8 <MX_TIM1_Init+0x178>)
 800120a:	f004 f9c3 	bl	8005594 <HAL_TIM_PWM_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001214:	f000 fb3c 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001224:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001228:	4619      	mov	r1, r3
 800122a:	482f      	ldr	r0, [pc, #188]	; (80012e8 <MX_TIM1_Init+0x178>)
 800122c:	f005 fca6 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001236:	f000 fb2b 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123a:	2360      	movs	r3, #96	; 0x60
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001242:	2300      	movs	r3, #0
 8001244:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001246:	2300      	movs	r3, #0
 8001248:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001256:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800125a:	2200      	movs	r2, #0
 800125c:	4619      	mov	r1, r3
 800125e:	4822      	ldr	r0, [pc, #136]	; (80012e8 <MX_TIM1_Init+0x178>)
 8001260:	f004 fd90 	bl	8005d84 <HAL_TIM_PWM_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800126a:	f000 fb11 	bl	8001890 <Error_Handler>
  }
  sConfigOC.Pulse = 20000;
 800126e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001272:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001274:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001278:	2204      	movs	r2, #4
 800127a:	4619      	mov	r1, r3
 800127c:	481a      	ldr	r0, [pc, #104]	; (80012e8 <MX_TIM1_Init+0x178>)
 800127e:	f004 fd81 	bl	8005d84 <HAL_TIM_PWM_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8001288:	f000 fb02 	bl	8001890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012bc:	2300      	movs	r3, #0
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	4807      	ldr	r0, [pc, #28]	; (80012e8 <MX_TIM1_Init+0x178>)
 80012ca:	f005 fced 	bl	8006ca8 <HAL_TIMEx_ConfigBreakDeadTime>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 80012d4:	f000 fadc 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <MX_TIM1_Init+0x178>)
 80012da:	f000 fd05 	bl	8001ce8 <HAL_TIM_MspPostInit>

}
 80012de:	bf00      	nop
 80012e0:	3770      	adds	r7, #112	; 0x70
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000284 	.word	0x20000284
 80012ec:	40012c00 	.word	0x40012c00

080012f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_TIM2_Init+0x98>)
 8001310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001314:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_TIM2_Init+0x98>)
 8001318:	22a9      	movs	r2, #169	; 0xa9
 800131a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_TIM2_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_TIM2_Init+0x98>)
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_TIM2_Init+0x98>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_TIM2_Init+0x98>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001336:	4814      	ldr	r0, [pc, #80]	; (8001388 <MX_TIM2_Init+0x98>)
 8001338:	f003 ffec 	bl	8005314 <HAL_TIM_Base_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001342:	f000 faa5 	bl	8001890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	4619      	mov	r1, r3
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_TIM2_Init+0x98>)
 8001354:	f004 fe2a 	bl	8005fac <HAL_TIM_ConfigClockSource>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800135e:	f000 fa97 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MX_TIM2_Init+0x98>)
 8001370:	f005 fc04 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800137a:	f000 fa89 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200002d0 	.word	0x200002d0

0800138c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	2224      	movs	r2, #36	; 0x24
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f006 ffd8 	bl	8008350 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	463b      	mov	r3, r7
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013aa:	4b21      	ldr	r3, [pc, #132]	; (8001430 <MX_TIM3_Init+0xa4>)
 80013ac:	4a21      	ldr	r2, [pc, #132]	; (8001434 <MX_TIM3_Init+0xa8>)
 80013ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013b0:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <MX_TIM3_Init+0xa4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b6:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <MX_TIM3_Init+0xa4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 80013bc:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <MX_TIM3_Init+0xa4>)
 80013be:	f640 32ff 	movw	r2, #3071	; 0xbff
 80013c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <MX_TIM3_Init+0xa4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <MX_TIM3_Init+0xa4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013d0:	2303      	movs	r3, #3
 80013d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013d8:	2301      	movs	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013e8:	2301      	movs	r3, #1
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	4619      	mov	r1, r3
 80013fa:	480d      	ldr	r0, [pc, #52]	; (8001430 <MX_TIM3_Init+0xa4>)
 80013fc:	f004 fa3e 	bl	800587c <HAL_TIM_Encoder_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001406:	f000 fa43 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	; (8001430 <MX_TIM3_Init+0xa4>)
 8001418:	f005 fbb0 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001422:	f000 fa35 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	3730      	adds	r7, #48	; 0x30
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000031c 	.word	0x2000031c
 8001434:	40000400 	.word	0x40000400

08001438 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	; 0x38
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001458:	463b      	mov	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800146a:	4b34      	ldr	r3, [pc, #208]	; (800153c <MX_TIM4_Init+0x104>)
 800146c:	4a34      	ldr	r2, [pc, #208]	; (8001540 <MX_TIM4_Init+0x108>)
 800146e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001470:	4b32      	ldr	r3, [pc, #200]	; (800153c <MX_TIM4_Init+0x104>)
 8001472:	22a9      	movs	r2, #169	; 0xa9
 8001474:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b31      	ldr	r3, [pc, #196]	; (800153c <MX_TIM4_Init+0x104>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 800147c:	4b2f      	ldr	r3, [pc, #188]	; (800153c <MX_TIM4_Init+0x104>)
 800147e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001482:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001484:	4b2d      	ldr	r3, [pc, #180]	; (800153c <MX_TIM4_Init+0x104>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b2c      	ldr	r3, [pc, #176]	; (800153c <MX_TIM4_Init+0x104>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001490:	482a      	ldr	r0, [pc, #168]	; (800153c <MX_TIM4_Init+0x104>)
 8001492:	f003 ff3f 	bl	8005314 <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800149c:	f000 f9f8 	bl	8001890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014aa:	4619      	mov	r1, r3
 80014ac:	4823      	ldr	r0, [pc, #140]	; (800153c <MX_TIM4_Init+0x104>)
 80014ae:	f004 fd7d 	bl	8005fac <HAL_TIM_ConfigClockSource>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80014b8:	f000 f9ea 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014bc:	481f      	ldr	r0, [pc, #124]	; (800153c <MX_TIM4_Init+0x104>)
 80014be:	f004 f869 	bl	8005594 <HAL_TIM_PWM_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80014c8:	f000 f9e2 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	4818      	ldr	r0, [pc, #96]	; (800153c <MX_TIM4_Init+0x104>)
 80014dc:	f005 fb4e 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80014e6:	f000 f9d3 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ea:	2360      	movs	r3, #96	; 0x60
 80014ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	4619      	mov	r1, r3
 8001500:	480e      	ldr	r0, [pc, #56]	; (800153c <MX_TIM4_Init+0x104>)
 8001502:	f004 fc3f 	bl	8005d84 <HAL_TIM_PWM_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800150c:	f000 f9c0 	bl	8001890 <Error_Handler>
  }
  sConfigOC.Pulse = 20000;
 8001510:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001514:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001516:	463b      	mov	r3, r7
 8001518:	2204      	movs	r2, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4807      	ldr	r0, [pc, #28]	; (800153c <MX_TIM4_Init+0x104>)
 800151e:	f004 fc31 	bl	8005d84 <HAL_TIM_PWM_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8001528:	f000 f9b2 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800152c:	4803      	ldr	r0, [pc, #12]	; (800153c <MX_TIM4_Init+0x104>)
 800152e:	f000 fbdb 	bl	8001ce8 <HAL_TIM_MspPostInit>

}
 8001532:	bf00      	nop
 8001534:	3738      	adds	r7, #56	; 0x38
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000368 	.word	0x20000368
 8001540:	40000800 	.word	0x40000800

08001544 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_DMA_Init+0x60>)
 800154c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <MX_DMA_Init+0x60>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	6493      	str	r3, [r2, #72]	; 0x48
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_DMA_Init+0x60>)
 8001558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <MX_DMA_Init+0x60>)
 8001564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001566:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <MX_DMA_Init+0x60>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6493      	str	r3, [r2, #72]	; 0x48
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <MX_DMA_Init+0x60>)
 8001570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	200b      	movs	r0, #11
 8001580:	f002 f973 	bl	800386a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001584:	200b      	movs	r0, #11
 8001586:	f002 f98a 	bl	800389e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	200c      	movs	r0, #12
 8001590:	f002 f96b 	bl	800386a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001594:	200c      	movs	r0, #12
 8001596:	f002 f982 	bl	800389e <HAL_NVIC_EnableIRQ>

}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000

080015a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <MX_GPIO_Init+0xd8>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a2f      	ldr	r2, [pc, #188]	; (8001680 <MX_GPIO_Init+0xd8>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <MX_GPIO_Init+0xd8>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <MX_GPIO_Init+0xd8>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a29      	ldr	r2, [pc, #164]	; (8001680 <MX_GPIO_Init+0xd8>)
 80015dc:	f043 0320 	orr.w	r3, r3, #32
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b27      	ldr	r3, [pc, #156]	; (8001680 <MX_GPIO_Init+0xd8>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f003 0320 	and.w	r3, r3, #32
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <MX_GPIO_Init+0xd8>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a23      	ldr	r2, [pc, #140]	; (8001680 <MX_GPIO_Init+0xd8>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <MX_GPIO_Init+0xd8>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <MX_GPIO_Init+0xd8>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <MX_GPIO_Init+0xd8>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <MX_GPIO_Init+0xd8>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f002 fe08 	bl	800423c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800162c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001632:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	4810      	ldr	r0, [pc, #64]	; (8001684 <MX_GPIO_Init+0xdc>)
 8001644:	f002 fc78 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8001648:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001664:	f002 fc68 	bl	8003f38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	2028      	movs	r0, #40	; 0x28
 800166e:	f002 f8fc 	bl	800386a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001672:	2028      	movs	r0, #40	; 0x28
 8001674:	f002 f913 	bl	800389e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	; 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000
 8001684:	48000800 	.word	0x48000800

08001688 <motor>:

*/


void motor()
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
	x = (period / 100) * duty;
 800168c:	4b28      	ldr	r3, [pc, #160]	; (8001730 <motor+0xa8>)
 800168e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001692:	4a28      	ldr	r2, [pc, #160]	; (8001734 <motor+0xac>)
 8001694:	fb82 1203 	smull	r1, r2, r2, r3
 8001698:	1152      	asrs	r2, r2, #5
 800169a:	17db      	asrs	r3, r3, #31
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	b21b      	sxth	r3, r3
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	4b25      	ldr	r3, [pc, #148]	; (8001738 <motor+0xb0>)
 80016a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	fb12 f303 	smulbb	r3, r2, r3
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <motor+0xb4>)
 80016b4:	801a      	strh	r2, [r3, #0]

	if (duty > 0)
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <motor+0xb0>)
 80016b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	dd09      	ble.n	80016d4 <motor+0x4c>
	{
		InA = x;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <motor+0xb4>)
 80016c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <motor+0xb8>)
 80016ca:	601a      	str	r2, [r3, #0]
		InB = 0;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <motor+0xbc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e01d      	b.n	8001710 <motor+0x88>
	}

	else if (duty < 0)
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <motor+0xb0>)
 80016d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	da0d      	bge.n	80016fa <motor+0x72>
	{
		InA = 0;
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <motor+0xb8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
		InB = abs(x);
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <motor+0xb4>)
 80016e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	bfb8      	it	lt
 80016ee:	425b      	neglt	r3, r3
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <motor+0xbc>)
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	e00a      	b.n	8001710 <motor+0x88>
	}

	else if (duty == 0)
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <motor+0xb0>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <motor+0x88>
	{
		InA = 0;
 8001704:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <motor+0xb8>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
		InB = 0;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <motor+0xbc>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
	}

	  //__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, InA);
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, InA);
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <motor+0xb8>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <motor+0xc0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, InB);
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <motor+0xbc>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <motor+0xc0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000000 	.word	0x20000000
 8001734:	51eb851f 	.word	0x51eb851f
 8001738:	20000494 	.word	0x20000494
 800173c:	20000496 	.word	0x20000496
 8001740:	2000048c 	.word	0x2000048c
 8001744:	20000490 	.word	0x20000490
 8001748:	20000284 	.word	0x20000284

0800174c <average>:



void average()
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
	sumA = 0;
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <average+0x54>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 100; i++)
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	e00c      	b.n	8001778 <average+0x2c>
	{
		sumA += ADC[i];
 800175e:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <average+0x58>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001766:	461a      	mov	r2, r3
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <average+0x54>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4413      	add	r3, r2
 800176e:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <average+0x54>)
 8001770:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 100; i++)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3301      	adds	r3, #1
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b63      	cmp	r3, #99	; 0x63
 800177c:	ddef      	ble.n	800175e <average+0x12>
	}
	avgA = sumA / 100;
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <average+0x54>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <average+0x5c>)
 8001784:	fb82 1203 	smull	r1, r2, r2, r3
 8001788:	1152      	asrs	r2, r2, #5
 800178a:	17db      	asrs	r3, r3, #31
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	4a07      	ldr	r2, [pc, #28]	; (80017ac <average+0x60>)
 8001790:	6013      	str	r3, [r2, #0]

}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000480 	.word	0x20000480
 80017a4:	200003b8 	.word	0x200003b8
 80017a8:	51eb851f 	.word	0x51eb851f
 80017ac:	20000484 	.word	0x20000484

080017b0 <PID>:



void PID()
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	error = Trim - QEIReadRaw;
 80017b4:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <PID+0xb8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <PID+0xbc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <PID+0xc0>)
 80017c4:	601a      	str	r2, [r3, #0]
	sum_e = sum_e + error;
 80017c6:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <PID+0xc0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d2:	4b28      	ldr	r3, [pc, #160]	; (8001874 <PID+0xc4>)
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <PID+0xc4>)
 80017de:	edc3 7a00 	vstr	s15, [r3]
	u = (Kp*error)+(Ki*sum_e)+(Kd*(error-error_p));
 80017e2:	4b23      	ldr	r3, [pc, #140]	; (8001870 <PID+0xc0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <PID+0xc8>)
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f8:	4b20      	ldr	r3, [pc, #128]	; (800187c <PID+0xcc>)
 80017fa:	edd3 6a00 	vldr	s13, [r3]
 80017fe:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <PID+0xc4>)
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001808:	ee37 7a27 	vadd.f32	s14, s14, s15
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <PID+0xc0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <PID+0xd0>)
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <PID+0xd4>)
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800182c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <PID+0xd8>)
 8001832:	edc3 7a00 	vstr	s15, [r3]
	duty = u;
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <PID+0xd8>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001840:	ee17 3a90 	vmov	r3, s15
 8001844:	b21a      	sxth	r2, r3
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <PID+0xdc>)
 8001848:	801a      	strh	r2, [r3, #0]
	error_p = error;
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <PID+0xc0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <PID+0xd0>)
 8001858:	edc3 7a00 	vstr	s15, [r3]
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000488 	.word	0x20000488
 800186c:	200003b4 	.word	0x200003b4
 8001870:	200004a0 	.word	0x200004a0
 8001874:	200004a4 	.word	0x200004a4
 8001878:	20000004 	.word	0x20000004
 800187c:	200004a8 	.word	0x200004a8
 8001880:	200004b0 	.word	0x200004b0
 8001884:	200004ac 	.word	0x200004ac
 8001888:	200004b4 	.word	0x200004b4
 800188c:	20000494 	.word	0x20000494

08001890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001894:	b672      	cpsid	i
}
 8001896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001898:	e7fe      	b.n	8001898 <Error_Handler+0x8>
	...

0800189c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_MspInit+0x44>)
 80018a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a6:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <HAL_MspInit+0x44>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6613      	str	r3, [r2, #96]	; 0x60
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <HAL_MspInit+0x44>)
 80018b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_MspInit+0x44>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018be:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <HAL_MspInit+0x44>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6593      	str	r3, [r2, #88]	; 0x58
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_MspInit+0x44>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80018d2:	f002 fd93 	bl	80043fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b09e      	sub	sp, #120	; 0x78
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	2254      	movs	r2, #84	; 0x54
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f006 fd23 	bl	8008350 <memset>
  if(hadc->Instance==ADC1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001912:	d15f      	bne.n	80019d4 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001914:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001918:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800191a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800191e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	4618      	mov	r0, r3
 8001926:	f003 faa7 	bl	8004e78 <HAL_RCCEx_PeriphCLKConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001930:	f7ff ffae 	bl	8001890 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001934:	4b29      	ldr	r3, [pc, #164]	; (80019dc <HAL_ADC_MspInit+0xf8>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001938:	4a28      	ldr	r2, [pc, #160]	; (80019dc <HAL_ADC_MspInit+0xf8>)
 800193a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800193e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001940:	4b26      	ldr	r3, [pc, #152]	; (80019dc <HAL_ADC_MspInit+0xf8>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194c:	4b23      	ldr	r3, [pc, #140]	; (80019dc <HAL_ADC_MspInit+0xf8>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001950:	4a22      	ldr	r2, [pc, #136]	; (80019dc <HAL_ADC_MspInit+0xf8>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001958:	4b20      	ldr	r3, [pc, #128]	; (80019dc <HAL_ADC_MspInit+0xf8>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001964:	2301      	movs	r3, #1
 8001966:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001968:	2303      	movs	r3, #3
 800196a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001974:	4619      	mov	r1, r3
 8001976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197a:	f002 fadd 	bl	8003f38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <HAL_ADC_MspInit+0xfc>)
 8001980:	4a18      	ldr	r2, [pc, #96]	; (80019e4 <HAL_ADC_MspInit+0x100>)
 8001982:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001984:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <HAL_ADC_MspInit+0xfc>)
 8001986:	2205      	movs	r2, #5
 8001988:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_ADC_MspInit+0xfc>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_ADC_MspInit+0xfc>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_ADC_MspInit+0xfc>)
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <HAL_ADC_MspInit+0xfc>)
 800199e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <HAL_ADC_MspInit+0xfc>)
 80019a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019aa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_ADC_MspInit+0xfc>)
 80019ae:	2220      	movs	r2, #32
 80019b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_ADC_MspInit+0xfc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019b8:	4809      	ldr	r0, [pc, #36]	; (80019e0 <HAL_ADC_MspInit+0xfc>)
 80019ba:	f001 ff8b 	bl	80038d4 <HAL_DMA_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80019c4:	f7ff ff64 	bl	8001890 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <HAL_ADC_MspInit+0xfc>)
 80019cc:	655a      	str	r2, [r3, #84]	; 0x54
 80019ce:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <HAL_ADC_MspInit+0xfc>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019d4:	bf00      	nop
 80019d6:	3778      	adds	r7, #120	; 0x78
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	2000009c 	.word	0x2000009c
 80019e4:	4002001c 	.word	0x4002001c

080019e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b0a2      	sub	sp, #136	; 0x88
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	2254      	movs	r2, #84	; 0x54
 8001a06:	2100      	movs	r1, #0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f006 fca1 	bl	8008350 <memset>
  if(huart->Instance==LPUART1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a68      	ldr	r2, [pc, #416]	; (8001bb4 <HAL_UART_MspInit+0x1cc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d139      	bne.n	8001a8c <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a18:	2320      	movs	r3, #32
 8001a1a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a20:	f107 0320 	add.w	r3, r7, #32
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 fa27 	bl	8004e78 <HAL_RCCEx_PeriphCLKConfig>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a30:	f7ff ff2e 	bl	8001890 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a34:	4b60      	ldr	r3, [pc, #384]	; (8001bb8 <HAL_UART_MspInit+0x1d0>)
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	4a5f      	ldr	r2, [pc, #380]	; (8001bb8 <HAL_UART_MspInit+0x1d0>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001a40:	4b5d      	ldr	r3, [pc, #372]	; (8001bb8 <HAL_UART_MspInit+0x1d0>)
 8001a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4c:	4b5a      	ldr	r3, [pc, #360]	; (8001bb8 <HAL_UART_MspInit+0x1d0>)
 8001a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a50:	4a59      	ldr	r2, [pc, #356]	; (8001bb8 <HAL_UART_MspInit+0x1d0>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a58:	4b57      	ldr	r3, [pc, #348]	; (8001bb8 <HAL_UART_MspInit+0x1d0>)
 8001a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	61bb      	str	r3, [r7, #24]
 8001a62:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001a64:	230c      	movs	r3, #12
 8001a66:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001a76:	230c      	movs	r3, #12
 8001a78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a80:	4619      	mov	r1, r3
 8001a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a86:	f002 fa57 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a8a:	e08f      	b.n	8001bac <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a4a      	ldr	r2, [pc, #296]	; (8001bbc <HAL_UART_MspInit+0x1d4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	f040 808a 	bne.w	8001bac <HAL_UART_MspInit+0x1c4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa0:	f107 0320 	add.w	r3, r7, #32
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 f9e7 	bl	8004e78 <HAL_RCCEx_PeriphCLKConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_UART_MspInit+0xcc>
      Error_Handler();
 8001ab0:	f7ff feee 	bl	8001890 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ab4:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <HAL_UART_MspInit+0x1d0>)
 8001ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab8:	4a3f      	ldr	r2, [pc, #252]	; (8001bb8 <HAL_UART_MspInit+0x1d0>)
 8001aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abe:	6613      	str	r3, [r2, #96]	; 0x60
 8001ac0:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <HAL_UART_MspInit+0x1d0>)
 8001ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001acc:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <HAL_UART_MspInit+0x1d0>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad0:	4a39      	ldr	r2, [pc, #228]	; (8001bb8 <HAL_UART_MspInit+0x1d0>)
 8001ad2:	f043 0304 	orr.w	r3, r3, #4
 8001ad6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad8:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <HAL_UART_MspInit+0x1d0>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae4:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <HAL_UART_MspInit+0x1d0>)
 8001ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae8:	4a33      	ldr	r2, [pc, #204]	; (8001bb8 <HAL_UART_MspInit+0x1d0>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af0:	4b31      	ldr	r3, [pc, #196]	; (8001bb8 <HAL_UART_MspInit+0x1d0>)
 8001af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001afc:	2330      	movs	r3, #48	; 0x30
 8001afe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b0e:	2307      	movs	r3, #7
 8001b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4829      	ldr	r0, [pc, #164]	; (8001bc0 <HAL_UART_MspInit+0x1d8>)
 8001b1c:	f002 fa0c 	bl	8003f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b24:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b34:	2307      	movs	r3, #7
 8001b36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b44:	f002 f9f8 	bl	8003f38 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <HAL_UART_MspInit+0x1dc>)
 8001b4a:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <HAL_UART_MspInit+0x1e0>)
 8001b4c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <HAL_UART_MspInit+0x1dc>)
 8001b50:	2218      	movs	r2, #24
 8001b52:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_UART_MspInit+0x1dc>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_UART_MspInit+0x1dc>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b60:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <HAL_UART_MspInit+0x1dc>)
 8001b62:	2280      	movs	r2, #128	; 0x80
 8001b64:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_UART_MspInit+0x1dc>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_UART_MspInit+0x1dc>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_UART_MspInit+0x1dc>)
 8001b74:	2220      	movs	r2, #32
 8001b76:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_UART_MspInit+0x1dc>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b7e:	4811      	ldr	r0, [pc, #68]	; (8001bc4 <HAL_UART_MspInit+0x1dc>)
 8001b80:	f001 fea8 	bl	80038d4 <HAL_DMA_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8001b8a:	f7ff fe81 	bl	8001890 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a0c      	ldr	r2, [pc, #48]	; (8001bc4 <HAL_UART_MspInit+0x1dc>)
 8001b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001b96:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <HAL_UART_MspInit+0x1dc>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	2025      	movs	r0, #37	; 0x25
 8001ba2:	f001 fe62 	bl	800386a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ba6:	2025      	movs	r0, #37	; 0x25
 8001ba8:	f001 fe79 	bl	800389e <HAL_NVIC_EnableIRQ>
}
 8001bac:	bf00      	nop
 8001bae:	3788      	adds	r7, #136	; 0x88
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40008000 	.word	0x40008000
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	48000800 	.word	0x48000800
 8001bc4:	20000224 	.word	0x20000224
 8001bc8:	40020008 	.word	0x40020008

08001bcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <HAL_TIM_Base_MspInit+0x8c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bde:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <HAL_TIM_Base_MspInit+0x90>)
 8001be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be2:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <HAL_TIM_Base_MspInit+0x90>)
 8001be4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001be8:	6613      	str	r3, [r2, #96]	; 0x60
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <HAL_TIM_Base_MspInit+0x90>)
 8001bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bf6:	e02a      	b.n	8001c4e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c00:	d114      	bne.n	8001c2c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_TIM_Base_MspInit+0x90>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	4a15      	ldr	r2, [pc, #84]	; (8001c5c <HAL_TIM_Base_MspInit+0x90>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <HAL_TIM_Base_MspInit+0x90>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	201c      	movs	r0, #28
 8001c20:	f001 fe23 	bl	800386a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c24:	201c      	movs	r0, #28
 8001c26:	f001 fe3a 	bl	800389e <HAL_NVIC_EnableIRQ>
}
 8001c2a:	e010      	b.n	8001c4e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <HAL_TIM_Base_MspInit+0x94>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d10b      	bne.n	8001c4e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_TIM_Base_MspInit+0x90>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <HAL_TIM_Base_MspInit+0x90>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6593      	str	r3, [r2, #88]	; 0x58
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_TIM_Base_MspInit+0x90>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40012c00 	.word	0x40012c00
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40000800 	.word	0x40000800

08001c64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a17      	ldr	r2, [pc, #92]	; (8001ce0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d128      	bne.n	8001cd8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	4a16      	ldr	r2, [pc, #88]	; (8001ce4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	6593      	str	r3, [r2, #88]	; 0x58
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cb6:	23c0      	movs	r3, #192	; 0xc0
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd4:	f002 f930 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cd8:	bf00      	nop
 8001cda:	3728      	adds	r7, #40	; 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a31      	ldr	r2, [pc, #196]	; (8001dcc <HAL_TIM_MspPostInit+0xe4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d11c      	bne.n	8001d44 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0a:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <HAL_TIM_MspPostInit+0xe8>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	4a30      	ldr	r2, [pc, #192]	; (8001dd0 <HAL_TIM_MspPostInit+0xe8>)
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d16:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <HAL_TIM_MspPostInit+0xe8>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d22:	2303      	movs	r3, #3
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d32:	2302      	movs	r3, #2
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4825      	ldr	r0, [pc, #148]	; (8001dd4 <HAL_TIM_MspPostInit+0xec>)
 8001d3e:	f002 f8fb 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d42:	e03e      	b.n	8001dc2 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM4)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a23      	ldr	r2, [pc, #140]	; (8001dd8 <HAL_TIM_MspPostInit+0xf0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d139      	bne.n	8001dc2 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_TIM_MspPostInit+0xe8>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a1f      	ldr	r2, [pc, #124]	; (8001dd0 <HAL_TIM_MspPostInit+0xe8>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_TIM_MspPostInit+0xe8>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <HAL_TIM_MspPostInit+0xe8>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	4a19      	ldr	r2, [pc, #100]	; (8001dd0 <HAL_TIM_MspPostInit+0xe8>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_TIM_MspPostInit+0xe8>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001d90:	230a      	movs	r3, #10
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d9e:	f002 f8cb 	bl	8003f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001db2:	2302      	movs	r3, #2
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4807      	ldr	r0, [pc, #28]	; (8001ddc <HAL_TIM_MspPostInit+0xf4>)
 8001dbe:	f002 f8bb 	bl	8003f38 <HAL_GPIO_Init>
}
 8001dc2:	bf00      	nop
 8001dc4:	3728      	adds	r7, #40	; 0x28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40012c00 	.word	0x40012c00
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	48000800 	.word	0x48000800
 8001dd8:	40000800 	.word	0x40000800
 8001ddc:	48000400 	.word	0x48000400

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de4:	e7fe      	b.n	8001de4 <NMI_Handler+0x4>

08001de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <HardFault_Handler+0x4>

08001dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <MemManage_Handler+0x4>

08001df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <BusFault_Handler+0x4>

08001df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <UsageFault_Handler+0x4>

08001dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2c:	f000 f8c0 	bl	8001fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <DMA1_Channel1_IRQHandler+0x10>)
 8001e3a:	f001 ff2e 	bl	8003c9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000224 	.word	0x20000224

08001e48 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <DMA1_Channel2_IRQHandler+0x10>)
 8001e4e:	f001 ff24 	bl	8003c9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000009c 	.word	0x2000009c

08001e5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <TIM2_IRQHandler+0x10>)
 8001e62:	f003 fe3f 	bl	8005ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200002d0 	.word	0x200002d0

08001e70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <USART1_IRQHandler+0x10>)
 8001e76:	f005 f841 	bl	8006efc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000190 	.word	0x20000190

08001e84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e8c:	f002 f9ee 	bl	800426c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <SystemInit+0x20>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <SystemInit+0x20>)
 8001ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001eb8:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ebc:	f7ff ffea 	bl	8001e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec0:	480c      	ldr	r0, [pc, #48]	; (8001ef4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ec2:	490d      	ldr	r1, [pc, #52]	; (8001ef8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <LoopForever+0xe>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ec8:	e002      	b.n	8001ed0 <LoopCopyDataInit>

08001eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ece:	3304      	adds	r3, #4

08001ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed4:	d3f9      	bcc.n	8001eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ed8:	4c0a      	ldr	r4, [pc, #40]	; (8001f04 <LoopForever+0x16>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001edc:	e001      	b.n	8001ee2 <LoopFillZerobss>

08001ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee0:	3204      	adds	r2, #4

08001ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee4:	d3fb      	bcc.n	8001ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee6:	f006 fa3b 	bl	8008360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eea:	f7fe ff31 	bl	8000d50 <main>

08001eee <LoopForever>:

LoopForever:
    b LoopForever
 8001eee:	e7fe      	b.n	8001eee <LoopForever>
  ldr   r0, =_estack
 8001ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001efc:	08008410 	.word	0x08008410
  ldr r2, =_sbss
 8001f00:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001f04:	200004bc 	.word	0x200004bc

08001f08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f08:	e7fe      	b.n	8001f08 <ADC1_2_IRQHandler>

08001f0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f001 fc9d 	bl	8003854 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f000 f80e 	bl	8001f3c <HAL_InitTick>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	71fb      	strb	r3, [r7, #7]
 8001f2a:	e001      	b.n	8001f30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f2c:	f7ff fcb6 	bl	800189c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f30:	79fb      	ldrb	r3, [r7, #7]

}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_InitTick+0x68>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d022      	beq.n	8001f96 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_InitTick+0x6c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_InitTick+0x68>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	f001 fca8 	bl	80038ba <HAL_SYSTICK_Config>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10f      	bne.n	8001f90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b0f      	cmp	r3, #15
 8001f74:	d809      	bhi.n	8001f8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f76:	2200      	movs	r2, #0
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7e:	f001 fc74 	bl	800386a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <HAL_InitTick+0x70>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	e007      	b.n	8001f9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	e004      	b.n	8001f9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	e001      	b.n	8001f9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000010 	.word	0x20000010
 8001fa8:	20000008 	.word	0x20000008
 8001fac:	2000000c 	.word	0x2000000c

08001fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_IncTick+0x1c>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_IncTick+0x20>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a03      	ldr	r2, [pc, #12]	; (8001fcc <HAL_IncTick+0x1c>)
 8001fc0:	6013      	str	r3, [r2, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	200004b8 	.word	0x200004b8
 8001fd0:	20000010 	.word	0x20000010

08001fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <HAL_GetTick+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	200004b8 	.word	0x200004b8

08001fec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	609a      	str	r2, [r3, #8]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	609a      	str	r2, [r3, #8]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002054:	b480      	push	{r7}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3360      	adds	r3, #96	; 0x60
 8002066:	461a      	mov	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <LL_ADC_SetOffset+0x44>)
 8002076:	4013      	ands	r3, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	4313      	orrs	r3, r2
 8002084:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800208c:	bf00      	nop
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	03fff000 	.word	0x03fff000

0800209c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3360      	adds	r3, #96	; 0x60
 80020aa:	461a      	mov	r2, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3360      	adds	r3, #96	; 0x60
 80020d8:	461a      	mov	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020f2:	bf00      	nop
 80020f4:	371c      	adds	r7, #28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80020fe:	b480      	push	{r7}
 8002100:	b087      	sub	sp, #28
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3360      	adds	r3, #96	; 0x60
 800210e:	461a      	mov	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	431a      	orrs	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002128:	bf00      	nop
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3360      	adds	r3, #96	; 0x60
 8002144:	461a      	mov	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	431a      	orrs	r2, r3
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800215e:	bf00      	nop
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	615a      	str	r2, [r3, #20]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b087      	sub	sp, #28
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3330      	adds	r3, #48	; 0x30
 80021c6:	461a      	mov	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	4413      	add	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	211f      	movs	r1, #31
 80021e2:	fa01 f303 	lsl.w	r3, r1, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	401a      	ands	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	0e9b      	lsrs	r3, r3, #26
 80021ee:	f003 011f 	and.w	r1, r3, #31
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	431a      	orrs	r2, r3
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800220e:	b480      	push	{r7}
 8002210:	b087      	sub	sp, #28
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3314      	adds	r3, #20
 800221e:	461a      	mov	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	0e5b      	lsrs	r3, r3, #25
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	4413      	add	r3, r2
 800222c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	0d1b      	lsrs	r3, r3, #20
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	2107      	movs	r1, #7
 800223c:	fa01 f303 	lsl.w	r3, r1, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	401a      	ands	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	0d1b      	lsrs	r3, r3, #20
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	431a      	orrs	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002258:	bf00      	nop
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227c:	43db      	mvns	r3, r3
 800227e:	401a      	ands	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0318 	and.w	r3, r3, #24
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002288:	40d9      	lsrs	r1, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	400b      	ands	r3, r1
 800228e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002292:	431a      	orrs	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	0007ffff 	.word	0x0007ffff

080022ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 031f 	and.w	r3, r3, #31
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80022d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6093      	str	r3, [r2, #8]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002300:	d101      	bne.n	8002306 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002324:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002328:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002350:	d101      	bne.n	8002356 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002374:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002378:	f043 0201 	orr.w	r2, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <LL_ADC_IsEnabled+0x18>
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <LL_ADC_IsEnabled+0x1a>
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023c6:	f043 0204 	orr.w	r2, r3, #4
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d101      	bne.n	80023f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b08      	cmp	r3, #8
 8002412:	d101      	bne.n	8002418 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b089      	sub	sp, #36	; 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e1a9      	b.n	8002796 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d109      	bne.n	8002464 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff fa47 	bl	80018e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff3f 	bl	80022ec <LL_ADC_IsDeepPowerDownEnabled>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d004      	beq.n	800247e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff25 	bl	80022c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff5a 	bl	800233c <LL_ADC_IsInternalRegulatorEnabled>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d115      	bne.n	80024ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff3e 	bl	8002314 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002498:	4b9c      	ldr	r3, [pc, #624]	; (800270c <HAL_ADC_Init+0x2e4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	099b      	lsrs	r3, r3, #6
 800249e:	4a9c      	ldr	r2, [pc, #624]	; (8002710 <HAL_ADC_Init+0x2e8>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	099b      	lsrs	r3, r3, #6
 80024a6:	3301      	adds	r3, #1
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024ac:	e002      	b.n	80024b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f9      	bne.n	80024ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff3c 	bl	800233c <LL_ADC_IsInternalRegulatorEnabled>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ce:	f043 0210 	orr.w	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024da:	f043 0201 	orr.w	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ff75 	bl	80023da <LL_ADC_REG_IsConversionOngoing>
 80024f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 8142 	bne.w	8002784 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 813e 	bne.w	8002784 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002510:	f043 0202 	orr.w	r2, r3, #2
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ff35 	bl	800238c <LL_ADC_IsEnabled>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d141      	bne.n	80025ac <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002530:	d004      	beq.n	800253c <HAL_ADC_Init+0x114>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a77      	ldr	r2, [pc, #476]	; (8002714 <HAL_ADC_Init+0x2ec>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d10f      	bne.n	800255c <HAL_ADC_Init+0x134>
 800253c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002540:	f7ff ff24 	bl	800238c <LL_ADC_IsEnabled>
 8002544:	4604      	mov	r4, r0
 8002546:	4873      	ldr	r0, [pc, #460]	; (8002714 <HAL_ADC_Init+0x2ec>)
 8002548:	f7ff ff20 	bl	800238c <LL_ADC_IsEnabled>
 800254c:	4603      	mov	r3, r0
 800254e:	4323      	orrs	r3, r4
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e012      	b.n	8002582 <HAL_ADC_Init+0x15a>
 800255c:	486e      	ldr	r0, [pc, #440]	; (8002718 <HAL_ADC_Init+0x2f0>)
 800255e:	f7ff ff15 	bl	800238c <LL_ADC_IsEnabled>
 8002562:	4604      	mov	r4, r0
 8002564:	486d      	ldr	r0, [pc, #436]	; (800271c <HAL_ADC_Init+0x2f4>)
 8002566:	f7ff ff11 	bl	800238c <LL_ADC_IsEnabled>
 800256a:	4603      	mov	r3, r0
 800256c:	431c      	orrs	r4, r3
 800256e:	486c      	ldr	r0, [pc, #432]	; (8002720 <HAL_ADC_Init+0x2f8>)
 8002570:	f7ff ff0c 	bl	800238c <LL_ADC_IsEnabled>
 8002574:	4603      	mov	r3, r0
 8002576:	4323      	orrs	r3, r4
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d012      	beq.n	80025ac <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800258e:	d004      	beq.n	800259a <HAL_ADC_Init+0x172>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a5f      	ldr	r2, [pc, #380]	; (8002714 <HAL_ADC_Init+0x2ec>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d101      	bne.n	800259e <HAL_ADC_Init+0x176>
 800259a:	4a62      	ldr	r2, [pc, #392]	; (8002724 <HAL_ADC_Init+0x2fc>)
 800259c:	e000      	b.n	80025a0 <HAL_ADC_Init+0x178>
 800259e:	4a62      	ldr	r2, [pc, #392]	; (8002728 <HAL_ADC_Init+0x300>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4619      	mov	r1, r3
 80025a6:	4610      	mov	r0, r2
 80025a8:	f7ff fd20 	bl	8001fec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7f5b      	ldrb	r3, [r3, #29]
 80025b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80025bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80025c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d106      	bne.n	80025e8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025de:	3b01      	subs	r3, #1
 80025e0:	045b      	lsls	r3, r3, #17
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d009      	beq.n	8002604 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	4b48      	ldr	r3, [pc, #288]	; (800272c <HAL_ADC_Init+0x304>)
 800260c:	4013      	ands	r3, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	69b9      	ldr	r1, [r7, #24]
 8002614:	430b      	orrs	r3, r1
 8002616:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fee4 	bl	8002400 <LL_ADC_INJ_IsConversionOngoing>
 8002638:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d17f      	bne.n	8002740 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d17c      	bne.n	8002740 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800264a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002652:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002662:	f023 0302 	bic.w	r3, r3, #2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	69b9      	ldr	r1, [r7, #24]
 800266c:	430b      	orrs	r3, r1
 800266e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d017      	beq.n	80026a8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002686:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002690:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002694:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6911      	ldr	r1, [r2, #16]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80026a6:	e013      	b.n	80026d0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026cc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d12a      	bne.n	8002730 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80026e4:	f023 0304 	bic.w	r3, r3, #4
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026f0:	4311      	orrs	r1, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80026f6:	4311      	orrs	r1, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026fc:	430a      	orrs	r2, r1
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0201 	orr.w	r2, r2, #1
 8002708:	611a      	str	r2, [r3, #16]
 800270a:	e019      	b.n	8002740 <HAL_ADC_Init+0x318>
 800270c:	20000008 	.word	0x20000008
 8002710:	053e2d63 	.word	0x053e2d63
 8002714:	50000100 	.word	0x50000100
 8002718:	50000400 	.word	0x50000400
 800271c:	50000500 	.word	0x50000500
 8002720:	50000600 	.word	0x50000600
 8002724:	50000300 	.word	0x50000300
 8002728:	50000700 	.word	0x50000700
 800272c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d10c      	bne.n	8002762 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f023 010f 	bic.w	r1, r3, #15
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	1e5a      	subs	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
 8002760:	e007      	b.n	8002772 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 020f 	bic.w	r2, r2, #15
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	f023 0303 	bic.w	r3, r3, #3
 800277a:	f043 0201 	orr.w	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	65da      	str	r2, [r3, #92]	; 0x5c
 8002782:	e007      	b.n	8002794 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	f043 0210 	orr.w	r2, r3, #16
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002794:	7ffb      	ldrb	r3, [r7, #31]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3724      	adds	r7, #36	; 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd90      	pop	{r4, r7, pc}
 800279e:	bf00      	nop

080027a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027b4:	d004      	beq.n	80027c0 <HAL_ADC_Start_DMA+0x20>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a5a      	ldr	r2, [pc, #360]	; (8002924 <HAL_ADC_Start_DMA+0x184>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_Start_DMA+0x24>
 80027c0:	4b59      	ldr	r3, [pc, #356]	; (8002928 <HAL_ADC_Start_DMA+0x188>)
 80027c2:	e000      	b.n	80027c6 <HAL_ADC_Start_DMA+0x26>
 80027c4:	4b59      	ldr	r3, [pc, #356]	; (800292c <HAL_ADC_Start_DMA+0x18c>)
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fd70 	bl	80022ac <LL_ADC_GetMultimode>
 80027cc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fe01 	bl	80023da <LL_ADC_REG_IsConversionOngoing>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 809b 	bne.w	8002916 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_ADC_Start_DMA+0x4e>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e096      	b.n	800291c <HAL_ADC_Start_DMA+0x17c>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a4d      	ldr	r2, [pc, #308]	; (8002930 <HAL_ADC_Start_DMA+0x190>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d008      	beq.n	8002812 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b05      	cmp	r3, #5
 800280a:	d002      	beq.n	8002812 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	2b09      	cmp	r3, #9
 8002810:	d17a      	bne.n	8002908 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 fcf6 	bl	8003204 <ADC_Enable>
 8002818:	4603      	mov	r3, r0
 800281a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d16d      	bne.n	80028fe <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a3a      	ldr	r2, [pc, #232]	; (8002924 <HAL_ADC_Start_DMA+0x184>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d009      	beq.n	8002854 <HAL_ADC_Start_DMA+0xb4>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a3b      	ldr	r2, [pc, #236]	; (8002934 <HAL_ADC_Start_DMA+0x194>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d002      	beq.n	8002850 <HAL_ADC_Start_DMA+0xb0>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	e003      	b.n	8002858 <HAL_ADC_Start_DMA+0xb8>
 8002850:	4b39      	ldr	r3, [pc, #228]	; (8002938 <HAL_ADC_Start_DMA+0x198>)
 8002852:	e001      	b.n	8002858 <HAL_ADC_Start_DMA+0xb8>
 8002854:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	4293      	cmp	r3, r2
 800285e:	d002      	beq.n	8002866 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d105      	bne.n	8002872 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d006      	beq.n	800288c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002882:	f023 0206 	bic.w	r2, r3, #6
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	661a      	str	r2, [r3, #96]	; 0x60
 800288a:	e002      	b.n	8002892 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002896:	4a29      	ldr	r2, [pc, #164]	; (800293c <HAL_ADC_Start_DMA+0x19c>)
 8002898:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	4a28      	ldr	r2, [pc, #160]	; (8002940 <HAL_ADC_Start_DMA+0x1a0>)
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	4a27      	ldr	r2, [pc, #156]	; (8002944 <HAL_ADC_Start_DMA+0x1a4>)
 80028a8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	221c      	movs	r2, #28
 80028b0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0210 	orr.w	r2, r2, #16
 80028c8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0201 	orr.w	r2, r2, #1
 80028d8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3340      	adds	r3, #64	; 0x40
 80028e4:	4619      	mov	r1, r3
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f001 f89b 	bl	8003a24 <HAL_DMA_Start_IT>
 80028ee:	4603      	mov	r3, r0
 80028f0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fd5b 	bl	80023b2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80028fc:	e00d      	b.n	800291a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002906:	e008      	b.n	800291a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002914:	e001      	b.n	800291a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002916:	2302      	movs	r3, #2
 8002918:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800291a:	7dfb      	ldrb	r3, [r7, #23]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	50000100 	.word	0x50000100
 8002928:	50000300 	.word	0x50000300
 800292c:	50000700 	.word	0x50000700
 8002930:	50000600 	.word	0x50000600
 8002934:	50000500 	.word	0x50000500
 8002938:	50000400 	.word	0x50000400
 800293c:	08003331 	.word	0x08003331
 8002940:	08003409 	.word	0x08003409
 8002944:	08003425 	.word	0x08003425

08002948 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b0b6      	sub	sp, #216	; 0xd8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d102      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x24>
 80029a2:	2302      	movs	r3, #2
 80029a4:	f000 bc13 	b.w	80031ce <HAL_ADC_ConfigChannel+0x84a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fd10 	bl	80023da <LL_ADC_REG_IsConversionOngoing>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f040 83f3 	bne.w	80031a8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6859      	ldr	r1, [r3, #4]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	f7ff fbf1 	bl	80021b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fcfe 	bl	80023da <LL_ADC_REG_IsConversionOngoing>
 80029de:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fd0a 	bl	8002400 <LL_ADC_INJ_IsConversionOngoing>
 80029ec:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f040 81d9 	bne.w	8002dac <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 81d4 	bne.w	8002dac <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a0c:	d10f      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2200      	movs	r2, #0
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f7ff fbf8 	bl	800220e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fb9f 	bl	800216a <LL_ADC_SetSamplingTimeCommonConfig>
 8002a2c:	e00e      	b.n	8002a4c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f7ff fbe7 	bl	800220e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fb8f 	bl	800216a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	08db      	lsrs	r3, r3, #3
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d022      	beq.n	8002ab4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6919      	ldr	r1, [r3, #16]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a7e:	f7ff fae9 	bl	8002054 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6919      	ldr	r1, [r3, #16]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f7ff fb35 	bl	80020fe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d102      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x126>
 8002aa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aa8:	e000      	b.n	8002aac <HAL_ADC_ConfigChannel+0x128>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	461a      	mov	r2, r3
 8002aae:	f7ff fb41 	bl	8002134 <LL_ADC_SetOffsetSaturation>
 8002ab2:	e17b      	b.n	8002dac <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff faee 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10a      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x15c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fae3 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	0e9b      	lsrs	r3, r3, #26
 8002ada:	f003 021f 	and.w	r2, r3, #31
 8002ade:	e01e      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x19a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fad8 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002afe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002b0e:	2320      	movs	r3, #32
 8002b10:	e004      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002b12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d105      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x1b2>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	0e9b      	lsrs	r3, r3, #26
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	e018      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x1e4>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	e004      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002b5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d106      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2200      	movs	r2, #0
 8002b72:	2100      	movs	r1, #0
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff faa7 	bl	80020c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fa8b 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10a      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x222>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2101      	movs	r1, #1
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fa80 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	0e9b      	lsrs	r3, r3, #26
 8002ba0:	f003 021f 	and.w	r2, r3, #31
 8002ba4:	e01e      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x260>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2101      	movs	r1, #1
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fa75 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002bc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002bcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	e004      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002bd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bdc:	fab3 f383 	clz	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d105      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x278>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0e9b      	lsrs	r3, r3, #26
 8002bf6:	f003 031f 	and.w	r3, r3, #31
 8002bfa:	e018      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x2aa>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002c20:	2320      	movs	r3, #32
 8002c22:	e004      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c28:	fab3 f383 	clz	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d106      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2200      	movs	r2, #0
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fa44 	bl	80020c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2102      	movs	r1, #2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fa28 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10a      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x2e8>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fa1d 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002c62:	4603      	mov	r3, r0
 8002c64:	0e9b      	lsrs	r3, r3, #26
 8002c66:	f003 021f 	and.w	r2, r3, #31
 8002c6a:	e01e      	b.n	8002caa <HAL_ADC_ConfigChannel+0x326>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2102      	movs	r1, #2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fa12 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002c8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002c92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	e004      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002c9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d105      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x33e>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	0e9b      	lsrs	r3, r3, #26
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	e016      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x36c>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002cd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002cda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	e004      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d106      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff f9e3 	bl	80020c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2103      	movs	r1, #3
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff f9c7 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x3aa>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2103      	movs	r1, #3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff f9bc 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002d24:	4603      	mov	r3, r0
 8002d26:	0e9b      	lsrs	r3, r3, #26
 8002d28:	f003 021f 	and.w	r2, r3, #31
 8002d2c:	e017      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x3da>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2103      	movs	r1, #3
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff f9b1 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d40:	fa93 f3a3 	rbit	r3, r3
 8002d44:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d48:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002d50:	2320      	movs	r3, #32
 8002d52:	e003      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x3f2>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	0e9b      	lsrs	r3, r3, #26
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	e011      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x416>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d86:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002d8e:	2320      	movs	r3, #32
 8002d90:	e003      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d106      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2200      	movs	r2, #0
 8002da4:	2103      	movs	r1, #3
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff f98e 	bl	80020c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff faeb 	bl	800238c <LL_ADC_IsEnabled>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 813d 	bne.w	8003038 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6819      	ldr	r1, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f7ff fa4a 	bl	8002264 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4aa2      	ldr	r2, [pc, #648]	; (8003060 <HAL_ADC_ConfigChannel+0x6dc>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	f040 812e 	bne.w	8003038 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x480>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	3301      	adds	r3, #1
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	2b09      	cmp	r3, #9
 8002dfa:	bf94      	ite	ls
 8002dfc:	2301      	movls	r3, #1
 8002dfe:	2300      	movhi	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	e019      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x4b4>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e14:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	e003      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002e20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	2b09      	cmp	r3, #9
 8002e30:	bf94      	ite	ls
 8002e32:	2301      	movls	r3, #1
 8002e34:	2300      	movhi	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d079      	beq.n	8002f30 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x4d4>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	0e9b      	lsrs	r3, r3, #26
 8002e4e:	3301      	adds	r3, #1
 8002e50:	069b      	lsls	r3, r3, #26
 8002e52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e56:	e015      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x500>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e68:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002e70:	2320      	movs	r3, #32
 8002e72:	e003      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	069b      	lsls	r3, r3, #26
 8002e80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x520>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	0e9b      	lsrs	r3, r3, #26
 8002e96:	3301      	adds	r3, #1
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	e017      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x550>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eb4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	e003      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	2101      	movs	r1, #1
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	ea42 0103 	orr.w	r1, r2, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x576>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	0e9b      	lsrs	r3, r3, #26
 8002eea:	3301      	adds	r3, #1
 8002eec:	f003 021f 	and.w	r2, r3, #31
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4413      	add	r3, r2
 8002ef6:	051b      	lsls	r3, r3, #20
 8002ef8:	e018      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x5a8>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002f12:	2320      	movs	r3, #32
 8002f14:	e003      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f18:	fab3 f383 	clz	r3, r3
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f003 021f 	and.w	r2, r3, #31
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	e07e      	b.n	800302e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d107      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x5c8>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	3301      	adds	r3, #1
 8002f44:	069b      	lsls	r3, r3, #26
 8002f46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f4a:	e015      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x5f4>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002f64:	2320      	movs	r3, #32
 8002f66:	e003      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	069b      	lsls	r3, r3, #26
 8002f74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d109      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x614>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	0e9b      	lsrs	r3, r3, #26
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f003 031f 	and.w	r3, r3, #31
 8002f90:	2101      	movs	r1, #1
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	e017      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x644>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	61fb      	str	r3, [r7, #28]
  return result;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002fb0:	2320      	movs	r3, #32
 8002fb2:	e003      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	ea42 0103 	orr.w	r1, r2, r3
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x670>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	0e9b      	lsrs	r3, r3, #26
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f003 021f 	and.w	r2, r3, #31
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	3b1e      	subs	r3, #30
 8002fec:	051b      	lsls	r3, r3, #20
 8002fee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	e01b      	b.n	800302c <HAL_ADC_ConfigChannel+0x6a8>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	613b      	str	r3, [r7, #16]
  return result;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800300c:	2320      	movs	r3, #32
 800300e:	e003      	b.n	8003018 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	3301      	adds	r3, #1
 800301a:	f003 021f 	and.w	r2, r3, #31
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	3b1e      	subs	r3, #30
 8003026:	051b      	lsls	r3, r3, #20
 8003028:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800302c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003032:	4619      	mov	r1, r3
 8003034:	f7ff f8eb 	bl	800220e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_ADC_ConfigChannel+0x6e0>)
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80be 	beq.w	80031c2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800304e:	d004      	beq.n	800305a <HAL_ADC_ConfigChannel+0x6d6>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <HAL_ADC_ConfigChannel+0x6e4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10a      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x6ec>
 800305a:	4b04      	ldr	r3, [pc, #16]	; (800306c <HAL_ADC_ConfigChannel+0x6e8>)
 800305c:	e009      	b.n	8003072 <HAL_ADC_ConfigChannel+0x6ee>
 800305e:	bf00      	nop
 8003060:	407f0000 	.word	0x407f0000
 8003064:	80080000 	.word	0x80080000
 8003068:	50000100 	.word	0x50000100
 800306c:	50000300 	.word	0x50000300
 8003070:	4b59      	ldr	r3, [pc, #356]	; (80031d8 <HAL_ADC_ConfigChannel+0x854>)
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe ffe0 	bl	8002038 <LL_ADC_GetCommonPathInternalCh>
 8003078:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a56      	ldr	r2, [pc, #344]	; (80031dc <HAL_ADC_ConfigChannel+0x858>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_ADC_ConfigChannel+0x70c>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a55      	ldr	r2, [pc, #340]	; (80031e0 <HAL_ADC_ConfigChannel+0x85c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d13a      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003090:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d134      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030a4:	d005      	beq.n	80030b2 <HAL_ADC_ConfigChannel+0x72e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a4e      	ldr	r2, [pc, #312]	; (80031e4 <HAL_ADC_ConfigChannel+0x860>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	f040 8085 	bne.w	80031bc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030ba:	d004      	beq.n	80030c6 <HAL_ADC_ConfigChannel+0x742>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a49      	ldr	r2, [pc, #292]	; (80031e8 <HAL_ADC_ConfigChannel+0x864>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x746>
 80030c6:	4a49      	ldr	r2, [pc, #292]	; (80031ec <HAL_ADC_ConfigChannel+0x868>)
 80030c8:	e000      	b.n	80030cc <HAL_ADC_ConfigChannel+0x748>
 80030ca:	4a43      	ldr	r2, [pc, #268]	; (80031d8 <HAL_ADC_ConfigChannel+0x854>)
 80030cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f7fe ff9b 	bl	8002012 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030dc:	4b44      	ldr	r3, [pc, #272]	; (80031f0 <HAL_ADC_ConfigChannel+0x86c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	4a44      	ldr	r2, [pc, #272]	; (80031f4 <HAL_ADC_ConfigChannel+0x870>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030f6:	e002      	b.n	80030fe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f9      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003104:	e05a      	b.n	80031bc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a3b      	ldr	r2, [pc, #236]	; (80031f8 <HAL_ADC_ConfigChannel+0x874>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d125      	bne.n	800315c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d11f      	bne.n	800315c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a31      	ldr	r2, [pc, #196]	; (80031e8 <HAL_ADC_ConfigChannel+0x864>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d104      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x7ac>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a34      	ldr	r2, [pc, #208]	; (80031fc <HAL_ADC_ConfigChannel+0x878>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d047      	beq.n	80031c0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003138:	d004      	beq.n	8003144 <HAL_ADC_ConfigChannel+0x7c0>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <HAL_ADC_ConfigChannel+0x864>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d101      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x7c4>
 8003144:	4a29      	ldr	r2, [pc, #164]	; (80031ec <HAL_ADC_ConfigChannel+0x868>)
 8003146:	e000      	b.n	800314a <HAL_ADC_ConfigChannel+0x7c6>
 8003148:	4a23      	ldr	r2, [pc, #140]	; (80031d8 <HAL_ADC_ConfigChannel+0x854>)
 800314a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800314e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003152:	4619      	mov	r1, r3
 8003154:	4610      	mov	r0, r2
 8003156:	f7fe ff5c 	bl	8002012 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800315a:	e031      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a27      	ldr	r2, [pc, #156]	; (8003200 <HAL_ADC_ConfigChannel+0x87c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d12d      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003166:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800316a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d127      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1c      	ldr	r2, [pc, #112]	; (80031e8 <HAL_ADC_ConfigChannel+0x864>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d022      	beq.n	80031c2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003184:	d004      	beq.n	8003190 <HAL_ADC_ConfigChannel+0x80c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <HAL_ADC_ConfigChannel+0x864>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d101      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x810>
 8003190:	4a16      	ldr	r2, [pc, #88]	; (80031ec <HAL_ADC_ConfigChannel+0x868>)
 8003192:	e000      	b.n	8003196 <HAL_ADC_ConfigChannel+0x812>
 8003194:	4a10      	ldr	r2, [pc, #64]	; (80031d8 <HAL_ADC_ConfigChannel+0x854>)
 8003196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800319a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800319e:	4619      	mov	r1, r3
 80031a0:	4610      	mov	r0, r2
 80031a2:	f7fe ff36 	bl	8002012 <LL_ADC_SetCommonPathInternalCh>
 80031a6:	e00c      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80031ba:	e002      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031bc:	bf00      	nop
 80031be:	e000      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80031ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	37d8      	adds	r7, #216	; 0xd8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	50000700 	.word	0x50000700
 80031dc:	c3210000 	.word	0xc3210000
 80031e0:	90c00010 	.word	0x90c00010
 80031e4:	50000600 	.word	0x50000600
 80031e8:	50000100 	.word	0x50000100
 80031ec:	50000300 	.word	0x50000300
 80031f0:	20000008 	.word	0x20000008
 80031f4:	053e2d63 	.word	0x053e2d63
 80031f8:	c7520000 	.word	0xc7520000
 80031fc:	50000500 	.word	0x50000500
 8003200:	cb840000 	.word	0xcb840000

08003204 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800320c:	2300      	movs	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff f8b9 	bl	800238c <LL_ADC_IsEnabled>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d176      	bne.n	800330e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	4b3c      	ldr	r3, [pc, #240]	; (8003318 <ADC_Enable+0x114>)
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00d      	beq.n	800324a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003232:	f043 0210 	orr.w	r2, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e062      	b.n	8003310 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff f888 	bl	8002364 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800325c:	d004      	beq.n	8003268 <ADC_Enable+0x64>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a2e      	ldr	r2, [pc, #184]	; (800331c <ADC_Enable+0x118>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d101      	bne.n	800326c <ADC_Enable+0x68>
 8003268:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <ADC_Enable+0x11c>)
 800326a:	e000      	b.n	800326e <ADC_Enable+0x6a>
 800326c:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <ADC_Enable+0x120>)
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe fee2 	bl	8002038 <LL_ADC_GetCommonPathInternalCh>
 8003274:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800327a:	2b00      	cmp	r3, #0
 800327c:	d013      	beq.n	80032a6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800327e:	4b2a      	ldr	r3, [pc, #168]	; (8003328 <ADC_Enable+0x124>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	099b      	lsrs	r3, r3, #6
 8003284:	4a29      	ldr	r2, [pc, #164]	; (800332c <ADC_Enable+0x128>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	099b      	lsrs	r3, r3, #6
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003298:	e002      	b.n	80032a0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	3b01      	subs	r3, #1
 800329e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f9      	bne.n	800329a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032a6:	f7fe fe95 	bl	8001fd4 <HAL_GetTick>
 80032aa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ac:	e028      	b.n	8003300 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff f86a 	bl	800238c <LL_ADC_IsEnabled>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d104      	bne.n	80032c8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff f84e 	bl	8002364 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032c8:	f7fe fe84 	bl	8001fd4 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d914      	bls.n	8003300 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d00d      	beq.n	8003300 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	f043 0210 	orr.w	r2, r3, #16
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f4:	f043 0201 	orr.w	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e007      	b.n	8003310 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b01      	cmp	r3, #1
 800330c:	d1cf      	bne.n	80032ae <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	8000003f 	.word	0x8000003f
 800331c:	50000100 	.word	0x50000100
 8003320:	50000300 	.word	0x50000300
 8003324:	50000700 	.word	0x50000700
 8003328:	20000008 	.word	0x20000008
 800332c:	053e2d63 	.word	0x053e2d63

08003330 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003342:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003346:	2b00      	cmp	r3, #0
 8003348:	d14b      	bne.n	80033e2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	d021      	beq.n	80033a8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7fe ff11 	bl	8002190 <LL_ADC_REG_IsTriggerSourceSWStart>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d032      	beq.n	80033da <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d12b      	bne.n	80033da <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d11f      	bne.n	80033da <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80033a6:	e018      	b.n	80033da <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d111      	bne.n	80033da <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d105      	bne.n	80033da <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	f043 0201 	orr.w	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f7ff fab4 	bl	8002948 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033e0:	e00e      	b.n	8003400 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f7ff fabe 	bl	8002970 <HAL_ADC_ErrorCallback>
}
 80033f4:	e004      	b.n	8003400 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4798      	blx	r3
}
 8003400:	bf00      	nop
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f7ff faa0 	bl	800295c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003436:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003442:	f043 0204 	orr.w	r2, r3, #4
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f7ff fa90 	bl	8002970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <LL_ADC_IsEnabled>:
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <LL_ADC_IsEnabled+0x18>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <LL_ADC_IsEnabled+0x1a>
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <LL_ADC_REG_IsConversionOngoing>:
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b04      	cmp	r3, #4
 8003490:	d101      	bne.n	8003496 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b0a1      	sub	sp, #132	; 0x84
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034be:	2302      	movs	r3, #2
 80034c0:	e0e7      	b.n	8003692 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80034ca:	2300      	movs	r3, #0
 80034cc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80034ce:	2300      	movs	r3, #0
 80034d0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034da:	d102      	bne.n	80034e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80034dc:	4b6f      	ldr	r3, [pc, #444]	; (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	e009      	b.n	80034f6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a6e      	ldr	r2, [pc, #440]	; (80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d102      	bne.n	80034f2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80034ec:	4b6d      	ldr	r3, [pc, #436]	; (80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	e001      	b.n	80034f6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10b      	bne.n	8003514 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	f043 0220 	orr.w	r2, r3, #32
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0be      	b.n	8003692 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff ffb1 	bl	800347e <LL_ADC_REG_IsConversionOngoing>
 800351c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ffab 	bl	800347e <LL_ADC_REG_IsConversionOngoing>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	f040 80a0 	bne.w	8003670 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 809c 	bne.w	8003670 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003540:	d004      	beq.n	800354c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a55      	ldr	r2, [pc, #340]	; (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d101      	bne.n	8003550 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800354c:	4b56      	ldr	r3, [pc, #344]	; (80036a8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800354e:	e000      	b.n	8003552 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003550:	4b56      	ldr	r3, [pc, #344]	; (80036ac <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003552:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d04b      	beq.n	80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800355c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800356e:	035b      	lsls	r3, r3, #13
 8003570:	430b      	orrs	r3, r1
 8003572:	431a      	orrs	r2, r3
 8003574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003576:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003580:	d004      	beq.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a45      	ldr	r2, [pc, #276]	; (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d10f      	bne.n	80035ac <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800358c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003590:	f7ff ff62 	bl	8003458 <LL_ADC_IsEnabled>
 8003594:	4604      	mov	r4, r0
 8003596:	4841      	ldr	r0, [pc, #260]	; (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003598:	f7ff ff5e 	bl	8003458 <LL_ADC_IsEnabled>
 800359c:	4603      	mov	r3, r0
 800359e:	4323      	orrs	r3, r4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	e012      	b.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80035ac:	483c      	ldr	r0, [pc, #240]	; (80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80035ae:	f7ff ff53 	bl	8003458 <LL_ADC_IsEnabled>
 80035b2:	4604      	mov	r4, r0
 80035b4:	483b      	ldr	r0, [pc, #236]	; (80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80035b6:	f7ff ff4f 	bl	8003458 <LL_ADC_IsEnabled>
 80035ba:	4603      	mov	r3, r0
 80035bc:	431c      	orrs	r4, r3
 80035be:	483c      	ldr	r0, [pc, #240]	; (80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80035c0:	f7ff ff4a 	bl	8003458 <LL_ADC_IsEnabled>
 80035c4:	4603      	mov	r3, r0
 80035c6:	4323      	orrs	r3, r4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d056      	beq.n	8003684 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80035d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035de:	f023 030f 	bic.w	r3, r3, #15
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	6811      	ldr	r1, [r2, #0]
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	6892      	ldr	r2, [r2, #8]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	431a      	orrs	r2, r3
 80035ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035f0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035f2:	e047      	b.n	8003684 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035fe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003608:	d004      	beq.n	8003614 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a23      	ldr	r2, [pc, #140]	; (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d10f      	bne.n	8003634 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003614:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003618:	f7ff ff1e 	bl	8003458 <LL_ADC_IsEnabled>
 800361c:	4604      	mov	r4, r0
 800361e:	481f      	ldr	r0, [pc, #124]	; (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003620:	f7ff ff1a 	bl	8003458 <LL_ADC_IsEnabled>
 8003624:	4603      	mov	r3, r0
 8003626:	4323      	orrs	r3, r4
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf0c      	ite	eq
 800362c:	2301      	moveq	r3, #1
 800362e:	2300      	movne	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	e012      	b.n	800365a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003634:	481a      	ldr	r0, [pc, #104]	; (80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003636:	f7ff ff0f 	bl	8003458 <LL_ADC_IsEnabled>
 800363a:	4604      	mov	r4, r0
 800363c:	4819      	ldr	r0, [pc, #100]	; (80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800363e:	f7ff ff0b 	bl	8003458 <LL_ADC_IsEnabled>
 8003642:	4603      	mov	r3, r0
 8003644:	431c      	orrs	r4, r3
 8003646:	481a      	ldr	r0, [pc, #104]	; (80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003648:	f7ff ff06 	bl	8003458 <LL_ADC_IsEnabled>
 800364c:	4603      	mov	r3, r0
 800364e:	4323      	orrs	r3, r4
 8003650:	2b00      	cmp	r3, #0
 8003652:	bf0c      	ite	eq
 8003654:	2301      	moveq	r3, #1
 8003656:	2300      	movne	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d012      	beq.n	8003684 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800365e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003666:	f023 030f 	bic.w	r3, r3, #15
 800366a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800366c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800366e:	e009      	b.n	8003684 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003682:	e000      	b.n	8003686 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003684:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800368e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003692:	4618      	mov	r0, r3
 8003694:	3784      	adds	r7, #132	; 0x84
 8003696:	46bd      	mov	sp, r7
 8003698:	bd90      	pop	{r4, r7, pc}
 800369a:	bf00      	nop
 800369c:	50000100 	.word	0x50000100
 80036a0:	50000400 	.word	0x50000400
 80036a4:	50000500 	.word	0x50000500
 80036a8:	50000300 	.word	0x50000300
 80036ac:	50000700 	.word	0x50000700
 80036b0:	50000600 	.word	0x50000600

080036b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <__NVIC_SetPriorityGrouping+0x44>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036d0:	4013      	ands	r3, r2
 80036d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036e6:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <__NVIC_SetPriorityGrouping+0x44>)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	60d3      	str	r3, [r2, #12]
}
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	e000ed00 	.word	0xe000ed00

080036fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <__NVIC_GetPriorityGrouping+0x18>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	f003 0307 	and.w	r3, r3, #7
}
 800370a:	4618      	mov	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000ed00 	.word	0xe000ed00

08003718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	2b00      	cmp	r3, #0
 8003728:	db0b      	blt.n	8003742 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	f003 021f 	and.w	r2, r3, #31
 8003730:	4907      	ldr	r1, [pc, #28]	; (8003750 <__NVIC_EnableIRQ+0x38>)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	2001      	movs	r0, #1
 800373a:	fa00 f202 	lsl.w	r2, r0, r2
 800373e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	e000e100 	.word	0xe000e100

08003754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	6039      	str	r1, [r7, #0]
 800375e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003764:	2b00      	cmp	r3, #0
 8003766:	db0a      	blt.n	800377e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	b2da      	uxtb	r2, r3
 800376c:	490c      	ldr	r1, [pc, #48]	; (80037a0 <__NVIC_SetPriority+0x4c>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	0112      	lsls	r2, r2, #4
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	440b      	add	r3, r1
 8003778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800377c:	e00a      	b.n	8003794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	4908      	ldr	r1, [pc, #32]	; (80037a4 <__NVIC_SetPriority+0x50>)
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	3b04      	subs	r3, #4
 800378c:	0112      	lsls	r2, r2, #4
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	440b      	add	r3, r1
 8003792:	761a      	strb	r2, [r3, #24]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000e100 	.word	0xe000e100
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b089      	sub	sp, #36	; 0x24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f1c3 0307 	rsb	r3, r3, #7
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	bf28      	it	cs
 80037c6:	2304      	movcs	r3, #4
 80037c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d902      	bls.n	80037d8 <NVIC_EncodePriority+0x30>
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3b03      	subs	r3, #3
 80037d6:	e000      	b.n	80037da <NVIC_EncodePriority+0x32>
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037dc:	f04f 32ff 	mov.w	r2, #4294967295
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43da      	mvns	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	401a      	ands	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f0:	f04f 31ff 	mov.w	r1, #4294967295
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	43d9      	mvns	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003800:	4313      	orrs	r3, r2
         );
}
 8003802:	4618      	mov	r0, r3
 8003804:	3724      	adds	r7, #36	; 0x24
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3b01      	subs	r3, #1
 800381c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003820:	d301      	bcc.n	8003826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003822:	2301      	movs	r3, #1
 8003824:	e00f      	b.n	8003846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003826:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <SysTick_Config+0x40>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3b01      	subs	r3, #1
 800382c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800382e:	210f      	movs	r1, #15
 8003830:	f04f 30ff 	mov.w	r0, #4294967295
 8003834:	f7ff ff8e 	bl	8003754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <SysTick_Config+0x40>)
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800383e:	4b04      	ldr	r3, [pc, #16]	; (8003850 <SysTick_Config+0x40>)
 8003840:	2207      	movs	r2, #7
 8003842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	e000e010 	.word	0xe000e010

08003854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff ff29 	bl	80036b4 <__NVIC_SetPriorityGrouping>
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af00      	add	r7, sp, #0
 8003870:	4603      	mov	r3, r0
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003878:	f7ff ff40 	bl	80036fc <__NVIC_GetPriorityGrouping>
 800387c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	6978      	ldr	r0, [r7, #20]
 8003884:	f7ff ff90 	bl	80037a8 <NVIC_EncodePriority>
 8003888:	4602      	mov	r2, r0
 800388a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff5f 	bl	8003754 <__NVIC_SetPriority>
}
 8003896:	bf00      	nop
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff ff33 	bl	8003718 <__NVIC_EnableIRQ>
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ffa4 	bl	8003810 <SysTick_Config>
 80038c8:	4603      	mov	r3, r0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e08d      	b.n	8003a02 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	4b47      	ldr	r3, [pc, #284]	; (8003a0c <HAL_DMA_Init+0x138>)
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d80f      	bhi.n	8003912 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	4b45      	ldr	r3, [pc, #276]	; (8003a10 <HAL_DMA_Init+0x13c>)
 80038fa:	4413      	add	r3, r2
 80038fc:	4a45      	ldr	r2, [pc, #276]	; (8003a14 <HAL_DMA_Init+0x140>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	009a      	lsls	r2, r3, #2
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a42      	ldr	r2, [pc, #264]	; (8003a18 <HAL_DMA_Init+0x144>)
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
 8003910:	e00e      	b.n	8003930 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	4b40      	ldr	r3, [pc, #256]	; (8003a1c <HAL_DMA_Init+0x148>)
 800391a:	4413      	add	r3, r2
 800391c:	4a3d      	ldr	r2, [pc, #244]	; (8003a14 <HAL_DMA_Init+0x140>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	091b      	lsrs	r3, r3, #4
 8003924:	009a      	lsls	r2, r3, #2
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a3c      	ldr	r2, [pc, #240]	; (8003a20 <HAL_DMA_Init+0x14c>)
 800392e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003954:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003960:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800396c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fa76 	bl	8003e74 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003990:	d102      	bne.n	8003998 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039ac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d010      	beq.n	80039d8 <HAL_DMA_Init+0x104>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d80c      	bhi.n	80039d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fa96 	bl	8003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	e008      	b.n	80039ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40020407 	.word	0x40020407
 8003a10:	bffdfff8 	.word	0xbffdfff8
 8003a14:	cccccccd 	.word	0xcccccccd
 8003a18:	40020000 	.word	0x40020000
 8003a1c:	bffdfbf8 	.word	0xbffdfbf8
 8003a20:	40020400 	.word	0x40020400

08003a24 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_DMA_Start_IT+0x20>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e066      	b.n	8003b12 <HAL_DMA_Start_IT+0xee>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d155      	bne.n	8003b04 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0201 	bic.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f9bb 	bl	8003df8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 020e 	orr.w	r2, r2, #14
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	e00f      	b.n	8003abc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0204 	bic.w	r2, r2, #4
 8003aaa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 020a 	orr.w	r2, r2, #10
 8003aba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ad8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d007      	beq.n	8003af2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0201 	orr.w	r2, r2, #1
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	e005      	b.n	8003b10 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d005      	beq.n	8003b3e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2204      	movs	r2, #4
 8003b36:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
 8003b3c:	e037      	b.n	8003bae <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 020e 	bic.w	r2, r2, #14
 8003b4c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b5c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	f003 021f 	and.w	r2, r3, #31
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b80:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b8a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00c      	beq.n	8003bae <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ba2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bac:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d00d      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2204      	movs	r2, #4
 8003be8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	73fb      	strb	r3, [r7, #15]
 8003bfe:	e047      	b.n	8003c90 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 020e 	bic.w	r2, r2, #14
 8003c0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c42:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c4c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00c      	beq.n	8003c70 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c6e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	4798      	blx	r3
    }
  }
  return status;
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2204      	movs	r2, #4
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d026      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x7a>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d021      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d107      	bne.n	8003cee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0204 	bic.w	r2, r2, #4
 8003cec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	f003 021f 	and.w	r2, r3, #31
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	2104      	movs	r1, #4
 8003cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003d00:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d071      	beq.n	8003dee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d12:	e06c      	b.n	8003dee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d02e      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d029      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10b      	bne.n	8003d58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 020a 	bic.w	r2, r2, #10
 8003d4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5c:	f003 021f 	and.w	r2, r3, #31
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	2102      	movs	r1, #2
 8003d66:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d038      	beq.n	8003dee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d84:	e033      	b.n	8003dee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	2208      	movs	r2, #8
 8003d90:	409a      	lsls	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d02a      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d025      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 020e 	bic.w	r2, r2, #14
 8003db2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db8:	f003 021f 	and.w	r2, r3, #31
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003dee:	bf00      	nop
 8003df0:	bf00      	nop
}
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e0e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d004      	beq.n	8003e22 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e20:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	f003 021f 	and.w	r2, r3, #31
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	2101      	movs	r1, #1
 8003e30:	fa01 f202 	lsl.w	r2, r1, r2
 8003e34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b10      	cmp	r3, #16
 8003e44:	d108      	bne.n	8003e58 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e56:	e007      	b.n	8003e68 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	60da      	str	r2, [r3, #12]
}
 8003e68:	bf00      	nop
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	4b16      	ldr	r3, [pc, #88]	; (8003edc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d802      	bhi.n	8003e8e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003e88:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	e001      	b.n	8003e92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003e8e:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e90:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	3b08      	subs	r3, #8
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eac:	089b      	lsrs	r3, r3, #2
 8003eae:	009a      	lsls	r2, r3, #2
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a0b      	ldr	r2, [pc, #44]	; (8003eec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ebe:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 031f 	and.w	r3, r3, #31
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	409a      	lsls	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40020407 	.word	0x40020407
 8003ee0:	40020800 	.word	0x40020800
 8003ee4:	40020820 	.word	0x40020820
 8003ee8:	cccccccd 	.word	0xcccccccd
 8003eec:	40020880 	.word	0x40020880

08003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	461a      	mov	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a08      	ldr	r2, [pc, #32]	; (8003f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f12:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	1000823f 	.word	0x1000823f
 8003f34:	40020940 	.word	0x40020940

08003f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f46:	e15a      	b.n	80041fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	fa01 f303 	lsl.w	r3, r1, r3
 8003f54:	4013      	ands	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 814c 	beq.w	80041f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d005      	beq.n	8003f78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d130      	bne.n	8003fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	2203      	movs	r2, #3
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fae:	2201      	movs	r2, #1
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	091b      	lsrs	r3, r3, #4
 8003fc4:	f003 0201 	and.w	r2, r3, #1
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d017      	beq.n	8004016 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d123      	bne.n	800406a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	08da      	lsrs	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3208      	adds	r2, #8
 800402a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800402e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	220f      	movs	r2, #15
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	08da      	lsrs	r2, r3, #3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3208      	adds	r2, #8
 8004064:	6939      	ldr	r1, [r7, #16]
 8004066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	2203      	movs	r2, #3
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f003 0203 	and.w	r2, r3, #3
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80a6 	beq.w	80041f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ac:	4b5b      	ldr	r3, [pc, #364]	; (800421c <HAL_GPIO_Init+0x2e4>)
 80040ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b0:	4a5a      	ldr	r2, [pc, #360]	; (800421c <HAL_GPIO_Init+0x2e4>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	6613      	str	r3, [r2, #96]	; 0x60
 80040b8:	4b58      	ldr	r3, [pc, #352]	; (800421c <HAL_GPIO_Init+0x2e4>)
 80040ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040c4:	4a56      	ldr	r2, [pc, #344]	; (8004220 <HAL_GPIO_Init+0x2e8>)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	089b      	lsrs	r3, r3, #2
 80040ca:	3302      	adds	r3, #2
 80040cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	220f      	movs	r2, #15
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4013      	ands	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040ee:	d01f      	beq.n	8004130 <HAL_GPIO_Init+0x1f8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a4c      	ldr	r2, [pc, #304]	; (8004224 <HAL_GPIO_Init+0x2ec>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d019      	beq.n	800412c <HAL_GPIO_Init+0x1f4>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a4b      	ldr	r2, [pc, #300]	; (8004228 <HAL_GPIO_Init+0x2f0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d013      	beq.n	8004128 <HAL_GPIO_Init+0x1f0>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a4a      	ldr	r2, [pc, #296]	; (800422c <HAL_GPIO_Init+0x2f4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00d      	beq.n	8004124 <HAL_GPIO_Init+0x1ec>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a49      	ldr	r2, [pc, #292]	; (8004230 <HAL_GPIO_Init+0x2f8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d007      	beq.n	8004120 <HAL_GPIO_Init+0x1e8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a48      	ldr	r2, [pc, #288]	; (8004234 <HAL_GPIO_Init+0x2fc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d101      	bne.n	800411c <HAL_GPIO_Init+0x1e4>
 8004118:	2305      	movs	r3, #5
 800411a:	e00a      	b.n	8004132 <HAL_GPIO_Init+0x1fa>
 800411c:	2306      	movs	r3, #6
 800411e:	e008      	b.n	8004132 <HAL_GPIO_Init+0x1fa>
 8004120:	2304      	movs	r3, #4
 8004122:	e006      	b.n	8004132 <HAL_GPIO_Init+0x1fa>
 8004124:	2303      	movs	r3, #3
 8004126:	e004      	b.n	8004132 <HAL_GPIO_Init+0x1fa>
 8004128:	2302      	movs	r3, #2
 800412a:	e002      	b.n	8004132 <HAL_GPIO_Init+0x1fa>
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <HAL_GPIO_Init+0x1fa>
 8004130:	2300      	movs	r3, #0
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	f002 0203 	and.w	r2, r2, #3
 8004138:	0092      	lsls	r2, r2, #2
 800413a:	4093      	lsls	r3, r2
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004142:	4937      	ldr	r1, [pc, #220]	; (8004220 <HAL_GPIO_Init+0x2e8>)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	089b      	lsrs	r3, r3, #2
 8004148:	3302      	adds	r3, #2
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004150:	4b39      	ldr	r3, [pc, #228]	; (8004238 <HAL_GPIO_Init+0x300>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	43db      	mvns	r3, r3
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4013      	ands	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004174:	4a30      	ldr	r2, [pc, #192]	; (8004238 <HAL_GPIO_Init+0x300>)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800417a:	4b2f      	ldr	r3, [pc, #188]	; (8004238 <HAL_GPIO_Init+0x300>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	43db      	mvns	r3, r3
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4013      	ands	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800419e:	4a26      	ldr	r2, [pc, #152]	; (8004238 <HAL_GPIO_Init+0x300>)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80041a4:	4b24      	ldr	r3, [pc, #144]	; (8004238 <HAL_GPIO_Init+0x300>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4013      	ands	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041c8:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <HAL_GPIO_Init+0x300>)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041ce:	4b1a      	ldr	r3, [pc, #104]	; (8004238 <HAL_GPIO_Init+0x300>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	43db      	mvns	r3, r3
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4013      	ands	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041f2:	4a11      	ldr	r2, [pc, #68]	; (8004238 <HAL_GPIO_Init+0x300>)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	3301      	adds	r3, #1
 80041fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	f47f ae9d 	bne.w	8003f48 <HAL_GPIO_Init+0x10>
  }
}
 800420e:	bf00      	nop
 8004210:	bf00      	nop
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	40021000 	.word	0x40021000
 8004220:	40010000 	.word	0x40010000
 8004224:	48000400 	.word	0x48000400
 8004228:	48000800 	.word	0x48000800
 800422c:	48000c00 	.word	0x48000c00
 8004230:	48001000 	.word	0x48001000
 8004234:	48001400 	.word	0x48001400
 8004238:	40010400 	.word	0x40010400

0800423c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	807b      	strh	r3, [r7, #2]
 8004248:	4613      	mov	r3, r2
 800424a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800424c:	787b      	ldrb	r3, [r7, #1]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004252:	887a      	ldrh	r2, [r7, #2]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004258:	e002      	b.n	8004260 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800425a:	887a      	ldrh	r2, [r7, #2]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004276:	4b08      	ldr	r3, [pc, #32]	; (8004298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004278:	695a      	ldr	r2, [r3, #20]
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	4013      	ands	r3, r2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d006      	beq.n	8004290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004282:	4a05      	ldr	r2, [pc, #20]	; (8004298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f806 	bl	800429c <HAL_GPIO_EXTI_Callback>
  }
}
 8004290:	bf00      	nop
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40010400 	.word	0x40010400

0800429c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d141      	bne.n	8004346 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042c2:	4b4b      	ldr	r3, [pc, #300]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ce:	d131      	bne.n	8004334 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042d0:	4b47      	ldr	r3, [pc, #284]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042d6:	4a46      	ldr	r2, [pc, #280]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042e0:	4b43      	ldr	r3, [pc, #268]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042e8:	4a41      	ldr	r2, [pc, #260]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042f0:	4b40      	ldr	r3, [pc, #256]	; (80043f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2232      	movs	r2, #50	; 0x32
 80042f6:	fb02 f303 	mul.w	r3, r2, r3
 80042fa:	4a3f      	ldr	r2, [pc, #252]	; (80043f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	0c9b      	lsrs	r3, r3, #18
 8004302:	3301      	adds	r3, #1
 8004304:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004306:	e002      	b.n	800430e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3b01      	subs	r3, #1
 800430c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800430e:	4b38      	ldr	r3, [pc, #224]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431a:	d102      	bne.n	8004322 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f2      	bne.n	8004308 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004322:	4b33      	ldr	r3, [pc, #204]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432e:	d158      	bne.n	80043e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e057      	b.n	80043e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004334:	4b2e      	ldr	r3, [pc, #184]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800433a:	4a2d      	ldr	r2, [pc, #180]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004340:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004344:	e04d      	b.n	80043e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800434c:	d141      	bne.n	80043d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800434e:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435a:	d131      	bne.n	80043c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800435c:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800435e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004362:	4a23      	ldr	r2, [pc, #140]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004368:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800436c:	4b20      	ldr	r3, [pc, #128]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004374:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800437a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800437c:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2232      	movs	r2, #50	; 0x32
 8004382:	fb02 f303 	mul.w	r3, r2, r3
 8004386:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004388:	fba2 2303 	umull	r2, r3, r2, r3
 800438c:	0c9b      	lsrs	r3, r3, #18
 800438e:	3301      	adds	r3, #1
 8004390:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004392:	e002      	b.n	800439a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3b01      	subs	r3, #1
 8004398:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800439a:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a6:	d102      	bne.n	80043ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f2      	bne.n	8004394 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043ae:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ba:	d112      	bne.n	80043e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e011      	b.n	80043e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c6:	4a0a      	ldr	r2, [pc, #40]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043d0:	e007      	b.n	80043e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043d2:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043da:	4a05      	ldr	r2, [pc, #20]	; (80043f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	40007000 	.word	0x40007000
 80043f4:	20000008 	.word	0x20000008
 80043f8:	431bde83 	.word	0x431bde83

080043fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4a04      	ldr	r2, [pc, #16]	; (8004418 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800440a:	6093      	str	r3, [r2, #8]
}
 800440c:	bf00      	nop
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40007000 	.word	0x40007000

0800441c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e2fe      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d075      	beq.n	8004526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800443a:	4b97      	ldr	r3, [pc, #604]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004444:	4b94      	ldr	r3, [pc, #592]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	2b0c      	cmp	r3, #12
 8004452:	d102      	bne.n	800445a <HAL_RCC_OscConfig+0x3e>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b03      	cmp	r3, #3
 8004458:	d002      	beq.n	8004460 <HAL_RCC_OscConfig+0x44>
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d10b      	bne.n	8004478 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	4b8d      	ldr	r3, [pc, #564]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d05b      	beq.n	8004524 <HAL_RCC_OscConfig+0x108>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d157      	bne.n	8004524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e2d9      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004480:	d106      	bne.n	8004490 <HAL_RCC_OscConfig+0x74>
 8004482:	4b85      	ldr	r3, [pc, #532]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a84      	ldr	r2, [pc, #528]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 8004488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	e01d      	b.n	80044cc <HAL_RCC_OscConfig+0xb0>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004498:	d10c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x98>
 800449a:	4b7f      	ldr	r3, [pc, #508]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a7e      	ldr	r2, [pc, #504]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 80044a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b7c      	ldr	r3, [pc, #496]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a7b      	ldr	r2, [pc, #492]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 80044ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e00b      	b.n	80044cc <HAL_RCC_OscConfig+0xb0>
 80044b4:	4b78      	ldr	r3, [pc, #480]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a77      	ldr	r2, [pc, #476]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 80044ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	4b75      	ldr	r3, [pc, #468]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a74      	ldr	r2, [pc, #464]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 80044c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d013      	beq.n	80044fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7fd fd7e 	bl	8001fd4 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044dc:	f7fd fd7a 	bl	8001fd4 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b64      	cmp	r3, #100	; 0x64
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e29e      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ee:	4b6a      	ldr	r3, [pc, #424]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0xc0>
 80044fa:	e014      	b.n	8004526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fd fd6a 	bl	8001fd4 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004504:	f7fd fd66 	bl	8001fd4 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	; 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e28a      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004516:	4b60      	ldr	r3, [pc, #384]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0xe8>
 8004522:	e000      	b.n	8004526 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d075      	beq.n	800461e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004532:	4b59      	ldr	r3, [pc, #356]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800453c:	4b56      	ldr	r3, [pc, #344]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b0c      	cmp	r3, #12
 800454a:	d102      	bne.n	8004552 <HAL_RCC_OscConfig+0x136>
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d002      	beq.n	8004558 <HAL_RCC_OscConfig+0x13c>
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b04      	cmp	r3, #4
 8004556:	d11f      	bne.n	8004598 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004558:	4b4f      	ldr	r3, [pc, #316]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_RCC_OscConfig+0x154>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e25d      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004570:	4b49      	ldr	r3, [pc, #292]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	061b      	lsls	r3, r3, #24
 800457e:	4946      	ldr	r1, [pc, #280]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 8004580:	4313      	orrs	r3, r2
 8004582:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004584:	4b45      	ldr	r3, [pc, #276]	; (800469c <HAL_RCC_OscConfig+0x280>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f7fd fcd7 	bl	8001f3c <HAL_InitTick>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d043      	beq.n	800461c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e249      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d023      	beq.n	80045e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a0:	4b3d      	ldr	r3, [pc, #244]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a3c      	ldr	r2, [pc, #240]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 80045a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fd fd12 	bl	8001fd4 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b4:	f7fd fd0e 	bl	8001fd4 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e232      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c6:	4b34      	ldr	r3, [pc, #208]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d2:	4b31      	ldr	r3, [pc, #196]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	061b      	lsls	r3, r3, #24
 80045e0:	492d      	ldr	r1, [pc, #180]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	604b      	str	r3, [r1, #4]
 80045e6:	e01a      	b.n	800461e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e8:	4b2b      	ldr	r3, [pc, #172]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a2a      	ldr	r2, [pc, #168]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 80045ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fd fcee 	bl	8001fd4 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fc:	f7fd fcea 	bl	8001fd4 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e20e      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800460e:	4b22      	ldr	r3, [pc, #136]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x1e0>
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800461c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d041      	beq.n	80046ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01c      	beq.n	800466c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004632:	4b19      	ldr	r3, [pc, #100]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 8004634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004638:	4a17      	ldr	r2, [pc, #92]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004642:	f7fd fcc7 	bl	8001fd4 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800464a:	f7fd fcc3 	bl	8001fd4 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e1e7      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800465c:	4b0e      	ldr	r3, [pc, #56]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 800465e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0ef      	beq.n	800464a <HAL_RCC_OscConfig+0x22e>
 800466a:	e020      	b.n	80046ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 800466e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004672:	4a09      	ldr	r2, [pc, #36]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 8004674:	f023 0301 	bic.w	r3, r3, #1
 8004678:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467c:	f7fd fcaa 	bl	8001fd4 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004682:	e00d      	b.n	80046a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004684:	f7fd fca6 	bl	8001fd4 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d906      	bls.n	80046a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e1ca      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
 8004696:	bf00      	nop
 8004698:	40021000 	.word	0x40021000
 800469c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046a0:	4b8c      	ldr	r3, [pc, #560]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 80046a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1ea      	bne.n	8004684 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 80a6 	beq.w	8004808 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046bc:	2300      	movs	r3, #0
 80046be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046c0:	4b84      	ldr	r3, [pc, #528]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 80046c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_OscConfig+0x2b4>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <HAL_RCC_OscConfig+0x2b6>
 80046d0:	2300      	movs	r3, #0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00d      	beq.n	80046f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d6:	4b7f      	ldr	r3, [pc, #508]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	4a7e      	ldr	r2, [pc, #504]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 80046dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e0:	6593      	str	r3, [r2, #88]	; 0x58
 80046e2:	4b7c      	ldr	r3, [pc, #496]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 80046e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046ee:	2301      	movs	r3, #1
 80046f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f2:	4b79      	ldr	r3, [pc, #484]	; (80048d8 <HAL_RCC_OscConfig+0x4bc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d118      	bne.n	8004730 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046fe:	4b76      	ldr	r3, [pc, #472]	; (80048d8 <HAL_RCC_OscConfig+0x4bc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a75      	ldr	r2, [pc, #468]	; (80048d8 <HAL_RCC_OscConfig+0x4bc>)
 8004704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800470a:	f7fd fc63 	bl	8001fd4 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004712:	f7fd fc5f 	bl	8001fd4 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e183      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004724:	4b6c      	ldr	r3, [pc, #432]	; (80048d8 <HAL_RCC_OscConfig+0x4bc>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0f0      	beq.n	8004712 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d108      	bne.n	800474a <HAL_RCC_OscConfig+0x32e>
 8004738:	4b66      	ldr	r3, [pc, #408]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473e:	4a65      	ldr	r2, [pc, #404]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004748:	e024      	b.n	8004794 <HAL_RCC_OscConfig+0x378>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	2b05      	cmp	r3, #5
 8004750:	d110      	bne.n	8004774 <HAL_RCC_OscConfig+0x358>
 8004752:	4b60      	ldr	r3, [pc, #384]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	4a5e      	ldr	r2, [pc, #376]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 800475a:	f043 0304 	orr.w	r3, r3, #4
 800475e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004762:	4b5c      	ldr	r3, [pc, #368]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004768:	4a5a      	ldr	r2, [pc, #360]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004772:	e00f      	b.n	8004794 <HAL_RCC_OscConfig+0x378>
 8004774:	4b57      	ldr	r3, [pc, #348]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	4a56      	ldr	r2, [pc, #344]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 800477c:	f023 0301 	bic.w	r3, r3, #1
 8004780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004784:	4b53      	ldr	r3, [pc, #332]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	4a52      	ldr	r2, [pc, #328]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 800478c:	f023 0304 	bic.w	r3, r3, #4
 8004790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d016      	beq.n	80047ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479c:	f7fd fc1a 	bl	8001fd4 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a2:	e00a      	b.n	80047ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a4:	f7fd fc16 	bl	8001fd4 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e138      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ba:	4b46      	ldr	r3, [pc, #280]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 80047bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0ed      	beq.n	80047a4 <HAL_RCC_OscConfig+0x388>
 80047c8:	e015      	b.n	80047f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ca:	f7fd fc03 	bl	8001fd4 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d0:	e00a      	b.n	80047e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fd fbff 	bl	8001fd4 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e121      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047e8:	4b3a      	ldr	r3, [pc, #232]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ed      	bne.n	80047d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047f6:	7ffb      	ldrb	r3, [r7, #31]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d105      	bne.n	8004808 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fc:	4b35      	ldr	r3, [pc, #212]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 80047fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004800:	4a34      	ldr	r2, [pc, #208]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 8004802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004806:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d03c      	beq.n	800488e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01c      	beq.n	8004856 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800481c:	4b2d      	ldr	r3, [pc, #180]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 800481e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004822:	4a2c      	ldr	r2, [pc, #176]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482c:	f7fd fbd2 	bl	8001fd4 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004834:	f7fd fbce 	bl	8001fd4 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e0f2      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004846:	4b23      	ldr	r3, [pc, #140]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 8004848:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0ef      	beq.n	8004834 <HAL_RCC_OscConfig+0x418>
 8004854:	e01b      	b.n	800488e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004856:	4b1f      	ldr	r3, [pc, #124]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 8004858:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800485c:	4a1d      	ldr	r2, [pc, #116]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004866:	f7fd fbb5 	bl	8001fd4 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800486e:	f7fd fbb1 	bl	8001fd4 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e0d5      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004880:	4b14      	ldr	r3, [pc, #80]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 8004882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1ef      	bne.n	800486e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 80c9 	beq.w	8004a2a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004898:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b0c      	cmp	r3, #12
 80048a2:	f000 8083 	beq.w	80049ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d15e      	bne.n	800496c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ae:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <HAL_RCC_OscConfig+0x4b8>)
 80048b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ba:	f7fd fb8b 	bl	8001fd4 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c0:	e00c      	b.n	80048dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c2:	f7fd fb87 	bl	8001fd4 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d905      	bls.n	80048dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e0ab      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
 80048d4:	40021000 	.word	0x40021000
 80048d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048dc:	4b55      	ldr	r3, [pc, #340]	; (8004a34 <HAL_RCC_OscConfig+0x618>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1ec      	bne.n	80048c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048e8:	4b52      	ldr	r3, [pc, #328]	; (8004a34 <HAL_RCC_OscConfig+0x618>)
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	4b52      	ldr	r3, [pc, #328]	; (8004a38 <HAL_RCC_OscConfig+0x61c>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6a11      	ldr	r1, [r2, #32]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048f8:	3a01      	subs	r2, #1
 80048fa:	0112      	lsls	r2, r2, #4
 80048fc:	4311      	orrs	r1, r2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004902:	0212      	lsls	r2, r2, #8
 8004904:	4311      	orrs	r1, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800490a:	0852      	lsrs	r2, r2, #1
 800490c:	3a01      	subs	r2, #1
 800490e:	0552      	lsls	r2, r2, #21
 8004910:	4311      	orrs	r1, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004916:	0852      	lsrs	r2, r2, #1
 8004918:	3a01      	subs	r2, #1
 800491a:	0652      	lsls	r2, r2, #25
 800491c:	4311      	orrs	r1, r2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004922:	06d2      	lsls	r2, r2, #27
 8004924:	430a      	orrs	r2, r1
 8004926:	4943      	ldr	r1, [pc, #268]	; (8004a34 <HAL_RCC_OscConfig+0x618>)
 8004928:	4313      	orrs	r3, r2
 800492a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800492c:	4b41      	ldr	r3, [pc, #260]	; (8004a34 <HAL_RCC_OscConfig+0x618>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a40      	ldr	r2, [pc, #256]	; (8004a34 <HAL_RCC_OscConfig+0x618>)
 8004932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004936:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004938:	4b3e      	ldr	r3, [pc, #248]	; (8004a34 <HAL_RCC_OscConfig+0x618>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	4a3d      	ldr	r2, [pc, #244]	; (8004a34 <HAL_RCC_OscConfig+0x618>)
 800493e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004942:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004944:	f7fd fb46 	bl	8001fd4 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800494c:	f7fd fb42 	bl	8001fd4 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e066      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800495e:	4b35      	ldr	r3, [pc, #212]	; (8004a34 <HAL_RCC_OscConfig+0x618>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0x530>
 800496a:	e05e      	b.n	8004a2a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800496c:	4b31      	ldr	r3, [pc, #196]	; (8004a34 <HAL_RCC_OscConfig+0x618>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a30      	ldr	r2, [pc, #192]	; (8004a34 <HAL_RCC_OscConfig+0x618>)
 8004972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004978:	f7fd fb2c 	bl	8001fd4 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004980:	f7fd fb28 	bl	8001fd4 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e04c      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004992:	4b28      	ldr	r3, [pc, #160]	; (8004a34 <HAL_RCC_OscConfig+0x618>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800499e:	4b25      	ldr	r3, [pc, #148]	; (8004a34 <HAL_RCC_OscConfig+0x618>)
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	4924      	ldr	r1, [pc, #144]	; (8004a34 <HAL_RCC_OscConfig+0x618>)
 80049a4:	4b25      	ldr	r3, [pc, #148]	; (8004a3c <HAL_RCC_OscConfig+0x620>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	60cb      	str	r3, [r1, #12]
 80049aa:	e03e      	b.n	8004a2a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e039      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80049b8:	4b1e      	ldr	r3, [pc, #120]	; (8004a34 <HAL_RCC_OscConfig+0x618>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f003 0203 	and.w	r2, r3, #3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d12c      	bne.n	8004a26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	3b01      	subs	r3, #1
 80049d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d123      	bne.n	8004a26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d11b      	bne.n	8004a26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d113      	bne.n	8004a26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	085b      	lsrs	r3, r3, #1
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d109      	bne.n	8004a26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1c:	085b      	lsrs	r3, r3, #1
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d001      	beq.n	8004a2a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3720      	adds	r7, #32
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	019f800c 	.word	0x019f800c
 8004a3c:	feeefffc 	.word	0xfeeefffc

08004a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e11e      	b.n	8004c96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a58:	4b91      	ldr	r3, [pc, #580]	; (8004ca0 <HAL_RCC_ClockConfig+0x260>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d910      	bls.n	8004a88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a66:	4b8e      	ldr	r3, [pc, #568]	; (8004ca0 <HAL_RCC_ClockConfig+0x260>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f023 020f 	bic.w	r2, r3, #15
 8004a6e:	498c      	ldr	r1, [pc, #560]	; (8004ca0 <HAL_RCC_ClockConfig+0x260>)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a76:	4b8a      	ldr	r3, [pc, #552]	; (8004ca0 <HAL_RCC_ClockConfig+0x260>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d001      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e106      	b.n	8004c96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d073      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d129      	bne.n	8004af0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9c:	4b81      	ldr	r3, [pc, #516]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e0f4      	b.n	8004c96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004aac:	f000 f99e 	bl	8004dec <RCC_GetSysClockFreqFromPLLSource>
 8004ab0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	4a7c      	ldr	r2, [pc, #496]	; (8004ca8 <HAL_RCC_ClockConfig+0x268>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d93f      	bls.n	8004b3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004aba:	4b7a      	ldr	r3, [pc, #488]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d033      	beq.n	8004b3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d12f      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ada:	4b72      	ldr	r3, [pc, #456]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ae2:	4a70      	ldr	r2, [pc, #448]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004aea:	2380      	movs	r3, #128	; 0x80
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	e024      	b.n	8004b3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d107      	bne.n	8004b08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004af8:	4b6a      	ldr	r3, [pc, #424]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d109      	bne.n	8004b18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0c6      	b.n	8004c96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b08:	4b66      	ldr	r3, [pc, #408]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0be      	b.n	8004c96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b18:	f000 f8ce 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8004b1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	4a61      	ldr	r2, [pc, #388]	; (8004ca8 <HAL_RCC_ClockConfig+0x268>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d909      	bls.n	8004b3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b26:	4b5f      	ldr	r3, [pc, #380]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b2e:	4a5d      	ldr	r2, [pc, #372]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b36:	2380      	movs	r3, #128	; 0x80
 8004b38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b3a:	4b5a      	ldr	r3, [pc, #360]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f023 0203 	bic.w	r2, r3, #3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4957      	ldr	r1, [pc, #348]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4c:	f7fd fa42 	bl	8001fd4 <HAL_GetTick>
 8004b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b52:	e00a      	b.n	8004b6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b54:	f7fd fa3e 	bl	8001fd4 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e095      	b.n	8004c96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6a:	4b4e      	ldr	r3, [pc, #312]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 020c 	and.w	r2, r3, #12
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d1eb      	bne.n	8004b54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d023      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b94:	4b43      	ldr	r3, [pc, #268]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	4a42      	ldr	r2, [pc, #264]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004b9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004bac:	4b3d      	ldr	r3, [pc, #244]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004bb4:	4a3b      	ldr	r2, [pc, #236]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004bb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004bba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bbc:	4b39      	ldr	r3, [pc, #228]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	4936      	ldr	r1, [pc, #216]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d105      	bne.n	8004be2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004bd6:	4b33      	ldr	r3, [pc, #204]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	4a32      	ldr	r2, [pc, #200]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004be0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004be2:	4b2f      	ldr	r3, [pc, #188]	; (8004ca0 <HAL_RCC_ClockConfig+0x260>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d21d      	bcs.n	8004c2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf0:	4b2b      	ldr	r3, [pc, #172]	; (8004ca0 <HAL_RCC_ClockConfig+0x260>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f023 020f 	bic.w	r2, r3, #15
 8004bf8:	4929      	ldr	r1, [pc, #164]	; (8004ca0 <HAL_RCC_ClockConfig+0x260>)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c00:	f7fd f9e8 	bl	8001fd4 <HAL_GetTick>
 8004c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c08:	f7fd f9e4 	bl	8001fd4 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e03b      	b.n	8004c96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <HAL_RCC_ClockConfig+0x260>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d1ed      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d008      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c38:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4917      	ldr	r1, [pc, #92]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d009      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c56:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	490f      	ldr	r1, [pc, #60]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c6a:	f000 f825 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <HAL_RCC_ClockConfig+0x264>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	490c      	ldr	r1, [pc, #48]	; (8004cac <HAL_RCC_ClockConfig+0x26c>)
 8004c7c:	5ccb      	ldrb	r3, [r1, r3]
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	fa22 f303 	lsr.w	r3, r2, r3
 8004c86:	4a0a      	ldr	r2, [pc, #40]	; (8004cb0 <HAL_RCC_ClockConfig+0x270>)
 8004c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c8a:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <HAL_RCC_ClockConfig+0x274>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fd f954 	bl	8001f3c <HAL_InitTick>
 8004c94:	4603      	mov	r3, r0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40022000 	.word	0x40022000
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	04c4b400 	.word	0x04c4b400
 8004cac:	080083c0 	.word	0x080083c0
 8004cb0:	20000008 	.word	0x20000008
 8004cb4:	2000000c 	.word	0x2000000c

08004cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004cbe:	4b2c      	ldr	r3, [pc, #176]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d102      	bne.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cca:	4b2a      	ldr	r3, [pc, #168]	; (8004d74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	e047      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004cd0:	4b27      	ldr	r3, [pc, #156]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 030c 	and.w	r3, r3, #12
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d102      	bne.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cdc:	4b26      	ldr	r3, [pc, #152]	; (8004d78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	e03e      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004ce2:	4b23      	ldr	r3, [pc, #140]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
 8004cea:	2b0c      	cmp	r3, #12
 8004cec:	d136      	bne.n	8004d5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cee:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cf8:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	091b      	lsrs	r3, r3, #4
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	3301      	adds	r3, #1
 8004d04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d10c      	bne.n	8004d26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d0c:	4a1a      	ldr	r2, [pc, #104]	; (8004d78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d14:	4a16      	ldr	r2, [pc, #88]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d16:	68d2      	ldr	r2, [r2, #12]
 8004d18:	0a12      	lsrs	r2, r2, #8
 8004d1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	617b      	str	r3, [r7, #20]
      break;
 8004d24:	e00c      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d26:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2e:	4a10      	ldr	r2, [pc, #64]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d30:	68d2      	ldr	r2, [r2, #12]
 8004d32:	0a12      	lsrs	r2, r2, #8
 8004d34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d38:	fb02 f303 	mul.w	r3, r2, r3
 8004d3c:	617b      	str	r3, [r7, #20]
      break;
 8004d3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d40:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	0e5b      	lsrs	r3, r3, #25
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d58:	613b      	str	r3, [r7, #16]
 8004d5a:	e001      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d60:	693b      	ldr	r3, [r7, #16]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40021000 	.word	0x40021000
 8004d74:	00f42400 	.word	0x00f42400
 8004d78:	016e3600 	.word	0x016e3600

08004d7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d80:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d82:	681b      	ldr	r3, [r3, #0]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20000008 	.word	0x20000008

08004d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d98:	f7ff fff0 	bl	8004d7c <HAL_RCC_GetHCLKFreq>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	0a1b      	lsrs	r3, r3, #8
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	4904      	ldr	r1, [pc, #16]	; (8004dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004daa:	5ccb      	ldrb	r3, [r1, r3]
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	080083d0 	.word	0x080083d0

08004dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004dc4:	f7ff ffda 	bl	8004d7c <HAL_RCC_GetHCLKFreq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	0adb      	lsrs	r3, r3, #11
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	4904      	ldr	r1, [pc, #16]	; (8004de8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dd6:	5ccb      	ldrb	r3, [r1, r3]
 8004dd8:	f003 031f 	and.w	r3, r3, #31
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40021000 	.word	0x40021000
 8004de8:	080083d0 	.word	0x080083d0

08004dec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004df2:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dfc:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	3301      	adds	r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d10c      	bne.n	8004e2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e10:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e18:	4a14      	ldr	r2, [pc, #80]	; (8004e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e1a:	68d2      	ldr	r2, [r2, #12]
 8004e1c:	0a12      	lsrs	r2, r2, #8
 8004e1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e22:	fb02 f303 	mul.w	r3, r2, r3
 8004e26:	617b      	str	r3, [r7, #20]
    break;
 8004e28:	e00c      	b.n	8004e44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e2a:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e32:	4a0e      	ldr	r2, [pc, #56]	; (8004e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e34:	68d2      	ldr	r2, [r2, #12]
 8004e36:	0a12      	lsrs	r2, r2, #8
 8004e38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e3c:	fb02 f303 	mul.w	r3, r2, r3
 8004e40:	617b      	str	r3, [r7, #20]
    break;
 8004e42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e44:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	0e5b      	lsrs	r3, r3, #25
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	3301      	adds	r3, #1
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e5e:	687b      	ldr	r3, [r7, #4]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	016e3600 	.word	0x016e3600
 8004e74:	00f42400 	.word	0x00f42400

08004e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e80:	2300      	movs	r3, #0
 8004e82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e84:	2300      	movs	r3, #0
 8004e86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8098 	beq.w	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e96:	2300      	movs	r3, #0
 8004e98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e9a:	4b43      	ldr	r3, [pc, #268]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10d      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea6:	4b40      	ldr	r3, [pc, #256]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eaa:	4a3f      	ldr	r2, [pc, #252]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8004eb2:	4b3d      	ldr	r3, [pc, #244]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eba:	60bb      	str	r3, [r7, #8]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ec2:	4b3a      	ldr	r3, [pc, #232]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a39      	ldr	r2, [pc, #228]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ecc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ece:	f7fd f881 	bl	8001fd4 <HAL_GetTick>
 8004ed2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ed4:	e009      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed6:	f7fd f87d 	bl	8001fd4 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d902      	bls.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	74fb      	strb	r3, [r7, #19]
        break;
 8004ee8:	e005      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eea:	4b30      	ldr	r3, [pc, #192]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0ef      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ef6:	7cfb      	ldrb	r3, [r7, #19]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d159      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004efc:	4b2a      	ldr	r3, [pc, #168]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d01e      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d019      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f18:	4b23      	ldr	r3, [pc, #140]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f24:	4b20      	ldr	r3, [pc, #128]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	4a1f      	ldr	r2, [pc, #124]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f34:	4b1c      	ldr	r3, [pc, #112]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3a:	4a1b      	ldr	r2, [pc, #108]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f44:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d016      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f56:	f7fd f83d 	bl	8001fd4 <HAL_GetTick>
 8004f5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f5c:	e00b      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5e:	f7fd f839 	bl	8001fd4 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d902      	bls.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	74fb      	strb	r3, [r7, #19]
            break;
 8004f74:	e006      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f76:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0ec      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f84:	7cfb      	ldrb	r3, [r7, #19]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10b      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f8a:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f98:	4903      	ldr	r1, [pc, #12]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fa2:	7cfb      	ldrb	r3, [r7, #19]
 8004fa4:	74bb      	strb	r3, [r7, #18]
 8004fa6:	e005      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb0:	7cfb      	ldrb	r3, [r7, #19]
 8004fb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fb4:	7c7b      	ldrb	r3, [r7, #17]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d105      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fba:	4ba7      	ldr	r3, [pc, #668]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbe:	4aa6      	ldr	r2, [pc, #664]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fd2:	4ba1      	ldr	r3, [pc, #644]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd8:	f023 0203 	bic.w	r2, r3, #3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	499d      	ldr	r1, [pc, #628]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ff4:	4b98      	ldr	r3, [pc, #608]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffa:	f023 020c 	bic.w	r2, r3, #12
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	4995      	ldr	r1, [pc, #596]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005016:	4b90      	ldr	r3, [pc, #576]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	498c      	ldr	r1, [pc, #560]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005038:	4b87      	ldr	r3, [pc, #540]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	4984      	ldr	r1, [pc, #528]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800505a:	4b7f      	ldr	r3, [pc, #508]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	497b      	ldr	r1, [pc, #492]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800507c:	4b76      	ldr	r3, [pc, #472]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	4973      	ldr	r1, [pc, #460]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800509e:	4b6e      	ldr	r3, [pc, #440]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	496a      	ldr	r1, [pc, #424]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050c0:	4b65      	ldr	r3, [pc, #404]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	4962      	ldr	r1, [pc, #392]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050e2:	4b5d      	ldr	r3, [pc, #372]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	4959      	ldr	r1, [pc, #356]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005104:	4b54      	ldr	r3, [pc, #336]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005106:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800510a:	f023 0203 	bic.w	r2, r3, #3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005112:	4951      	ldr	r1, [pc, #324]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005126:	4b4c      	ldr	r3, [pc, #304]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	4948      	ldr	r1, [pc, #288]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005144:	2b00      	cmp	r3, #0
 8005146:	d015      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005148:	4b43      	ldr	r3, [pc, #268]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	4940      	ldr	r1, [pc, #256]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005166:	d105      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005168:	4b3b      	ldr	r3, [pc, #236]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4a3a      	ldr	r2, [pc, #232]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800516e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005172:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517c:	2b00      	cmp	r3, #0
 800517e:	d015      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005180:	4b35      	ldr	r3, [pc, #212]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005186:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518e:	4932      	ldr	r1, [pc, #200]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800519e:	d105      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a0:	4b2d      	ldr	r3, [pc, #180]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	4a2c      	ldr	r2, [pc, #176]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d015      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051b8:	4b27      	ldr	r3, [pc, #156]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	4924      	ldr	r1, [pc, #144]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051d6:	d105      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051d8:	4b1f      	ldr	r3, [pc, #124]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	4a1e      	ldr	r2, [pc, #120]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d015      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051f0:	4b19      	ldr	r3, [pc, #100]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	4916      	ldr	r1, [pc, #88]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800520e:	d105      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005210:	4b11      	ldr	r3, [pc, #68]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4a10      	ldr	r2, [pc, #64]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800521a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d019      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	4908      	ldr	r1, [pc, #32]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005246:	d109      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005248:	4b03      	ldr	r3, [pc, #12]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	4a02      	ldr	r2, [pc, #8]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005252:	60d3      	str	r3, [r2, #12]
 8005254:	e002      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005256:	bf00      	nop
 8005258:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d015      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005268:	4b29      	ldr	r3, [pc, #164]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005276:	4926      	ldr	r1, [pc, #152]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005286:	d105      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005288:	4b21      	ldr	r3, [pc, #132]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	4a20      	ldr	r2, [pc, #128]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800528e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005292:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d015      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80052a0:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ae:	4918      	ldr	r1, [pc, #96]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052be:	d105      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052c0:	4b13      	ldr	r3, [pc, #76]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	4a12      	ldr	r2, [pc, #72]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d015      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80052d8:	4b0d      	ldr	r3, [pc, #52]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e6:	490a      	ldr	r1, [pc, #40]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052f6:	d105      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052f8:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4a04      	ldr	r2, [pc, #16]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005302:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005304:	7cbb      	ldrb	r3, [r7, #18]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40021000 	.word	0x40021000

08005314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e049      	b.n	80053ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fc fc46 	bl	8001bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3304      	adds	r3, #4
 8005350:	4619      	mov	r1, r3
 8005352:	4610      	mov	r0, r2
 8005354:	f000 ff72 	bl	800623c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d001      	beq.n	80053dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e04c      	b.n	8005476 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a26      	ldr	r2, [pc, #152]	; (8005484 <HAL_TIM_Base_Start+0xc0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d022      	beq.n	8005434 <HAL_TIM_Base_Start+0x70>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f6:	d01d      	beq.n	8005434 <HAL_TIM_Base_Start+0x70>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a22      	ldr	r2, [pc, #136]	; (8005488 <HAL_TIM_Base_Start+0xc4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d018      	beq.n	8005434 <HAL_TIM_Base_Start+0x70>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a21      	ldr	r2, [pc, #132]	; (800548c <HAL_TIM_Base_Start+0xc8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <HAL_TIM_Base_Start+0x70>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1f      	ldr	r2, [pc, #124]	; (8005490 <HAL_TIM_Base_Start+0xcc>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <HAL_TIM_Base_Start+0x70>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1e      	ldr	r2, [pc, #120]	; (8005494 <HAL_TIM_Base_Start+0xd0>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d009      	beq.n	8005434 <HAL_TIM_Base_Start+0x70>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1c      	ldr	r2, [pc, #112]	; (8005498 <HAL_TIM_Base_Start+0xd4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_TIM_Base_Start+0x70>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1b      	ldr	r2, [pc, #108]	; (800549c <HAL_TIM_Base_Start+0xd8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d115      	bne.n	8005460 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	4b19      	ldr	r3, [pc, #100]	; (80054a0 <HAL_TIM_Base_Start+0xdc>)
 800543c:	4013      	ands	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b06      	cmp	r3, #6
 8005444:	d015      	beq.n	8005472 <HAL_TIM_Base_Start+0xae>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544c:	d011      	beq.n	8005472 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0201 	orr.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545e:	e008      	b.n	8005472 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e000      	b.n	8005474 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005472:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40012c00 	.word	0x40012c00
 8005488:	40000400 	.word	0x40000400
 800548c:	40000800 	.word	0x40000800
 8005490:	40000c00 	.word	0x40000c00
 8005494:	40013400 	.word	0x40013400
 8005498:	40014000 	.word	0x40014000
 800549c:	40015000 	.word	0x40015000
 80054a0:	00010007 	.word	0x00010007

080054a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d001      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e054      	b.n	8005566 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a26      	ldr	r2, [pc, #152]	; (8005574 <HAL_TIM_Base_Start_IT+0xd0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d022      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x80>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e6:	d01d      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x80>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a22      	ldr	r2, [pc, #136]	; (8005578 <HAL_TIM_Base_Start_IT+0xd4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d018      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x80>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a21      	ldr	r2, [pc, #132]	; (800557c <HAL_TIM_Base_Start_IT+0xd8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d013      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x80>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a1f      	ldr	r2, [pc, #124]	; (8005580 <HAL_TIM_Base_Start_IT+0xdc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00e      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x80>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1e      	ldr	r2, [pc, #120]	; (8005584 <HAL_TIM_Base_Start_IT+0xe0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d009      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x80>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1c      	ldr	r2, [pc, #112]	; (8005588 <HAL_TIM_Base_Start_IT+0xe4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x80>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1b      	ldr	r2, [pc, #108]	; (800558c <HAL_TIM_Base_Start_IT+0xe8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d115      	bne.n	8005550 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	4b19      	ldr	r3, [pc, #100]	; (8005590 <HAL_TIM_Base_Start_IT+0xec>)
 800552c:	4013      	ands	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b06      	cmp	r3, #6
 8005534:	d015      	beq.n	8005562 <HAL_TIM_Base_Start_IT+0xbe>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800553c:	d011      	beq.n	8005562 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0201 	orr.w	r2, r2, #1
 800554c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554e:	e008      	b.n	8005562 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	e000      	b.n	8005564 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005562:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40012c00 	.word	0x40012c00
 8005578:	40000400 	.word	0x40000400
 800557c:	40000800 	.word	0x40000800
 8005580:	40000c00 	.word	0x40000c00
 8005584:	40013400 	.word	0x40013400
 8005588:	40014000 	.word	0x40014000
 800558c:	40015000 	.word	0x40015000
 8005590:	00010007 	.word	0x00010007

08005594 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e049      	b.n	800563a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f841 	bl	8005642 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f000 fe32 	bl	800623c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d109      	bne.n	800567c <HAL_TIM_PWM_Start+0x24>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b01      	cmp	r3, #1
 8005672:	bf14      	ite	ne
 8005674:	2301      	movne	r3, #1
 8005676:	2300      	moveq	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	e03c      	b.n	80056f6 <HAL_TIM_PWM_Start+0x9e>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b04      	cmp	r3, #4
 8005680:	d109      	bne.n	8005696 <HAL_TIM_PWM_Start+0x3e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b01      	cmp	r3, #1
 800568c:	bf14      	ite	ne
 800568e:	2301      	movne	r3, #1
 8005690:	2300      	moveq	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	e02f      	b.n	80056f6 <HAL_TIM_PWM_Start+0x9e>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b08      	cmp	r3, #8
 800569a:	d109      	bne.n	80056b0 <HAL_TIM_PWM_Start+0x58>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	bf14      	ite	ne
 80056a8:	2301      	movne	r3, #1
 80056aa:	2300      	moveq	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	e022      	b.n	80056f6 <HAL_TIM_PWM_Start+0x9e>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b0c      	cmp	r3, #12
 80056b4:	d109      	bne.n	80056ca <HAL_TIM_PWM_Start+0x72>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b01      	cmp	r3, #1
 80056c0:	bf14      	ite	ne
 80056c2:	2301      	movne	r3, #1
 80056c4:	2300      	moveq	r3, #0
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	e015      	b.n	80056f6 <HAL_TIM_PWM_Start+0x9e>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b10      	cmp	r3, #16
 80056ce:	d109      	bne.n	80056e4 <HAL_TIM_PWM_Start+0x8c>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b01      	cmp	r3, #1
 80056da:	bf14      	ite	ne
 80056dc:	2301      	movne	r3, #1
 80056de:	2300      	moveq	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	e008      	b.n	80056f6 <HAL_TIM_PWM_Start+0x9e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	bf14      	ite	ne
 80056f0:	2301      	movne	r3, #1
 80056f2:	2300      	moveq	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e0a6      	b.n	800584c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <HAL_TIM_PWM_Start+0xb6>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800570c:	e023      	b.n	8005756 <HAL_TIM_PWM_Start+0xfe>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b04      	cmp	r3, #4
 8005712:	d104      	bne.n	800571e <HAL_TIM_PWM_Start+0xc6>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800571c:	e01b      	b.n	8005756 <HAL_TIM_PWM_Start+0xfe>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d104      	bne.n	800572e <HAL_TIM_PWM_Start+0xd6>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800572c:	e013      	b.n	8005756 <HAL_TIM_PWM_Start+0xfe>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b0c      	cmp	r3, #12
 8005732:	d104      	bne.n	800573e <HAL_TIM_PWM_Start+0xe6>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800573c:	e00b      	b.n	8005756 <HAL_TIM_PWM_Start+0xfe>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b10      	cmp	r3, #16
 8005742:	d104      	bne.n	800574e <HAL_TIM_PWM_Start+0xf6>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800574c:	e003      	b.n	8005756 <HAL_TIM_PWM_Start+0xfe>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2202      	movs	r2, #2
 8005752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2201      	movs	r2, #1
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f001 f9e6 	bl	8006b30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a3a      	ldr	r2, [pc, #232]	; (8005854 <HAL_TIM_PWM_Start+0x1fc>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d018      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x148>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a39      	ldr	r2, [pc, #228]	; (8005858 <HAL_TIM_PWM_Start+0x200>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d013      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x148>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a37      	ldr	r2, [pc, #220]	; (800585c <HAL_TIM_PWM_Start+0x204>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00e      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x148>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a36      	ldr	r2, [pc, #216]	; (8005860 <HAL_TIM_PWM_Start+0x208>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d009      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x148>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a34      	ldr	r2, [pc, #208]	; (8005864 <HAL_TIM_PWM_Start+0x20c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d004      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x148>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a33      	ldr	r2, [pc, #204]	; (8005868 <HAL_TIM_PWM_Start+0x210>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d101      	bne.n	80057a4 <HAL_TIM_PWM_Start+0x14c>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <HAL_TIM_PWM_Start+0x14e>
 80057a4:	2300      	movs	r3, #0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d007      	beq.n	80057ba <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a25      	ldr	r2, [pc, #148]	; (8005854 <HAL_TIM_PWM_Start+0x1fc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d022      	beq.n	800580a <HAL_TIM_PWM_Start+0x1b2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057cc:	d01d      	beq.n	800580a <HAL_TIM_PWM_Start+0x1b2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a26      	ldr	r2, [pc, #152]	; (800586c <HAL_TIM_PWM_Start+0x214>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d018      	beq.n	800580a <HAL_TIM_PWM_Start+0x1b2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a24      	ldr	r2, [pc, #144]	; (8005870 <HAL_TIM_PWM_Start+0x218>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d013      	beq.n	800580a <HAL_TIM_PWM_Start+0x1b2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a23      	ldr	r2, [pc, #140]	; (8005874 <HAL_TIM_PWM_Start+0x21c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00e      	beq.n	800580a <HAL_TIM_PWM_Start+0x1b2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a19      	ldr	r2, [pc, #100]	; (8005858 <HAL_TIM_PWM_Start+0x200>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d009      	beq.n	800580a <HAL_TIM_PWM_Start+0x1b2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a18      	ldr	r2, [pc, #96]	; (800585c <HAL_TIM_PWM_Start+0x204>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_TIM_PWM_Start+0x1b2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a18      	ldr	r2, [pc, #96]	; (8005868 <HAL_TIM_PWM_Start+0x210>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d115      	bne.n	8005836 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	4b19      	ldr	r3, [pc, #100]	; (8005878 <HAL_TIM_PWM_Start+0x220>)
 8005812:	4013      	ands	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b06      	cmp	r3, #6
 800581a:	d015      	beq.n	8005848 <HAL_TIM_PWM_Start+0x1f0>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005822:	d011      	beq.n	8005848 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005834:	e008      	b.n	8005848 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 0201 	orr.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	e000      	b.n	800584a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005848:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40013400 	.word	0x40013400
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800
 8005868:	40015000 	.word	0x40015000
 800586c:	40000400 	.word	0x40000400
 8005870:	40000800 	.word	0x40000800
 8005874:	40000c00 	.word	0x40000c00
 8005878:	00010007 	.word	0x00010007

0800587c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e097      	b.n	80059c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d106      	bne.n	80058aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7fc f9dd 	bl	8001c64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80058c0:	f023 0307 	bic.w	r3, r3, #7
 80058c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3304      	adds	r3, #4
 80058ce:	4619      	mov	r1, r3
 80058d0:	4610      	mov	r0, r2
 80058d2:	f000 fcb3 	bl	800623c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058fe:	f023 0303 	bic.w	r3, r3, #3
 8005902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	4313      	orrs	r3, r2
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800591c:	f023 030c 	bic.w	r3, r3, #12
 8005920:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800592c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	021b      	lsls	r3, r3, #8
 8005938:	4313      	orrs	r3, r2
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	011a      	lsls	r2, r3, #4
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	031b      	lsls	r3, r3, #12
 800594c:	4313      	orrs	r3, r2
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800595a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005962:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	4313      	orrs	r3, r2
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d110      	bne.n	8005a1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d102      	bne.n	8005a04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80059fe:	7b7b      	ldrb	r3, [r7, #13]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d001      	beq.n	8005a08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e069      	b.n	8005adc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a18:	e031      	b.n	8005a7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d110      	bne.n	8005a42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a20:	7bbb      	ldrb	r3, [r7, #14]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d102      	bne.n	8005a2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a26:	7b3b      	ldrb	r3, [r7, #12]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d001      	beq.n	8005a30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e055      	b.n	8005adc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a40:	e01d      	b.n	8005a7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d108      	bne.n	8005a5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a48:	7bbb      	ldrb	r3, [r7, #14]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d105      	bne.n	8005a5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a4e:	7b7b      	ldrb	r3, [r7, #13]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d102      	bne.n	8005a5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a54:	7b3b      	ldrb	r3, [r7, #12]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d001      	beq.n	8005a5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e03e      	b.n	8005adc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2202      	movs	r2, #2
 8005a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2202      	movs	r2, #2
 8005a6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2202      	movs	r2, #2
 8005a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <HAL_TIM_Encoder_Start+0xc4>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d008      	beq.n	8005a9c <HAL_TIM_Encoder_Start+0xd4>
 8005a8a:	e00f      	b.n	8005aac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2201      	movs	r2, #1
 8005a92:	2100      	movs	r1, #0
 8005a94:	4618      	mov	r0, r3
 8005a96:	f001 f84b 	bl	8006b30 <TIM_CCxChannelCmd>
      break;
 8005a9a:	e016      	b.n	8005aca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	2104      	movs	r1, #4
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f001 f843 	bl	8006b30 <TIM_CCxChannelCmd>
      break;
 8005aaa:	e00e      	b.n	8005aca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f001 f83b 	bl	8006b30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	2104      	movs	r1, #4
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f001 f834 	bl	8006b30 <TIM_CCxChannelCmd>
      break;
 8005ac8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0201 	orr.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d020      	beq.n	8005b48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01b      	beq.n	8005b48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f06f 0202 	mvn.w	r2, #2
 8005b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fb66 	bl	8006200 <HAL_TIM_IC_CaptureCallback>
 8005b34:	e005      	b.n	8005b42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fb58 	bl	80061ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fb69 	bl	8006214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d020      	beq.n	8005b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01b      	beq.n	8005b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0204 	mvn.w	r2, #4
 8005b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fb40 	bl	8006200 <HAL_TIM_IC_CaptureCallback>
 8005b80:	e005      	b.n	8005b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fb32 	bl	80061ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fb43 	bl	8006214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d020      	beq.n	8005be0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01b      	beq.n	8005be0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0208 	mvn.w	r2, #8
 8005bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2204      	movs	r2, #4
 8005bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fb1a 	bl	8006200 <HAL_TIM_IC_CaptureCallback>
 8005bcc:	e005      	b.n	8005bda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fb0c 	bl	80061ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fb1d 	bl	8006214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f003 0310 	and.w	r3, r3, #16
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d020      	beq.n	8005c2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01b      	beq.n	8005c2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0210 	mvn.w	r2, #16
 8005bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2208      	movs	r2, #8
 8005c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 faf4 	bl	8006200 <HAL_TIM_IC_CaptureCallback>
 8005c18:	e005      	b.n	8005c26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fae6 	bl	80061ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 faf7 	bl	8006214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00c      	beq.n	8005c50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d007      	beq.n	8005c50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0201 	mvn.w	r2, #1
 8005c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fac4 	bl	80061d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d104      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00c      	beq.n	8005c7e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d007      	beq.n	8005c7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f001 f8b3 	bl	8006de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00c      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d007      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f001 f8ab 	bl	8006df8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00c      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fab1 	bl	8006228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00c      	beq.n	8005cea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f06f 0220 	mvn.w	r2, #32
 8005ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 f873 	bl	8006dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00c      	beq.n	8005d0e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d007      	beq.n	8005d0e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f001 f87f 	bl	8006e0c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00c      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d007      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f001 f877 	bl	8006e20 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00c      	beq.n	8005d56 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d007      	beq.n	8005d56 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 f86f 	bl	8006e34 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00c      	beq.n	8005d7a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d007      	beq.n	8005d7a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f001 f867 	bl	8006e48 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d7a:	bf00      	nop
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d101      	bne.n	8005da2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	e0ff      	b.n	8005fa2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b14      	cmp	r3, #20
 8005dae:	f200 80f0 	bhi.w	8005f92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005db2:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db8:	08005e0d 	.word	0x08005e0d
 8005dbc:	08005f93 	.word	0x08005f93
 8005dc0:	08005f93 	.word	0x08005f93
 8005dc4:	08005f93 	.word	0x08005f93
 8005dc8:	08005e4d 	.word	0x08005e4d
 8005dcc:	08005f93 	.word	0x08005f93
 8005dd0:	08005f93 	.word	0x08005f93
 8005dd4:	08005f93 	.word	0x08005f93
 8005dd8:	08005e8f 	.word	0x08005e8f
 8005ddc:	08005f93 	.word	0x08005f93
 8005de0:	08005f93 	.word	0x08005f93
 8005de4:	08005f93 	.word	0x08005f93
 8005de8:	08005ecf 	.word	0x08005ecf
 8005dec:	08005f93 	.word	0x08005f93
 8005df0:	08005f93 	.word	0x08005f93
 8005df4:	08005f93 	.word	0x08005f93
 8005df8:	08005f11 	.word	0x08005f11
 8005dfc:	08005f93 	.word	0x08005f93
 8005e00:	08005f93 	.word	0x08005f93
 8005e04:	08005f93 	.word	0x08005f93
 8005e08:	08005f51 	.word	0x08005f51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fac6 	bl	80063a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0208 	orr.w	r2, r2, #8
 8005e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699a      	ldr	r2, [r3, #24]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0204 	bic.w	r2, r2, #4
 8005e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6999      	ldr	r1, [r3, #24]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	691a      	ldr	r2, [r3, #16]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	619a      	str	r2, [r3, #24]
      break;
 8005e4a:	e0a5      	b.n	8005f98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fb40 	bl	80064d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6999      	ldr	r1, [r3, #24]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	021a      	lsls	r2, r3, #8
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	619a      	str	r2, [r3, #24]
      break;
 8005e8c:	e084      	b.n	8005f98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68b9      	ldr	r1, [r7, #8]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fbb3 	bl	8006600 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69da      	ldr	r2, [r3, #28]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f042 0208 	orr.w	r2, r2, #8
 8005ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69da      	ldr	r2, [r3, #28]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0204 	bic.w	r2, r2, #4
 8005eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69d9      	ldr	r1, [r3, #28]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	61da      	str	r2, [r3, #28]
      break;
 8005ecc:	e064      	b.n	8005f98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fc25 	bl	8006724 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69da      	ldr	r2, [r3, #28]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69d9      	ldr	r1, [r3, #28]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	021a      	lsls	r2, r3, #8
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	61da      	str	r2, [r3, #28]
      break;
 8005f0e:	e043      	b.n	8005f98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68b9      	ldr	r1, [r7, #8]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fc98 	bl	800684c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0208 	orr.w	r2, r2, #8
 8005f2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0204 	bic.w	r2, r2, #4
 8005f3a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005f4e:	e023      	b.n	8005f98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68b9      	ldr	r1, [r7, #8]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fce2 	bl	8006920 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f7a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	021a      	lsls	r2, r3, #8
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005f90:	e002      	b.n	8005f98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	75fb      	strb	r3, [r7, #23]
      break;
 8005f96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop

08005fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_TIM_ConfigClockSource+0x1c>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e0f6      	b.n	80061b6 <HAL_TIM_ConfigClockSource+0x20a>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005fe6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a6f      	ldr	r2, [pc, #444]	; (80061c0 <HAL_TIM_ConfigClockSource+0x214>)
 8006002:	4293      	cmp	r3, r2
 8006004:	f000 80c1 	beq.w	800618a <HAL_TIM_ConfigClockSource+0x1de>
 8006008:	4a6d      	ldr	r2, [pc, #436]	; (80061c0 <HAL_TIM_ConfigClockSource+0x214>)
 800600a:	4293      	cmp	r3, r2
 800600c:	f200 80c6 	bhi.w	800619c <HAL_TIM_ConfigClockSource+0x1f0>
 8006010:	4a6c      	ldr	r2, [pc, #432]	; (80061c4 <HAL_TIM_ConfigClockSource+0x218>)
 8006012:	4293      	cmp	r3, r2
 8006014:	f000 80b9 	beq.w	800618a <HAL_TIM_ConfigClockSource+0x1de>
 8006018:	4a6a      	ldr	r2, [pc, #424]	; (80061c4 <HAL_TIM_ConfigClockSource+0x218>)
 800601a:	4293      	cmp	r3, r2
 800601c:	f200 80be 	bhi.w	800619c <HAL_TIM_ConfigClockSource+0x1f0>
 8006020:	4a69      	ldr	r2, [pc, #420]	; (80061c8 <HAL_TIM_ConfigClockSource+0x21c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	f000 80b1 	beq.w	800618a <HAL_TIM_ConfigClockSource+0x1de>
 8006028:	4a67      	ldr	r2, [pc, #412]	; (80061c8 <HAL_TIM_ConfigClockSource+0x21c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	f200 80b6 	bhi.w	800619c <HAL_TIM_ConfigClockSource+0x1f0>
 8006030:	4a66      	ldr	r2, [pc, #408]	; (80061cc <HAL_TIM_ConfigClockSource+0x220>)
 8006032:	4293      	cmp	r3, r2
 8006034:	f000 80a9 	beq.w	800618a <HAL_TIM_ConfigClockSource+0x1de>
 8006038:	4a64      	ldr	r2, [pc, #400]	; (80061cc <HAL_TIM_ConfigClockSource+0x220>)
 800603a:	4293      	cmp	r3, r2
 800603c:	f200 80ae 	bhi.w	800619c <HAL_TIM_ConfigClockSource+0x1f0>
 8006040:	4a63      	ldr	r2, [pc, #396]	; (80061d0 <HAL_TIM_ConfigClockSource+0x224>)
 8006042:	4293      	cmp	r3, r2
 8006044:	f000 80a1 	beq.w	800618a <HAL_TIM_ConfigClockSource+0x1de>
 8006048:	4a61      	ldr	r2, [pc, #388]	; (80061d0 <HAL_TIM_ConfigClockSource+0x224>)
 800604a:	4293      	cmp	r3, r2
 800604c:	f200 80a6 	bhi.w	800619c <HAL_TIM_ConfigClockSource+0x1f0>
 8006050:	4a60      	ldr	r2, [pc, #384]	; (80061d4 <HAL_TIM_ConfigClockSource+0x228>)
 8006052:	4293      	cmp	r3, r2
 8006054:	f000 8099 	beq.w	800618a <HAL_TIM_ConfigClockSource+0x1de>
 8006058:	4a5e      	ldr	r2, [pc, #376]	; (80061d4 <HAL_TIM_ConfigClockSource+0x228>)
 800605a:	4293      	cmp	r3, r2
 800605c:	f200 809e 	bhi.w	800619c <HAL_TIM_ConfigClockSource+0x1f0>
 8006060:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006064:	f000 8091 	beq.w	800618a <HAL_TIM_ConfigClockSource+0x1de>
 8006068:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800606c:	f200 8096 	bhi.w	800619c <HAL_TIM_ConfigClockSource+0x1f0>
 8006070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006074:	f000 8089 	beq.w	800618a <HAL_TIM_ConfigClockSource+0x1de>
 8006078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800607c:	f200 808e 	bhi.w	800619c <HAL_TIM_ConfigClockSource+0x1f0>
 8006080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006084:	d03e      	beq.n	8006104 <HAL_TIM_ConfigClockSource+0x158>
 8006086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800608a:	f200 8087 	bhi.w	800619c <HAL_TIM_ConfigClockSource+0x1f0>
 800608e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006092:	f000 8086 	beq.w	80061a2 <HAL_TIM_ConfigClockSource+0x1f6>
 8006096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609a:	d87f      	bhi.n	800619c <HAL_TIM_ConfigClockSource+0x1f0>
 800609c:	2b70      	cmp	r3, #112	; 0x70
 800609e:	d01a      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x12a>
 80060a0:	2b70      	cmp	r3, #112	; 0x70
 80060a2:	d87b      	bhi.n	800619c <HAL_TIM_ConfigClockSource+0x1f0>
 80060a4:	2b60      	cmp	r3, #96	; 0x60
 80060a6:	d050      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x19e>
 80060a8:	2b60      	cmp	r3, #96	; 0x60
 80060aa:	d877      	bhi.n	800619c <HAL_TIM_ConfigClockSource+0x1f0>
 80060ac:	2b50      	cmp	r3, #80	; 0x50
 80060ae:	d03c      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x17e>
 80060b0:	2b50      	cmp	r3, #80	; 0x50
 80060b2:	d873      	bhi.n	800619c <HAL_TIM_ConfigClockSource+0x1f0>
 80060b4:	2b40      	cmp	r3, #64	; 0x40
 80060b6:	d058      	beq.n	800616a <HAL_TIM_ConfigClockSource+0x1be>
 80060b8:	2b40      	cmp	r3, #64	; 0x40
 80060ba:	d86f      	bhi.n	800619c <HAL_TIM_ConfigClockSource+0x1f0>
 80060bc:	2b30      	cmp	r3, #48	; 0x30
 80060be:	d064      	beq.n	800618a <HAL_TIM_ConfigClockSource+0x1de>
 80060c0:	2b30      	cmp	r3, #48	; 0x30
 80060c2:	d86b      	bhi.n	800619c <HAL_TIM_ConfigClockSource+0x1f0>
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d060      	beq.n	800618a <HAL_TIM_ConfigClockSource+0x1de>
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d867      	bhi.n	800619c <HAL_TIM_ConfigClockSource+0x1f0>
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d05c      	beq.n	800618a <HAL_TIM_ConfigClockSource+0x1de>
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	d05a      	beq.n	800618a <HAL_TIM_ConfigClockSource+0x1de>
 80060d4:	e062      	b.n	800619c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060e6:	f000 fd03 	bl	8006af0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	609a      	str	r2, [r3, #8]
      break;
 8006102:	e04f      	b.n	80061a4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006114:	f000 fcec 	bl	8006af0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006126:	609a      	str	r2, [r3, #8]
      break;
 8006128:	e03c      	b.n	80061a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006136:	461a      	mov	r2, r3
 8006138:	f000 fc5e 	bl	80069f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2150      	movs	r1, #80	; 0x50
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fcb7 	bl	8006ab6 <TIM_ITRx_SetConfig>
      break;
 8006148:	e02c      	b.n	80061a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006156:	461a      	mov	r2, r3
 8006158:	f000 fc7d 	bl	8006a56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2160      	movs	r1, #96	; 0x60
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fca7 	bl	8006ab6 <TIM_ITRx_SetConfig>
      break;
 8006168:	e01c      	b.n	80061a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006176:	461a      	mov	r2, r3
 8006178:	f000 fc3e 	bl	80069f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2140      	movs	r1, #64	; 0x40
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fc97 	bl	8006ab6 <TIM_ITRx_SetConfig>
      break;
 8006188:	e00c      	b.n	80061a4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4619      	mov	r1, r3
 8006194:	4610      	mov	r0, r2
 8006196:	f000 fc8e 	bl	8006ab6 <TIM_ITRx_SetConfig>
      break;
 800619a:	e003      	b.n	80061a4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	73fb      	strb	r3, [r7, #15]
      break;
 80061a0:	e000      	b.n	80061a4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80061a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	00100070 	.word	0x00100070
 80061c4:	00100060 	.word	0x00100060
 80061c8:	00100050 	.word	0x00100050
 80061cc:	00100040 	.word	0x00100040
 80061d0:	00100030 	.word	0x00100030
 80061d4:	00100020 	.word	0x00100020

080061d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a4c      	ldr	r2, [pc, #304]	; (8006380 <TIM_Base_SetConfig+0x144>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d017      	beq.n	8006284 <TIM_Base_SetConfig+0x48>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625a:	d013      	beq.n	8006284 <TIM_Base_SetConfig+0x48>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a49      	ldr	r2, [pc, #292]	; (8006384 <TIM_Base_SetConfig+0x148>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00f      	beq.n	8006284 <TIM_Base_SetConfig+0x48>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a48      	ldr	r2, [pc, #288]	; (8006388 <TIM_Base_SetConfig+0x14c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00b      	beq.n	8006284 <TIM_Base_SetConfig+0x48>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a47      	ldr	r2, [pc, #284]	; (800638c <TIM_Base_SetConfig+0x150>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d007      	beq.n	8006284 <TIM_Base_SetConfig+0x48>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a46      	ldr	r2, [pc, #280]	; (8006390 <TIM_Base_SetConfig+0x154>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_Base_SetConfig+0x48>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a45      	ldr	r2, [pc, #276]	; (8006394 <TIM_Base_SetConfig+0x158>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d108      	bne.n	8006296 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a39      	ldr	r2, [pc, #228]	; (8006380 <TIM_Base_SetConfig+0x144>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d023      	beq.n	80062e6 <TIM_Base_SetConfig+0xaa>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a4:	d01f      	beq.n	80062e6 <TIM_Base_SetConfig+0xaa>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a36      	ldr	r2, [pc, #216]	; (8006384 <TIM_Base_SetConfig+0x148>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d01b      	beq.n	80062e6 <TIM_Base_SetConfig+0xaa>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a35      	ldr	r2, [pc, #212]	; (8006388 <TIM_Base_SetConfig+0x14c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d017      	beq.n	80062e6 <TIM_Base_SetConfig+0xaa>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a34      	ldr	r2, [pc, #208]	; (800638c <TIM_Base_SetConfig+0x150>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d013      	beq.n	80062e6 <TIM_Base_SetConfig+0xaa>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a33      	ldr	r2, [pc, #204]	; (8006390 <TIM_Base_SetConfig+0x154>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d00f      	beq.n	80062e6 <TIM_Base_SetConfig+0xaa>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a33      	ldr	r2, [pc, #204]	; (8006398 <TIM_Base_SetConfig+0x15c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00b      	beq.n	80062e6 <TIM_Base_SetConfig+0xaa>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a32      	ldr	r2, [pc, #200]	; (800639c <TIM_Base_SetConfig+0x160>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d007      	beq.n	80062e6 <TIM_Base_SetConfig+0xaa>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a31      	ldr	r2, [pc, #196]	; (80063a0 <TIM_Base_SetConfig+0x164>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d003      	beq.n	80062e6 <TIM_Base_SetConfig+0xaa>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2c      	ldr	r2, [pc, #176]	; (8006394 <TIM_Base_SetConfig+0x158>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d108      	bne.n	80062f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a18      	ldr	r2, [pc, #96]	; (8006380 <TIM_Base_SetConfig+0x144>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d013      	beq.n	800634c <TIM_Base_SetConfig+0x110>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a1a      	ldr	r2, [pc, #104]	; (8006390 <TIM_Base_SetConfig+0x154>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d00f      	beq.n	800634c <TIM_Base_SetConfig+0x110>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a1a      	ldr	r2, [pc, #104]	; (8006398 <TIM_Base_SetConfig+0x15c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00b      	beq.n	800634c <TIM_Base_SetConfig+0x110>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a19      	ldr	r2, [pc, #100]	; (800639c <TIM_Base_SetConfig+0x160>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d007      	beq.n	800634c <TIM_Base_SetConfig+0x110>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a18      	ldr	r2, [pc, #96]	; (80063a0 <TIM_Base_SetConfig+0x164>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_Base_SetConfig+0x110>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a13      	ldr	r2, [pc, #76]	; (8006394 <TIM_Base_SetConfig+0x158>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d103      	bne.n	8006354 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b01      	cmp	r3, #1
 8006364:	d105      	bne.n	8006372 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f023 0201 	bic.w	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	611a      	str	r2, [r3, #16]
  }
}
 8006372:	bf00      	nop
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40012c00 	.word	0x40012c00
 8006384:	40000400 	.word	0x40000400
 8006388:	40000800 	.word	0x40000800
 800638c:	40000c00 	.word	0x40000c00
 8006390:	40013400 	.word	0x40013400
 8006394:	40015000 	.word	0x40015000
 8006398:	40014000 	.word	0x40014000
 800639c:	40014400 	.word	0x40014400
 80063a0:	40014800 	.word	0x40014800

080063a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	f023 0201 	bic.w	r2, r3, #1
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0303 	bic.w	r3, r3, #3
 80063de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f023 0302 	bic.w	r3, r3, #2
 80063f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a30      	ldr	r2, [pc, #192]	; (80064c0 <TIM_OC1_SetConfig+0x11c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d013      	beq.n	800642c <TIM_OC1_SetConfig+0x88>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a2f      	ldr	r2, [pc, #188]	; (80064c4 <TIM_OC1_SetConfig+0x120>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00f      	beq.n	800642c <TIM_OC1_SetConfig+0x88>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a2e      	ldr	r2, [pc, #184]	; (80064c8 <TIM_OC1_SetConfig+0x124>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d00b      	beq.n	800642c <TIM_OC1_SetConfig+0x88>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a2d      	ldr	r2, [pc, #180]	; (80064cc <TIM_OC1_SetConfig+0x128>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d007      	beq.n	800642c <TIM_OC1_SetConfig+0x88>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a2c      	ldr	r2, [pc, #176]	; (80064d0 <TIM_OC1_SetConfig+0x12c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_OC1_SetConfig+0x88>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a2b      	ldr	r2, [pc, #172]	; (80064d4 <TIM_OC1_SetConfig+0x130>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d10c      	bne.n	8006446 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f023 0308 	bic.w	r3, r3, #8
 8006432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f023 0304 	bic.w	r3, r3, #4
 8006444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a1d      	ldr	r2, [pc, #116]	; (80064c0 <TIM_OC1_SetConfig+0x11c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d013      	beq.n	8006476 <TIM_OC1_SetConfig+0xd2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a1c      	ldr	r2, [pc, #112]	; (80064c4 <TIM_OC1_SetConfig+0x120>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00f      	beq.n	8006476 <TIM_OC1_SetConfig+0xd2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a1b      	ldr	r2, [pc, #108]	; (80064c8 <TIM_OC1_SetConfig+0x124>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00b      	beq.n	8006476 <TIM_OC1_SetConfig+0xd2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a1a      	ldr	r2, [pc, #104]	; (80064cc <TIM_OC1_SetConfig+0x128>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d007      	beq.n	8006476 <TIM_OC1_SetConfig+0xd2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a19      	ldr	r2, [pc, #100]	; (80064d0 <TIM_OC1_SetConfig+0x12c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d003      	beq.n	8006476 <TIM_OC1_SetConfig+0xd2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a18      	ldr	r2, [pc, #96]	; (80064d4 <TIM_OC1_SetConfig+0x130>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d111      	bne.n	800649a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800647c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	4313      	orrs	r3, r2
 800648e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4313      	orrs	r3, r2
 8006498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	621a      	str	r2, [r3, #32]
}
 80064b4:	bf00      	nop
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	40012c00 	.word	0x40012c00
 80064c4:	40013400 	.word	0x40013400
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40014400 	.word	0x40014400
 80064d0:	40014800 	.word	0x40014800
 80064d4:	40015000 	.word	0x40015000

080064d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	f023 0210 	bic.w	r2, r3, #16
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800650a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	021b      	lsls	r3, r3, #8
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4313      	orrs	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f023 0320 	bic.w	r3, r3, #32
 8006526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	011b      	lsls	r3, r3, #4
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	4313      	orrs	r3, r2
 8006532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a2c      	ldr	r2, [pc, #176]	; (80065e8 <TIM_OC2_SetConfig+0x110>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d007      	beq.n	800654c <TIM_OC2_SetConfig+0x74>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a2b      	ldr	r2, [pc, #172]	; (80065ec <TIM_OC2_SetConfig+0x114>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d003      	beq.n	800654c <TIM_OC2_SetConfig+0x74>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a2a      	ldr	r2, [pc, #168]	; (80065f0 <TIM_OC2_SetConfig+0x118>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d10d      	bne.n	8006568 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006566:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a1f      	ldr	r2, [pc, #124]	; (80065e8 <TIM_OC2_SetConfig+0x110>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d013      	beq.n	8006598 <TIM_OC2_SetConfig+0xc0>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a1e      	ldr	r2, [pc, #120]	; (80065ec <TIM_OC2_SetConfig+0x114>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00f      	beq.n	8006598 <TIM_OC2_SetConfig+0xc0>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a1e      	ldr	r2, [pc, #120]	; (80065f4 <TIM_OC2_SetConfig+0x11c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00b      	beq.n	8006598 <TIM_OC2_SetConfig+0xc0>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a1d      	ldr	r2, [pc, #116]	; (80065f8 <TIM_OC2_SetConfig+0x120>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d007      	beq.n	8006598 <TIM_OC2_SetConfig+0xc0>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a1c      	ldr	r2, [pc, #112]	; (80065fc <TIM_OC2_SetConfig+0x124>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d003      	beq.n	8006598 <TIM_OC2_SetConfig+0xc0>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a17      	ldr	r2, [pc, #92]	; (80065f0 <TIM_OC2_SetConfig+0x118>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d113      	bne.n	80065c0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800659e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	621a      	str	r2, [r3, #32]
}
 80065da:	bf00      	nop
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40012c00 	.word	0x40012c00
 80065ec:	40013400 	.word	0x40013400
 80065f0:	40015000 	.word	0x40015000
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800

08006600 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800662e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800664c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a2b      	ldr	r2, [pc, #172]	; (800670c <TIM_OC3_SetConfig+0x10c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d007      	beq.n	8006672 <TIM_OC3_SetConfig+0x72>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a2a      	ldr	r2, [pc, #168]	; (8006710 <TIM_OC3_SetConfig+0x110>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d003      	beq.n	8006672 <TIM_OC3_SetConfig+0x72>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a29      	ldr	r2, [pc, #164]	; (8006714 <TIM_OC3_SetConfig+0x114>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d10d      	bne.n	800668e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800668c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a1e      	ldr	r2, [pc, #120]	; (800670c <TIM_OC3_SetConfig+0x10c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d013      	beq.n	80066be <TIM_OC3_SetConfig+0xbe>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a1d      	ldr	r2, [pc, #116]	; (8006710 <TIM_OC3_SetConfig+0x110>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00f      	beq.n	80066be <TIM_OC3_SetConfig+0xbe>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a1d      	ldr	r2, [pc, #116]	; (8006718 <TIM_OC3_SetConfig+0x118>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00b      	beq.n	80066be <TIM_OC3_SetConfig+0xbe>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a1c      	ldr	r2, [pc, #112]	; (800671c <TIM_OC3_SetConfig+0x11c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d007      	beq.n	80066be <TIM_OC3_SetConfig+0xbe>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <TIM_OC3_SetConfig+0x120>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d003      	beq.n	80066be <TIM_OC3_SetConfig+0xbe>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a16      	ldr	r2, [pc, #88]	; (8006714 <TIM_OC3_SetConfig+0x114>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d113      	bne.n	80066e6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	621a      	str	r2, [r3, #32]
}
 8006700:	bf00      	nop
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	40012c00 	.word	0x40012c00
 8006710:	40013400 	.word	0x40013400
 8006714:	40015000 	.word	0x40015000
 8006718:	40014000 	.word	0x40014000
 800671c:	40014400 	.word	0x40014400
 8006720:	40014800 	.word	0x40014800

08006724 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800675e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	021b      	lsls	r3, r3, #8
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	031b      	lsls	r3, r3, #12
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a2c      	ldr	r2, [pc, #176]	; (8006834 <TIM_OC4_SetConfig+0x110>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d007      	beq.n	8006798 <TIM_OC4_SetConfig+0x74>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a2b      	ldr	r2, [pc, #172]	; (8006838 <TIM_OC4_SetConfig+0x114>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d003      	beq.n	8006798 <TIM_OC4_SetConfig+0x74>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a2a      	ldr	r2, [pc, #168]	; (800683c <TIM_OC4_SetConfig+0x118>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d10d      	bne.n	80067b4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800679e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	031b      	lsls	r3, r3, #12
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a1f      	ldr	r2, [pc, #124]	; (8006834 <TIM_OC4_SetConfig+0x110>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d013      	beq.n	80067e4 <TIM_OC4_SetConfig+0xc0>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a1e      	ldr	r2, [pc, #120]	; (8006838 <TIM_OC4_SetConfig+0x114>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00f      	beq.n	80067e4 <TIM_OC4_SetConfig+0xc0>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a1e      	ldr	r2, [pc, #120]	; (8006840 <TIM_OC4_SetConfig+0x11c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d00b      	beq.n	80067e4 <TIM_OC4_SetConfig+0xc0>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <TIM_OC4_SetConfig+0x120>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d007      	beq.n	80067e4 <TIM_OC4_SetConfig+0xc0>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a1c      	ldr	r2, [pc, #112]	; (8006848 <TIM_OC4_SetConfig+0x124>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d003      	beq.n	80067e4 <TIM_OC4_SetConfig+0xc0>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a17      	ldr	r2, [pc, #92]	; (800683c <TIM_OC4_SetConfig+0x118>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d113      	bne.n	800680c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	019b      	lsls	r3, r3, #6
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	019b      	lsls	r3, r3, #6
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	621a      	str	r2, [r3, #32]
}
 8006826:	bf00      	nop
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40012c00 	.word	0x40012c00
 8006838:	40013400 	.word	0x40013400
 800683c:	40015000 	.word	0x40015000
 8006840:	40014000 	.word	0x40014000
 8006844:	40014400 	.word	0x40014400
 8006848:	40014800 	.word	0x40014800

0800684c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800687a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006890:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	041b      	lsls	r3, r3, #16
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4313      	orrs	r3, r2
 800689c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a19      	ldr	r2, [pc, #100]	; (8006908 <TIM_OC5_SetConfig+0xbc>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d013      	beq.n	80068ce <TIM_OC5_SetConfig+0x82>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a18      	ldr	r2, [pc, #96]	; (800690c <TIM_OC5_SetConfig+0xc0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d00f      	beq.n	80068ce <TIM_OC5_SetConfig+0x82>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a17      	ldr	r2, [pc, #92]	; (8006910 <TIM_OC5_SetConfig+0xc4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00b      	beq.n	80068ce <TIM_OC5_SetConfig+0x82>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a16      	ldr	r2, [pc, #88]	; (8006914 <TIM_OC5_SetConfig+0xc8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d007      	beq.n	80068ce <TIM_OC5_SetConfig+0x82>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a15      	ldr	r2, [pc, #84]	; (8006918 <TIM_OC5_SetConfig+0xcc>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d003      	beq.n	80068ce <TIM_OC5_SetConfig+0x82>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a14      	ldr	r2, [pc, #80]	; (800691c <TIM_OC5_SetConfig+0xd0>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d109      	bne.n	80068e2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	021b      	lsls	r3, r3, #8
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	4313      	orrs	r3, r2
 80068e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	621a      	str	r2, [r3, #32]
}
 80068fc:	bf00      	nop
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40013400 	.word	0x40013400
 8006910:	40014000 	.word	0x40014000
 8006914:	40014400 	.word	0x40014400
 8006918:	40014800 	.word	0x40014800
 800691c:	40015000 	.word	0x40015000

08006920 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800694e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	021b      	lsls	r3, r3, #8
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	051b      	lsls	r3, r3, #20
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a1a      	ldr	r2, [pc, #104]	; (80069e0 <TIM_OC6_SetConfig+0xc0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d013      	beq.n	80069a4 <TIM_OC6_SetConfig+0x84>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a19      	ldr	r2, [pc, #100]	; (80069e4 <TIM_OC6_SetConfig+0xc4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00f      	beq.n	80069a4 <TIM_OC6_SetConfig+0x84>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a18      	ldr	r2, [pc, #96]	; (80069e8 <TIM_OC6_SetConfig+0xc8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00b      	beq.n	80069a4 <TIM_OC6_SetConfig+0x84>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a17      	ldr	r2, [pc, #92]	; (80069ec <TIM_OC6_SetConfig+0xcc>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d007      	beq.n	80069a4 <TIM_OC6_SetConfig+0x84>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a16      	ldr	r2, [pc, #88]	; (80069f0 <TIM_OC6_SetConfig+0xd0>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d003      	beq.n	80069a4 <TIM_OC6_SetConfig+0x84>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a15      	ldr	r2, [pc, #84]	; (80069f4 <TIM_OC6_SetConfig+0xd4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d109      	bne.n	80069b8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	029b      	lsls	r3, r3, #10
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	621a      	str	r2, [r3, #32]
}
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40012c00 	.word	0x40012c00
 80069e4:	40013400 	.word	0x40013400
 80069e8:	40014000 	.word	0x40014000
 80069ec:	40014400 	.word	0x40014400
 80069f0:	40014800 	.word	0x40014800
 80069f4:	40015000 	.word	0x40015000

080069f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f023 0201 	bic.w	r2, r3, #1
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f023 030a 	bic.w	r3, r3, #10
 8006a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	621a      	str	r2, [r3, #32]
}
 8006a4a:	bf00      	nop
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b087      	sub	sp, #28
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f023 0210 	bic.w	r2, r3, #16
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	031b      	lsls	r3, r3, #12
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	621a      	str	r2, [r3, #32]
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b085      	sub	sp, #20
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f043 0307 	orr.w	r3, r3, #7
 8006adc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	609a      	str	r2, [r3, #8]
}
 8006ae4:	bf00      	nop
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	021a      	lsls	r2, r3, #8
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	431a      	orrs	r2, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	609a      	str	r2, [r3, #8]
}
 8006b24:	bf00      	nop
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f003 031f 	and.w	r3, r3, #31
 8006b42:	2201      	movs	r2, #1
 8006b44:	fa02 f303 	lsl.w	r3, r2, r3
 8006b48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a1a      	ldr	r2, [r3, #32]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	43db      	mvns	r3, r3
 8006b52:	401a      	ands	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1a      	ldr	r2, [r3, #32]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f003 031f 	and.w	r3, r3, #31
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	fa01 f303 	lsl.w	r3, r1, r3
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e074      	b.n	8006c7e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a34      	ldr	r2, [pc, #208]	; (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d009      	beq.n	8006bd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a33      	ldr	r2, [pc, #204]	; (8006c90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d004      	beq.n	8006bd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a31      	ldr	r2, [pc, #196]	; (8006c94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d108      	bne.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bd8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a21      	ldr	r2, [pc, #132]	; (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d022      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c14:	d01d      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a1f      	ldr	r2, [pc, #124]	; (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d018      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a1d      	ldr	r2, [pc, #116]	; (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d013      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a1c      	ldr	r2, [pc, #112]	; (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00e      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a15      	ldr	r2, [pc, #84]	; (8006c90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d009      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a18      	ldr	r2, [pc, #96]	; (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d004      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a11      	ldr	r2, [pc, #68]	; (8006c94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d10c      	bne.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	40012c00 	.word	0x40012c00
 8006c90:	40013400 	.word	0x40013400
 8006c94:	40015000 	.word	0x40015000
 8006c98:	40000400 	.word	0x40000400
 8006c9c:	40000800 	.word	0x40000800
 8006ca0:	40000c00 	.word	0x40000c00
 8006ca4:	40014000 	.word	0x40014000

08006ca8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e078      	b.n	8006db6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	041b      	lsls	r3, r3, #16
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a1c      	ldr	r2, [pc, #112]	; (8006dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d009      	beq.n	8006d6a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a1b      	ldr	r2, [pc, #108]	; (8006dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d004      	beq.n	8006d6a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a19      	ldr	r2, [pc, #100]	; (8006dcc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d11c      	bne.n	8006da4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	051b      	lsls	r3, r3, #20
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40012c00 	.word	0x40012c00
 8006dc8:	40013400 	.word	0x40013400
 8006dcc:	40015000 	.word	0x40015000

08006dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e042      	b.n	8006ef4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d106      	bne.n	8006e86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7fa fdb1 	bl	80019e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2224      	movs	r2, #36	; 0x24
 8006e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0201 	bic.w	r2, r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fe68 	bl	8007b7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fb69 	bl	8007584 <UART_SetConfig>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d101      	bne.n	8006ebc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e01b      	b.n	8006ef4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fee7 	bl	8007cc0 <UART_CheckIdleState>
 8006ef2:	4603      	mov	r3, r0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b0ba      	sub	sp, #232	; 0xe8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f26:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d11b      	bne.n	8006f70 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3c:	f003 0320 	and.w	r3, r3, #32
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d015      	beq.n	8006f70 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d105      	bne.n	8006f5c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d009      	beq.n	8006f70 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 82e3 	beq.w	800752c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	4798      	blx	r3
      }
      return;
 8006f6e:	e2dd      	b.n	800752c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 8123 	beq.w	80071c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006f7e:	4b8d      	ldr	r3, [pc, #564]	; (80071b4 <HAL_UART_IRQHandler+0x2b8>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d106      	bne.n	8006f94 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006f8a:	4b8b      	ldr	r3, [pc, #556]	; (80071b8 <HAL_UART_IRQHandler+0x2bc>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 8116 	beq.w	80071c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d011      	beq.n	8006fc4 <HAL_UART_IRQHandler+0xc8>
 8006fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fba:	f043 0201 	orr.w	r2, r3, #1
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc8:	f003 0302 	and.w	r3, r3, #2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d011      	beq.n	8006ff4 <HAL_UART_IRQHandler+0xf8>
 8006fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00b      	beq.n	8006ff4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fea:	f043 0204 	orr.w	r2, r3, #4
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d011      	beq.n	8007024 <HAL_UART_IRQHandler+0x128>
 8007000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00b      	beq.n	8007024 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2204      	movs	r2, #4
 8007012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701a:	f043 0202 	orr.w	r2, r3, #2
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007028:	f003 0308 	and.w	r3, r3, #8
 800702c:	2b00      	cmp	r3, #0
 800702e:	d017      	beq.n	8007060 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	2b00      	cmp	r3, #0
 800703a:	d105      	bne.n	8007048 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800703c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007040:	4b5c      	ldr	r3, [pc, #368]	; (80071b4 <HAL_UART_IRQHandler+0x2b8>)
 8007042:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00b      	beq.n	8007060 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2208      	movs	r2, #8
 800704e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007056:	f043 0208 	orr.w	r2, r3, #8
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007068:	2b00      	cmp	r3, #0
 800706a:	d012      	beq.n	8007092 <HAL_UART_IRQHandler+0x196>
 800706c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00c      	beq.n	8007092 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007080:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007088:	f043 0220 	orr.w	r2, r3, #32
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 8249 	beq.w	8007530 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800709e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d013      	beq.n	80070d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d105      	bne.n	80070c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80070b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d007      	beq.n	80070d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e6:	2b40      	cmp	r3, #64	; 0x40
 80070e8:	d005      	beq.n	80070f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d054      	beq.n	80071a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fef9 	bl	8007eee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007106:	2b40      	cmp	r3, #64	; 0x40
 8007108:	d146      	bne.n	8007198 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3308      	adds	r3, #8
 8007110:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007120:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3308      	adds	r3, #8
 8007132:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007136:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800713a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007142:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007146:	e841 2300 	strex	r3, r2, [r1]
 800714a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800714e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1d9      	bne.n	800710a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800715c:	2b00      	cmp	r3, #0
 800715e:	d017      	beq.n	8007190 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007166:	4a15      	ldr	r2, [pc, #84]	; (80071bc <HAL_UART_IRQHandler+0x2c0>)
 8007168:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007170:	4618      	mov	r0, r3
 8007172:	f7fc fd2b 	bl	8003bcc <HAL_DMA_Abort_IT>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d019      	beq.n	80071b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800718a:	4610      	mov	r0, r2
 800718c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800718e:	e00f      	b.n	80071b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f9e1 	bl	8007558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007196:	e00b      	b.n	80071b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f9dd 	bl	8007558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800719e:	e007      	b.n	80071b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f9d9 	bl	8007558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80071ae:	e1bf      	b.n	8007530 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b0:	bf00      	nop
    return;
 80071b2:	e1bd      	b.n	8007530 <HAL_UART_IRQHandler+0x634>
 80071b4:	10000001 	.word	0x10000001
 80071b8:	04000120 	.word	0x04000120
 80071bc:	08007fbb 	.word	0x08007fbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	f040 8153 	bne.w	8007470 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80071ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ce:	f003 0310 	and.w	r3, r3, #16
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 814c 	beq.w	8007470 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 8145 	beq.w	8007470 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2210      	movs	r2, #16
 80071ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f8:	2b40      	cmp	r3, #64	; 0x40
 80071fa:	f040 80bb 	bne.w	8007374 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800720c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 818f 	beq.w	8007534 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800721c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007220:	429a      	cmp	r2, r3
 8007222:	f080 8187 	bcs.w	8007534 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800722c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b00      	cmp	r3, #0
 8007240:	f040 8087 	bne.w	8007352 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007250:	e853 3f00 	ldrex	r3, [r3]
 8007254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007258:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800725c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	461a      	mov	r2, r3
 800726a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800726e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007272:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800727a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800727e:	e841 2300 	strex	r3, r2, [r1]
 8007282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1da      	bne.n	8007244 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800729e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072a0:	f023 0301 	bic.w	r3, r3, #1
 80072a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3308      	adds	r3, #8
 80072ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e1      	bne.n	800728e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3308      	adds	r3, #8
 80072d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072d4:	e853 3f00 	ldrex	r3, [r3]
 80072d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3308      	adds	r3, #8
 80072ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80072fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1e3      	bne.n	80072ca <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2220      	movs	r2, #32
 8007306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800731e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007320:	f023 0310 	bic.w	r3, r3, #16
 8007324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	461a      	mov	r2, r3
 800732e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007332:	65bb      	str	r3, [r7, #88]	; 0x58
 8007334:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e4      	bne.n	8007310 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800734c:	4618      	mov	r0, r3
 800734e:	f7fc fbe4 	bl	8003b1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007364:	b29b      	uxth	r3, r3
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	b29b      	uxth	r3, r3
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f8fd 	bl	800756c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007372:	e0df      	b.n	8007534 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007380:	b29b      	uxth	r3, r3
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800738e:	b29b      	uxth	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 80d1 	beq.w	8007538 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007396:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 80cc 	beq.w	8007538 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	461a      	mov	r2, r3
 80073be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073c2:	647b      	str	r3, [r7, #68]	; 0x44
 80073c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e4      	bne.n	80073a0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3308      	adds	r3, #8
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	623b      	str	r3, [r7, #32]
   return(result);
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073ec:	f023 0301 	bic.w	r3, r3, #1
 80073f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3308      	adds	r3, #8
 80073fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80073fe:	633a      	str	r2, [r7, #48]	; 0x30
 8007400:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e1      	bne.n	80073d6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	60fb      	str	r3, [r7, #12]
   return(result);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0310 	bic.w	r3, r3, #16
 800743a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007448:	61fb      	str	r3, [r7, #28]
 800744a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	69b9      	ldr	r1, [r7, #24]
 800744e:	69fa      	ldr	r2, [r7, #28]
 8007450:	e841 2300 	strex	r3, r2, [r1]
 8007454:	617b      	str	r3, [r7, #20]
   return(result);
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e4      	bne.n	8007426 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007462:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f87f 	bl	800756c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800746e:	e063      	b.n	8007538 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00e      	beq.n	800749a <HAL_UART_IRQHandler+0x59e>
 800747c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d008      	beq.n	800749a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007490:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fe3b 	bl	800810e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007498:	e051      	b.n	800753e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800749a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d014      	beq.n	80074d0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80074a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d105      	bne.n	80074be <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80074b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d008      	beq.n	80074d0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d03a      	beq.n	800753c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	4798      	blx	r3
    }
    return;
 80074ce:	e035      	b.n	800753c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d009      	beq.n	80074f0 <HAL_UART_IRQHandler+0x5f4>
 80074dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fd7c 	bl	8007fe6 <UART_EndTransmit_IT>
    return;
 80074ee:	e026      	b.n	800753e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80074f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d009      	beq.n	8007510 <HAL_UART_IRQHandler+0x614>
 80074fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007500:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d003      	beq.n	8007510 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fe14 	bl	8008136 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800750e:	e016      	b.n	800753e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d010      	beq.n	800753e <HAL_UART_IRQHandler+0x642>
 800751c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007520:	2b00      	cmp	r3, #0
 8007522:	da0c      	bge.n	800753e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fdfc 	bl	8008122 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800752a:	e008      	b.n	800753e <HAL_UART_IRQHandler+0x642>
      return;
 800752c:	bf00      	nop
 800752e:	e006      	b.n	800753e <HAL_UART_IRQHandler+0x642>
    return;
 8007530:	bf00      	nop
 8007532:	e004      	b.n	800753e <HAL_UART_IRQHandler+0x642>
      return;
 8007534:	bf00      	nop
 8007536:	e002      	b.n	800753e <HAL_UART_IRQHandler+0x642>
      return;
 8007538:	bf00      	nop
 800753a:	e000      	b.n	800753e <HAL_UART_IRQHandler+0x642>
    return;
 800753c:	bf00      	nop
  }
}
 800753e:	37e8      	adds	r7, #232	; 0xe8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007588:	b08c      	sub	sp, #48	; 0x30
 800758a:	af00      	add	r7, sp, #0
 800758c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	431a      	orrs	r2, r3
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	4baa      	ldr	r3, [pc, #680]	; (800785c <UART_SetConfig+0x2d8>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	6812      	ldr	r2, [r2, #0]
 80075ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075bc:	430b      	orrs	r3, r1
 80075be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a9f      	ldr	r2, [pc, #636]	; (8007860 <UART_SetConfig+0x2dc>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d004      	beq.n	80075f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ec:	4313      	orrs	r3, r2
 80075ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80075fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007604:	430b      	orrs	r3, r1
 8007606:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760e:	f023 010f 	bic.w	r1, r3, #15
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a90      	ldr	r2, [pc, #576]	; (8007864 <UART_SetConfig+0x2e0>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d125      	bne.n	8007674 <UART_SetConfig+0xf0>
 8007628:	4b8f      	ldr	r3, [pc, #572]	; (8007868 <UART_SetConfig+0x2e4>)
 800762a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	2b03      	cmp	r3, #3
 8007634:	d81a      	bhi.n	800766c <UART_SetConfig+0xe8>
 8007636:	a201      	add	r2, pc, #4	; (adr r2, 800763c <UART_SetConfig+0xb8>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	0800764d 	.word	0x0800764d
 8007640:	0800765d 	.word	0x0800765d
 8007644:	08007655 	.word	0x08007655
 8007648:	08007665 	.word	0x08007665
 800764c:	2301      	movs	r3, #1
 800764e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007652:	e116      	b.n	8007882 <UART_SetConfig+0x2fe>
 8007654:	2302      	movs	r3, #2
 8007656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800765a:	e112      	b.n	8007882 <UART_SetConfig+0x2fe>
 800765c:	2304      	movs	r3, #4
 800765e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007662:	e10e      	b.n	8007882 <UART_SetConfig+0x2fe>
 8007664:	2308      	movs	r3, #8
 8007666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800766a:	e10a      	b.n	8007882 <UART_SetConfig+0x2fe>
 800766c:	2310      	movs	r3, #16
 800766e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007672:	e106      	b.n	8007882 <UART_SetConfig+0x2fe>
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a7c      	ldr	r2, [pc, #496]	; (800786c <UART_SetConfig+0x2e8>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d138      	bne.n	80076f0 <UART_SetConfig+0x16c>
 800767e:	4b7a      	ldr	r3, [pc, #488]	; (8007868 <UART_SetConfig+0x2e4>)
 8007680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007684:	f003 030c 	and.w	r3, r3, #12
 8007688:	2b0c      	cmp	r3, #12
 800768a:	d82d      	bhi.n	80076e8 <UART_SetConfig+0x164>
 800768c:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <UART_SetConfig+0x110>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	080076c9 	.word	0x080076c9
 8007698:	080076e9 	.word	0x080076e9
 800769c:	080076e9 	.word	0x080076e9
 80076a0:	080076e9 	.word	0x080076e9
 80076a4:	080076d9 	.word	0x080076d9
 80076a8:	080076e9 	.word	0x080076e9
 80076ac:	080076e9 	.word	0x080076e9
 80076b0:	080076e9 	.word	0x080076e9
 80076b4:	080076d1 	.word	0x080076d1
 80076b8:	080076e9 	.word	0x080076e9
 80076bc:	080076e9 	.word	0x080076e9
 80076c0:	080076e9 	.word	0x080076e9
 80076c4:	080076e1 	.word	0x080076e1
 80076c8:	2300      	movs	r3, #0
 80076ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ce:	e0d8      	b.n	8007882 <UART_SetConfig+0x2fe>
 80076d0:	2302      	movs	r3, #2
 80076d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076d6:	e0d4      	b.n	8007882 <UART_SetConfig+0x2fe>
 80076d8:	2304      	movs	r3, #4
 80076da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076de:	e0d0      	b.n	8007882 <UART_SetConfig+0x2fe>
 80076e0:	2308      	movs	r3, #8
 80076e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076e6:	e0cc      	b.n	8007882 <UART_SetConfig+0x2fe>
 80076e8:	2310      	movs	r3, #16
 80076ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ee:	e0c8      	b.n	8007882 <UART_SetConfig+0x2fe>
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a5e      	ldr	r2, [pc, #376]	; (8007870 <UART_SetConfig+0x2ec>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d125      	bne.n	8007746 <UART_SetConfig+0x1c2>
 80076fa:	4b5b      	ldr	r3, [pc, #364]	; (8007868 <UART_SetConfig+0x2e4>)
 80076fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007700:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007704:	2b30      	cmp	r3, #48	; 0x30
 8007706:	d016      	beq.n	8007736 <UART_SetConfig+0x1b2>
 8007708:	2b30      	cmp	r3, #48	; 0x30
 800770a:	d818      	bhi.n	800773e <UART_SetConfig+0x1ba>
 800770c:	2b20      	cmp	r3, #32
 800770e:	d00a      	beq.n	8007726 <UART_SetConfig+0x1a2>
 8007710:	2b20      	cmp	r3, #32
 8007712:	d814      	bhi.n	800773e <UART_SetConfig+0x1ba>
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <UART_SetConfig+0x19a>
 8007718:	2b10      	cmp	r3, #16
 800771a:	d008      	beq.n	800772e <UART_SetConfig+0x1aa>
 800771c:	e00f      	b.n	800773e <UART_SetConfig+0x1ba>
 800771e:	2300      	movs	r3, #0
 8007720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007724:	e0ad      	b.n	8007882 <UART_SetConfig+0x2fe>
 8007726:	2302      	movs	r3, #2
 8007728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800772c:	e0a9      	b.n	8007882 <UART_SetConfig+0x2fe>
 800772e:	2304      	movs	r3, #4
 8007730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007734:	e0a5      	b.n	8007882 <UART_SetConfig+0x2fe>
 8007736:	2308      	movs	r3, #8
 8007738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800773c:	e0a1      	b.n	8007882 <UART_SetConfig+0x2fe>
 800773e:	2310      	movs	r3, #16
 8007740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007744:	e09d      	b.n	8007882 <UART_SetConfig+0x2fe>
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a4a      	ldr	r2, [pc, #296]	; (8007874 <UART_SetConfig+0x2f0>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d125      	bne.n	800779c <UART_SetConfig+0x218>
 8007750:	4b45      	ldr	r3, [pc, #276]	; (8007868 <UART_SetConfig+0x2e4>)
 8007752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007756:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800775a:	2bc0      	cmp	r3, #192	; 0xc0
 800775c:	d016      	beq.n	800778c <UART_SetConfig+0x208>
 800775e:	2bc0      	cmp	r3, #192	; 0xc0
 8007760:	d818      	bhi.n	8007794 <UART_SetConfig+0x210>
 8007762:	2b80      	cmp	r3, #128	; 0x80
 8007764:	d00a      	beq.n	800777c <UART_SetConfig+0x1f8>
 8007766:	2b80      	cmp	r3, #128	; 0x80
 8007768:	d814      	bhi.n	8007794 <UART_SetConfig+0x210>
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <UART_SetConfig+0x1f0>
 800776e:	2b40      	cmp	r3, #64	; 0x40
 8007770:	d008      	beq.n	8007784 <UART_SetConfig+0x200>
 8007772:	e00f      	b.n	8007794 <UART_SetConfig+0x210>
 8007774:	2300      	movs	r3, #0
 8007776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800777a:	e082      	b.n	8007882 <UART_SetConfig+0x2fe>
 800777c:	2302      	movs	r3, #2
 800777e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007782:	e07e      	b.n	8007882 <UART_SetConfig+0x2fe>
 8007784:	2304      	movs	r3, #4
 8007786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800778a:	e07a      	b.n	8007882 <UART_SetConfig+0x2fe>
 800778c:	2308      	movs	r3, #8
 800778e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007792:	e076      	b.n	8007882 <UART_SetConfig+0x2fe>
 8007794:	2310      	movs	r3, #16
 8007796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800779a:	e072      	b.n	8007882 <UART_SetConfig+0x2fe>
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a35      	ldr	r2, [pc, #212]	; (8007878 <UART_SetConfig+0x2f4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d12a      	bne.n	80077fc <UART_SetConfig+0x278>
 80077a6:	4b30      	ldr	r3, [pc, #192]	; (8007868 <UART_SetConfig+0x2e4>)
 80077a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077b4:	d01a      	beq.n	80077ec <UART_SetConfig+0x268>
 80077b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077ba:	d81b      	bhi.n	80077f4 <UART_SetConfig+0x270>
 80077bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077c0:	d00c      	beq.n	80077dc <UART_SetConfig+0x258>
 80077c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077c6:	d815      	bhi.n	80077f4 <UART_SetConfig+0x270>
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d003      	beq.n	80077d4 <UART_SetConfig+0x250>
 80077cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077d0:	d008      	beq.n	80077e4 <UART_SetConfig+0x260>
 80077d2:	e00f      	b.n	80077f4 <UART_SetConfig+0x270>
 80077d4:	2300      	movs	r3, #0
 80077d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077da:	e052      	b.n	8007882 <UART_SetConfig+0x2fe>
 80077dc:	2302      	movs	r3, #2
 80077de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077e2:	e04e      	b.n	8007882 <UART_SetConfig+0x2fe>
 80077e4:	2304      	movs	r3, #4
 80077e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077ea:	e04a      	b.n	8007882 <UART_SetConfig+0x2fe>
 80077ec:	2308      	movs	r3, #8
 80077ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077f2:	e046      	b.n	8007882 <UART_SetConfig+0x2fe>
 80077f4:	2310      	movs	r3, #16
 80077f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077fa:	e042      	b.n	8007882 <UART_SetConfig+0x2fe>
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a17      	ldr	r2, [pc, #92]	; (8007860 <UART_SetConfig+0x2dc>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d13a      	bne.n	800787c <UART_SetConfig+0x2f8>
 8007806:	4b18      	ldr	r3, [pc, #96]	; (8007868 <UART_SetConfig+0x2e4>)
 8007808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800780c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007810:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007814:	d01a      	beq.n	800784c <UART_SetConfig+0x2c8>
 8007816:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800781a:	d81b      	bhi.n	8007854 <UART_SetConfig+0x2d0>
 800781c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007820:	d00c      	beq.n	800783c <UART_SetConfig+0x2b8>
 8007822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007826:	d815      	bhi.n	8007854 <UART_SetConfig+0x2d0>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <UART_SetConfig+0x2b0>
 800782c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007830:	d008      	beq.n	8007844 <UART_SetConfig+0x2c0>
 8007832:	e00f      	b.n	8007854 <UART_SetConfig+0x2d0>
 8007834:	2300      	movs	r3, #0
 8007836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800783a:	e022      	b.n	8007882 <UART_SetConfig+0x2fe>
 800783c:	2302      	movs	r3, #2
 800783e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007842:	e01e      	b.n	8007882 <UART_SetConfig+0x2fe>
 8007844:	2304      	movs	r3, #4
 8007846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800784a:	e01a      	b.n	8007882 <UART_SetConfig+0x2fe>
 800784c:	2308      	movs	r3, #8
 800784e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007852:	e016      	b.n	8007882 <UART_SetConfig+0x2fe>
 8007854:	2310      	movs	r3, #16
 8007856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800785a:	e012      	b.n	8007882 <UART_SetConfig+0x2fe>
 800785c:	cfff69f3 	.word	0xcfff69f3
 8007860:	40008000 	.word	0x40008000
 8007864:	40013800 	.word	0x40013800
 8007868:	40021000 	.word	0x40021000
 800786c:	40004400 	.word	0x40004400
 8007870:	40004800 	.word	0x40004800
 8007874:	40004c00 	.word	0x40004c00
 8007878:	40005000 	.word	0x40005000
 800787c:	2310      	movs	r3, #16
 800787e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4aae      	ldr	r2, [pc, #696]	; (8007b40 <UART_SetConfig+0x5bc>)
 8007888:	4293      	cmp	r3, r2
 800788a:	f040 8097 	bne.w	80079bc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800788e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007892:	2b08      	cmp	r3, #8
 8007894:	d823      	bhi.n	80078de <UART_SetConfig+0x35a>
 8007896:	a201      	add	r2, pc, #4	; (adr r2, 800789c <UART_SetConfig+0x318>)
 8007898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789c:	080078c1 	.word	0x080078c1
 80078a0:	080078df 	.word	0x080078df
 80078a4:	080078c9 	.word	0x080078c9
 80078a8:	080078df 	.word	0x080078df
 80078ac:	080078cf 	.word	0x080078cf
 80078b0:	080078df 	.word	0x080078df
 80078b4:	080078df 	.word	0x080078df
 80078b8:	080078df 	.word	0x080078df
 80078bc:	080078d7 	.word	0x080078d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078c0:	f7fd fa68 	bl	8004d94 <HAL_RCC_GetPCLK1Freq>
 80078c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078c6:	e010      	b.n	80078ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078c8:	4b9e      	ldr	r3, [pc, #632]	; (8007b44 <UART_SetConfig+0x5c0>)
 80078ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078cc:	e00d      	b.n	80078ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ce:	f7fd f9f3 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 80078d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078d4:	e009      	b.n	80078ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078dc:	e005      	b.n	80078ea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80078de:	2300      	movs	r3, #0
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80078e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 8130 	beq.w	8007b52 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f6:	4a94      	ldr	r2, [pc, #592]	; (8007b48 <UART_SetConfig+0x5c4>)
 80078f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078fc:	461a      	mov	r2, r3
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	fbb3 f3f2 	udiv	r3, r3, r2
 8007904:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	4613      	mov	r3, r2
 800790c:	005b      	lsls	r3, r3, #1
 800790e:	4413      	add	r3, r2
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	429a      	cmp	r2, r3
 8007914:	d305      	bcc.n	8007922 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	429a      	cmp	r2, r3
 8007920:	d903      	bls.n	800792a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007928:	e113      	b.n	8007b52 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	2200      	movs	r2, #0
 800792e:	60bb      	str	r3, [r7, #8]
 8007930:	60fa      	str	r2, [r7, #12]
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	4a84      	ldr	r2, [pc, #528]	; (8007b48 <UART_SetConfig+0x5c4>)
 8007938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800793c:	b29b      	uxth	r3, r3
 800793e:	2200      	movs	r2, #0
 8007940:	603b      	str	r3, [r7, #0]
 8007942:	607a      	str	r2, [r7, #4]
 8007944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007948:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800794c:	f7f9 f882 	bl	8000a54 <__aeabi_uldivmod>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4610      	mov	r0, r2
 8007956:	4619      	mov	r1, r3
 8007958:	f04f 0200 	mov.w	r2, #0
 800795c:	f04f 0300 	mov.w	r3, #0
 8007960:	020b      	lsls	r3, r1, #8
 8007962:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007966:	0202      	lsls	r2, r0, #8
 8007968:	6979      	ldr	r1, [r7, #20]
 800796a:	6849      	ldr	r1, [r1, #4]
 800796c:	0849      	lsrs	r1, r1, #1
 800796e:	2000      	movs	r0, #0
 8007970:	460c      	mov	r4, r1
 8007972:	4605      	mov	r5, r0
 8007974:	eb12 0804 	adds.w	r8, r2, r4
 8007978:	eb43 0905 	adc.w	r9, r3, r5
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	469a      	mov	sl, r3
 8007984:	4693      	mov	fp, r2
 8007986:	4652      	mov	r2, sl
 8007988:	465b      	mov	r3, fp
 800798a:	4640      	mov	r0, r8
 800798c:	4649      	mov	r1, r9
 800798e:	f7f9 f861 	bl	8000a54 <__aeabi_uldivmod>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	4613      	mov	r3, r2
 8007998:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079a0:	d308      	bcc.n	80079b4 <UART_SetConfig+0x430>
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079a8:	d204      	bcs.n	80079b4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6a3a      	ldr	r2, [r7, #32]
 80079b0:	60da      	str	r2, [r3, #12]
 80079b2:	e0ce      	b.n	8007b52 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079ba:	e0ca      	b.n	8007b52 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079c4:	d166      	bne.n	8007a94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80079c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079ca:	2b08      	cmp	r3, #8
 80079cc:	d827      	bhi.n	8007a1e <UART_SetConfig+0x49a>
 80079ce:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <UART_SetConfig+0x450>)
 80079d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d4:	080079f9 	.word	0x080079f9
 80079d8:	08007a01 	.word	0x08007a01
 80079dc:	08007a09 	.word	0x08007a09
 80079e0:	08007a1f 	.word	0x08007a1f
 80079e4:	08007a0f 	.word	0x08007a0f
 80079e8:	08007a1f 	.word	0x08007a1f
 80079ec:	08007a1f 	.word	0x08007a1f
 80079f0:	08007a1f 	.word	0x08007a1f
 80079f4:	08007a17 	.word	0x08007a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f8:	f7fd f9cc 	bl	8004d94 <HAL_RCC_GetPCLK1Freq>
 80079fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079fe:	e014      	b.n	8007a2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a00:	f7fd f9de 	bl	8004dc0 <HAL_RCC_GetPCLK2Freq>
 8007a04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a06:	e010      	b.n	8007a2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a08:	4b4e      	ldr	r3, [pc, #312]	; (8007b44 <UART_SetConfig+0x5c0>)
 8007a0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a0c:	e00d      	b.n	8007a2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a0e:	f7fd f953 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8007a12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a14:	e009      	b.n	8007a2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a1c:	e005      	b.n	8007a2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007a28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 8090 	beq.w	8007b52 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	4a44      	ldr	r2, [pc, #272]	; (8007b48 <UART_SetConfig+0x5c4>)
 8007a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a44:	005a      	lsls	r2, r3, #1
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	085b      	lsrs	r3, r3, #1
 8007a4c:	441a      	add	r2, r3
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	2b0f      	cmp	r3, #15
 8007a5c:	d916      	bls.n	8007a8c <UART_SetConfig+0x508>
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a64:	d212      	bcs.n	8007a8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	f023 030f 	bic.w	r3, r3, #15
 8007a6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	085b      	lsrs	r3, r3, #1
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	8bfb      	ldrh	r3, [r7, #30]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	8bfa      	ldrh	r2, [r7, #30]
 8007a88:	60da      	str	r2, [r3, #12]
 8007a8a:	e062      	b.n	8007b52 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007a92:	e05e      	b.n	8007b52 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d828      	bhi.n	8007aee <UART_SetConfig+0x56a>
 8007a9c:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <UART_SetConfig+0x520>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007ac9 	.word	0x08007ac9
 8007aa8:	08007ad1 	.word	0x08007ad1
 8007aac:	08007ad9 	.word	0x08007ad9
 8007ab0:	08007aef 	.word	0x08007aef
 8007ab4:	08007adf 	.word	0x08007adf
 8007ab8:	08007aef 	.word	0x08007aef
 8007abc:	08007aef 	.word	0x08007aef
 8007ac0:	08007aef 	.word	0x08007aef
 8007ac4:	08007ae7 	.word	0x08007ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ac8:	f7fd f964 	bl	8004d94 <HAL_RCC_GetPCLK1Freq>
 8007acc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ace:	e014      	b.n	8007afa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ad0:	f7fd f976 	bl	8004dc0 <HAL_RCC_GetPCLK2Freq>
 8007ad4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ad6:	e010      	b.n	8007afa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ad8:	4b1a      	ldr	r3, [pc, #104]	; (8007b44 <UART_SetConfig+0x5c0>)
 8007ada:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007adc:	e00d      	b.n	8007afa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ade:	f7fd f8eb 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8007ae2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ae4:	e009      	b.n	8007afa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007aec:	e005      	b.n	8007afa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007af8:	bf00      	nop
    }

    if (pclk != 0U)
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d028      	beq.n	8007b52 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b04:	4a10      	ldr	r2, [pc, #64]	; (8007b48 <UART_SetConfig+0x5c4>)
 8007b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	085b      	lsrs	r3, r3, #1
 8007b18:	441a      	add	r2, r3
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	2b0f      	cmp	r3, #15
 8007b28:	d910      	bls.n	8007b4c <UART_SetConfig+0x5c8>
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b30:	d20c      	bcs.n	8007b4c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b32:	6a3b      	ldr	r3, [r7, #32]
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	60da      	str	r2, [r3, #12]
 8007b3c:	e009      	b.n	8007b52 <UART_SetConfig+0x5ce>
 8007b3e:	bf00      	nop
 8007b40:	40008000 	.word	0x40008000
 8007b44:	00f42400 	.word	0x00f42400
 8007b48:	080083d8 	.word	0x080083d8
      }
      else
      {
        ret = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2200      	movs	r2, #0
 8007b66:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007b6e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3730      	adds	r7, #48	; 0x30
 8007b76:	46bd      	mov	sp, r7
 8007b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b88:	f003 0308 	and.w	r3, r3, #8
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00a      	beq.n	8007ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00a      	beq.n	8007bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00a      	beq.n	8007bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bee:	f003 0304 	and.w	r3, r3, #4
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00a      	beq.n	8007c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c10:	f003 0310 	and.w	r3, r3, #16
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00a      	beq.n	8007c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c32:	f003 0320 	and.w	r3, r3, #32
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01a      	beq.n	8007c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c7a:	d10a      	bne.n	8007c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	605a      	str	r2, [r3, #4]
  }
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b098      	sub	sp, #96	; 0x60
 8007cc4:	af02      	add	r7, sp, #8
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cd0:	f7fa f980 	bl	8001fd4 <HAL_GetTick>
 8007cd4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0308 	and.w	r3, r3, #8
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d12f      	bne.n	8007d44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cec:	2200      	movs	r2, #0
 8007cee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f88e 	bl	8007e14 <UART_WaitOnFlagUntilTimeout>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d022      	beq.n	8007d44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d06:	e853 3f00 	ldrex	r3, [r3]
 8007d0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d12:	653b      	str	r3, [r7, #80]	; 0x50
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d24:	e841 2300 	strex	r3, r2, [r1]
 8007d28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e6      	bne.n	8007cfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2220      	movs	r2, #32
 8007d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e063      	b.n	8007e0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d149      	bne.n	8007de6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f857 	bl	8007e14 <UART_WaitOnFlagUntilTimeout>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d03c      	beq.n	8007de6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	623b      	str	r3, [r7, #32]
   return(result);
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d8a:	633b      	str	r3, [r7, #48]	; 0x30
 8007d8c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e6      	bne.n	8007d6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3308      	adds	r3, #8
 8007da4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	e853 3f00 	ldrex	r3, [r3]
 8007dac:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f023 0301 	bic.w	r3, r3, #1
 8007db4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3308      	adds	r3, #8
 8007dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dbe:	61fa      	str	r2, [r7, #28]
 8007dc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	69b9      	ldr	r1, [r7, #24]
 8007dc4:	69fa      	ldr	r2, [r7, #28]
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	617b      	str	r3, [r7, #20]
   return(result);
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e5      	bne.n	8007d9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e012      	b.n	8007e0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3758      	adds	r7, #88	; 0x58
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	603b      	str	r3, [r7, #0]
 8007e20:	4613      	mov	r3, r2
 8007e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e24:	e04f      	b.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2c:	d04b      	beq.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e2e:	f7fa f8d1 	bl	8001fd4 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d302      	bcc.n	8007e44 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e04e      	b.n	8007ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0304 	and.w	r3, r3, #4
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d037      	beq.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b80      	cmp	r3, #128	; 0x80
 8007e5a:	d034      	beq.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b40      	cmp	r3, #64	; 0x40
 8007e60:	d031      	beq.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	f003 0308 	and.w	r3, r3, #8
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d110      	bne.n	8007e92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2208      	movs	r2, #8
 8007e76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 f838 	bl	8007eee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2208      	movs	r2, #8
 8007e82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e029      	b.n	8007ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ea0:	d111      	bne.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007eaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 f81e 	bl	8007eee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e00f      	b.n	8007ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69da      	ldr	r2, [r3, #28]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4013      	ands	r3, r2
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	bf0c      	ite	eq
 8007ed6:	2301      	moveq	r3, #1
 8007ed8:	2300      	movne	r3, #0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	461a      	mov	r2, r3
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d0a0      	beq.n	8007e26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b095      	sub	sp, #84	; 0x54
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efe:	e853 3f00 	ldrex	r3, [r3]
 8007f02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	461a      	mov	r2, r3
 8007f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f14:	643b      	str	r3, [r7, #64]	; 0x40
 8007f16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e6      	bne.n	8007ef6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3308      	adds	r3, #8
 8007f2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	e853 3f00 	ldrex	r3, [r3]
 8007f36:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f3e:	f023 0301 	bic.w	r3, r3, #1
 8007f42:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3308      	adds	r3, #8
 8007f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f54:	e841 2300 	strex	r3, r2, [r1]
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e3      	bne.n	8007f28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d118      	bne.n	8007f9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	f023 0310 	bic.w	r3, r3, #16
 8007f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f86:	61bb      	str	r3, [r7, #24]
 8007f88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	6979      	ldr	r1, [r7, #20]
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	613b      	str	r3, [r7, #16]
   return(result);
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e6      	bne.n	8007f68 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007fae:	bf00      	nop
 8007fb0:	3754      	adds	r7, #84	; 0x54
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f7ff fabd 	bl	8007558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fde:	bf00      	nop
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b088      	sub	sp, #32
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	e853 3f00 	ldrex	r3, [r3]
 8007ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008002:	61fb      	str	r3, [r7, #28]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	461a      	mov	r2, r3
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	61bb      	str	r3, [r7, #24]
 800800e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008010:	6979      	ldr	r1, [r7, #20]
 8008012:	69ba      	ldr	r2, [r7, #24]
 8008014:	e841 2300 	strex	r3, r2, [r1]
 8008018:	613b      	str	r3, [r7, #16]
   return(result);
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1e6      	bne.n	8007fee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2220      	movs	r2, #32
 8008024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7ff fa88 	bl	8007544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008034:	bf00      	nop
 8008036:	3720      	adds	r7, #32
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e058      	b.n	8008106 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805a:	2b00      	cmp	r3, #0
 800805c:	d106      	bne.n	800806c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f7f9 fcbe 	bl	80019e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2224      	movs	r2, #36	; 0x24
 8008070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f022 0201 	bic.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f7ff fd75 	bl	8007b7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f7ff fa76 	bl	8007584 <UART_SetConfig>
 8008098:	4603      	mov	r3, r0
 800809a:	2b01      	cmp	r3, #1
 800809c:	d101      	bne.n	80080a2 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e031      	b.n	8008106 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080b0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	055b      	lsls	r3, r3, #21
 80080ca:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	041b      	lsls	r3, r3, #16
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 80080e0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	6812      	ldr	r2, [r2, #0]
 80080e8:	6979      	ldr	r1, [r7, #20]
 80080ea:	430b      	orrs	r3, r1
 80080ec:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f042 0201 	orr.w	r2, r2, #1
 80080fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f7ff fdde 	bl	8007cc0 <UART_CheckIdleState>
 8008104:	4603      	mov	r3, r0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800810e:	b480      	push	{r7}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800812a:	bf00      	nop
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800813e:	bf00      	nop
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800814a:	b480      	push	{r7}
 800814c:	b085      	sub	sp, #20
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008158:	2b01      	cmp	r3, #1
 800815a:	d101      	bne.n	8008160 <HAL_UARTEx_DisableFifoMode+0x16>
 800815c:	2302      	movs	r3, #2
 800815e:	e027      	b.n	80081b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2224      	movs	r2, #36	; 0x24
 800816c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f022 0201 	bic.w	r2, r2, #1
 8008186:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800818e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e02d      	b.n	8008230 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2224      	movs	r2, #36	; 0x24
 80081e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 0201 	bic.w	r2, r2, #1
 80081fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f84f 	bl	80082b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2220      	movs	r2, #32
 8008222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008248:	2b01      	cmp	r3, #1
 800824a:	d101      	bne.n	8008250 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800824c:	2302      	movs	r3, #2
 800824e:	e02d      	b.n	80082ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2224      	movs	r2, #36	; 0x24
 800825c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 0201 	bic.w	r2, r2, #1
 8008276:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f811 	bl	80082b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2220      	movs	r2, #32
 800829e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d108      	bne.n	80082d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082d4:	e031      	b.n	800833a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082d6:	2308      	movs	r3, #8
 80082d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082da:	2308      	movs	r3, #8
 80082dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	0e5b      	lsrs	r3, r3, #25
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	f003 0307 	and.w	r3, r3, #7
 80082ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	0f5b      	lsrs	r3, r3, #29
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	f003 0307 	and.w	r3, r3, #7
 80082fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
 8008300:	7b3a      	ldrb	r2, [r7, #12]
 8008302:	4911      	ldr	r1, [pc, #68]	; (8008348 <UARTEx_SetNbDataToProcess+0x94>)
 8008304:	5c8a      	ldrb	r2, [r1, r2]
 8008306:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800830a:	7b3a      	ldrb	r2, [r7, #12]
 800830c:	490f      	ldr	r1, [pc, #60]	; (800834c <UARTEx_SetNbDataToProcess+0x98>)
 800830e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008310:	fb93 f3f2 	sdiv	r3, r3, r2
 8008314:	b29a      	uxth	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	7b7a      	ldrb	r2, [r7, #13]
 8008320:	4909      	ldr	r1, [pc, #36]	; (8008348 <UARTEx_SetNbDataToProcess+0x94>)
 8008322:	5c8a      	ldrb	r2, [r1, r2]
 8008324:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008328:	7b7a      	ldrb	r2, [r7, #13]
 800832a:	4908      	ldr	r1, [pc, #32]	; (800834c <UARTEx_SetNbDataToProcess+0x98>)
 800832c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800832e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008332:	b29a      	uxth	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800833a:	bf00      	nop
 800833c:	3714      	adds	r7, #20
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	080083f0 	.word	0x080083f0
 800834c:	080083f8 	.word	0x080083f8

08008350 <memset>:
 8008350:	4402      	add	r2, r0
 8008352:	4603      	mov	r3, r0
 8008354:	4293      	cmp	r3, r2
 8008356:	d100      	bne.n	800835a <memset+0xa>
 8008358:	4770      	bx	lr
 800835a:	f803 1b01 	strb.w	r1, [r3], #1
 800835e:	e7f9      	b.n	8008354 <memset+0x4>

08008360 <__libc_init_array>:
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	4d0d      	ldr	r5, [pc, #52]	; (8008398 <__libc_init_array+0x38>)
 8008364:	4c0d      	ldr	r4, [pc, #52]	; (800839c <__libc_init_array+0x3c>)
 8008366:	1b64      	subs	r4, r4, r5
 8008368:	10a4      	asrs	r4, r4, #2
 800836a:	2600      	movs	r6, #0
 800836c:	42a6      	cmp	r6, r4
 800836e:	d109      	bne.n	8008384 <__libc_init_array+0x24>
 8008370:	4d0b      	ldr	r5, [pc, #44]	; (80083a0 <__libc_init_array+0x40>)
 8008372:	4c0c      	ldr	r4, [pc, #48]	; (80083a4 <__libc_init_array+0x44>)
 8008374:	f000 f818 	bl	80083a8 <_init>
 8008378:	1b64      	subs	r4, r4, r5
 800837a:	10a4      	asrs	r4, r4, #2
 800837c:	2600      	movs	r6, #0
 800837e:	42a6      	cmp	r6, r4
 8008380:	d105      	bne.n	800838e <__libc_init_array+0x2e>
 8008382:	bd70      	pop	{r4, r5, r6, pc}
 8008384:	f855 3b04 	ldr.w	r3, [r5], #4
 8008388:	4798      	blx	r3
 800838a:	3601      	adds	r6, #1
 800838c:	e7ee      	b.n	800836c <__libc_init_array+0xc>
 800838e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008392:	4798      	blx	r3
 8008394:	3601      	adds	r6, #1
 8008396:	e7f2      	b.n	800837e <__libc_init_array+0x1e>
 8008398:	08008408 	.word	0x08008408
 800839c:	08008408 	.word	0x08008408
 80083a0:	08008408 	.word	0x08008408
 80083a4:	0800840c 	.word	0x0800840c

080083a8 <_init>:
 80083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083aa:	bf00      	nop
 80083ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ae:	bc08      	pop	{r3}
 80083b0:	469e      	mov	lr, r3
 80083b2:	4770      	bx	lr

080083b4 <_fini>:
 80083b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b6:	bf00      	nop
 80083b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ba:	bc08      	pop	{r3}
 80083bc:	469e      	mov	lr, r3
 80083be:	4770      	bx	lr
