
Motor PID Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000833c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008514  08008514  00018514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008554  08008554  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08008554  08008554  00018554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800855c  0800855c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800855c  0800855c  0001855c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008560  08008560  00018560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08008564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ec  20000020  08008580  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  08008580  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018163  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aef  00000000  00000000  000381f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  0003ace8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001081  00000000  00000000  0003c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b63  00000000  00000000  0003d271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d5f  00000000  00000000  00065dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001139f5  00000000  00000000  0007db33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b6c  00000000  00000000  00191528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00197094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080084fc 	.word	0x080084fc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	080084fc 	.word	0x080084fc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f001 f95b 	bl	80017d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f884 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fb38 	bl	8000b94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 faf0 	bl	8000b08 <MX_DMA_Init>
  MX_TIM3_Init();
 8000528:	f000 f99e 	bl	8000868 <MX_TIM3_Init>
  MX_ADC1_Init();
 800052c:	f000 f8c8 	bl	80006c0 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000530:	f000 fa98 	bl	8000a64 <MX_TIM15_Init>
  MX_TIM5_Init();
 8000534:	f000 fa48 	bl	80009c8 <MX_TIM5_Init>
  MX_TIM4_Init();
 8000538:	f000 f9ec 	bl	8000914 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 800053c:	f000 f94a 	bl	80007d4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
    UARTDMAconfig();
 8000540:	f000 fdca 	bl	80010d8 <UARTDMAconfig>

//	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 4);
  HAL_ADC_Start_DMA(&hadc1,InputRead, 400); // DMA Read
 8000544:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000548:	492a      	ldr	r1, [pc, #168]	; (80005f4 <main+0xe0>)
 800054a:	482b      	ldr	r0, [pc, #172]	; (80005f8 <main+0xe4>)
 800054c:	f001 fdae 	bl	80020ac <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim15);
 8000550:	482a      	ldr	r0, [pc, #168]	; (80005fc <main+0xe8>)
 8000552:	f004 fed7 	bl	8005304 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5); // system time clock
 8000556:	482a      	ldr	r0, [pc, #168]	; (8000600 <main+0xec>)
 8000558:	f004 fe64 	bl	8005224 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim4);  //motor A2
 800055c:	4829      	ldr	r0, [pc, #164]	; (8000604 <main+0xf0>)
 800055e:	f004 fe61 	bl	8005224 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000562:	2100      	movs	r1, #0
 8000564:	4827      	ldr	r0, [pc, #156]	; (8000604 <main+0xf0>)
 8000566:	f004 ff9d 	bl	80054a4 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0); //for Check Timer
 800056a:	4b26      	ldr	r3, [pc, #152]	; (8000604 <main+0xf0>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2200      	movs	r2, #0
 8000570:	635a      	str	r2, [r3, #52]	; 0x34



  A0 = Kp + Ki + Kd;
 8000572:	4b25      	ldr	r3, [pc, #148]	; (8000608 <main+0xf4>)
 8000574:	ed93 7a00 	vldr	s14, [r3]
 8000578:	4b24      	ldr	r3, [pc, #144]	; (800060c <main+0xf8>)
 800057a:	edd3 7a00 	vldr	s15, [r3]
 800057e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000582:	4b23      	ldr	r3, [pc, #140]	; (8000610 <main+0xfc>)
 8000584:	edd3 7a00 	vldr	s15, [r3]
 8000588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800058c:	4b21      	ldr	r3, [pc, #132]	; (8000614 <main+0x100>)
 800058e:	edc3 7a00 	vstr	s15, [r3]
  A1 = -Kp - (2*Kd);
 8000592:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <main+0xf4>)
 8000594:	edd3 7a00 	vldr	s15, [r3]
 8000598:	eeb1 7a67 	vneg.f32	s14, s15
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <main+0xfc>)
 800059e:	edd3 7a00 	vldr	s15, [r3]
 80005a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80005a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005aa:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <main+0x104>)
 80005ac:	edc3 7a00 	vstr	s15, [r3]
  A2 = Kd;
 80005b0:	4b17      	ldr	r3, [pc, #92]	; (8000610 <main+0xfc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a19      	ldr	r2, [pc, #100]	; (800061c <main+0x108>)
 80005b6:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2101      	movs	r1, #1
 80005bc:	4818      	ldr	r0, [pc, #96]	; (8000620 <main+0x10c>)
 80005be:	f003 fd5f 	bl	8004080 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  test = __HAL_TIM_GET_COUNTER(&htim5);
	  Mode_LD2();
 80005c2:	f000 fdc9 	bl	8001158 <Mode_LD2>
	  		if (mode_status == 1) {
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <main+0x110>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d102      	bne.n	80005d4 <main+0xc0>
	  			motorControl();
 80005ce:	f000 fc59 	bl	8000e84 <motorControl>
 80005d2:	e00b      	b.n	80005ec <main+0xd8>
	  		} else if (mode_status == 2) {
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <main+0x110>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d007      	beq.n	80005ec <main+0xd8>

	  		} else if (mode_status == 3) {
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <main+0x110>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d103      	bne.n	80005ec <main+0xd8>
	  			motorControl();
 80005e4:	f000 fc4e 	bl	8000e84 <motorControl>
	  			Communication();
 80005e8:	f000 fc88 	bl	8000efc <Communication>
	  		}


	  updateInput();
 80005ec:	f000 fb88 	bl	8000d00 <updateInput>
	  Mode_LD2();
 80005f0:	e7e7      	b.n	80005c2 <main+0xae>
 80005f2:	bf00      	nop
 80005f4:	20000398 	.word	0x20000398
 80005f8:	2000003c 	.word	0x2000003c
 80005fc:	20000340 	.word	0x20000340
 8000600:	200002f4 	.word	0x200002f4
 8000604:	200002a8 	.word	0x200002a8
 8000608:	20000004 	.word	0x20000004
 800060c:	20000008 	.word	0x20000008
 8000610:	2000000c 	.word	0x2000000c
 8000614:	200006e8 	.word	0x200006e8
 8000618:	200006ec 	.word	0x200006ec
 800061c:	200006f0 	.word	0x200006f0
 8000620:	48000800 	.word	0x48000800
 8000624:	20000000 	.word	0x20000000

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	2238      	movs	r2, #56	; 0x38
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f007 ff34 	bl	80084a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800064a:	2000      	movs	r0, #0
 800064c:	f003 fd62 	bl	8004114 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065a:	2340      	movs	r3, #64	; 0x40
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000666:	2304      	movs	r3, #4
 8000668:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800066a:	2355      	movs	r3, #85	; 0x55
 800066c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0318 	add.w	r3, r7, #24
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fdfc 	bl	800427c <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800068a:	f000 fd9b 	bl	80011c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2303      	movs	r3, #3
 8000694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2104      	movs	r1, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 f8fa 	bl	80048a0 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006b2:	f000 fd87 	bl	80011c4 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08c      	sub	sp, #48	; 0x30
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2220      	movs	r2, #32
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f007 fee3 	bl	80084a4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006de:	4b3a      	ldr	r3, [pc, #232]	; (80007c8 <MX_ADC1_Init+0x108>)
 80006e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e6:	4b38      	ldr	r3, [pc, #224]	; (80007c8 <MX_ADC1_Init+0x108>)
 80006e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ee:	4b36      	ldr	r3, [pc, #216]	; (80007c8 <MX_ADC1_Init+0x108>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f4:	4b34      	ldr	r3, [pc, #208]	; (80007c8 <MX_ADC1_Init+0x108>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006fa:	4b33      	ldr	r3, [pc, #204]	; (80007c8 <MX_ADC1_Init+0x108>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000700:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <MX_ADC1_Init+0x108>)
 8000702:	2201      	movs	r2, #1
 8000704:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000706:	4b30      	ldr	r3, [pc, #192]	; (80007c8 <MX_ADC1_Init+0x108>)
 8000708:	2204      	movs	r2, #4
 800070a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800070c:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <MX_ADC1_Init+0x108>)
 800070e:	2200      	movs	r2, #0
 8000710:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000712:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <MX_ADC1_Init+0x108>)
 8000714:	2201      	movs	r2, #1
 8000716:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000718:	4b2b      	ldr	r3, [pc, #172]	; (80007c8 <MX_ADC1_Init+0x108>)
 800071a:	2202      	movs	r2, #2
 800071c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071e:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <MX_ADC1_Init+0x108>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8000726:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <MX_ADC1_Init+0x108>)
 8000728:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 800072c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <MX_ADC1_Init+0x108>)
 8000730:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000734:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000736:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <MX_ADC1_Init+0x108>)
 8000738:	2201      	movs	r2, #1
 800073a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073e:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <MX_ADC1_Init+0x108>)
 8000740:	2200      	movs	r2, #0
 8000742:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000744:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <MX_ADC1_Init+0x108>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074c:	481e      	ldr	r0, [pc, #120]	; (80007c8 <MX_ADC1_Init+0x108>)
 800074e:	f001 faf1 	bl	8001d34 <HAL_ADC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000758:	f000 fd34 	bl	80011c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000764:	4619      	mov	r1, r3
 8000766:	4818      	ldr	r0, [pc, #96]	; (80007c8 <MX_ADC1_Init+0x108>)
 8000768:	f002 fdbe 	bl	80032e8 <HAL_ADCEx_MultiModeConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000772:	f000 fd27 	bl	80011c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_ADC1_Init+0x10c>)
 8000778:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800077a:	2306      	movs	r3, #6
 800077c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800077e:	2307      	movs	r3, #7
 8000780:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000782:	237f      	movs	r3, #127	; 0x7f
 8000784:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000786:	2304      	movs	r3, #4
 8000788:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_ADC1_Init+0x108>)
 8000794:	f001 ffe6 	bl	8002764 <HAL_ADC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800079e:	f000 fd11 	bl	80011c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_ADC1_Init+0x110>)
 80007a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007a6:	230c      	movs	r3, #12
 80007a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4619      	mov	r1, r3
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <MX_ADC1_Init+0x108>)
 80007b0:	f001 ffd8 	bl	8002764 <HAL_ADC_ConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80007ba:	f000 fd03 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	3730      	adds	r7, #48	; 0x30
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000003c 	.word	0x2000003c
 80007cc:	04300002 	.word	0x04300002
 80007d0:	08600004 	.word	0x08600004

080007d4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 80007da:	4a22      	ldr	r2, [pc, #136]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 80007dc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000816:	4812      	ldr	r0, [pc, #72]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 8000818:	f006 f91a 	bl	8006a50 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 fccf 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	480d      	ldr	r0, [pc, #52]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 800082a:	f007 fd70 	bl	800830e <HAL_UARTEx_SetTxFifoThreshold>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000834:	f000 fcc6 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000838:	2100      	movs	r1, #0
 800083a:	4809      	ldr	r0, [pc, #36]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 800083c:	f007 fda5 	bl	800838a <HAL_UARTEx_SetRxFifoThreshold>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000846:	f000 fcbd 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 800084c:	f007 fd26 	bl	800829c <HAL_UARTEx_DisableFifoMode>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000856:	f000 fcb5 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000108 	.word	0x20000108
 8000864:	40008000 	.word	0x40008000

08000868 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	; 0x30
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2224      	movs	r2, #36	; 0x24
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f007 fe14 	bl	80084a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <MX_TIM3_Init+0xa4>)
 8000888:	4a21      	ldr	r2, [pc, #132]	; (8000910 <MX_TIM3_Init+0xa8>)
 800088a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <MX_TIM3_Init+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_TIM3_Init+0xa4>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000898:	4b1c      	ldr	r3, [pc, #112]	; (800090c <MX_TIM3_Init+0xa4>)
 800089a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800089e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_TIM3_Init+0xa4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <MX_TIM3_Init+0xa4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008ac:	2303      	movs	r3, #3
 80008ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008b4:	2301      	movs	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008c4:	2301      	movs	r3, #1
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4619      	mov	r1, r3
 80008d6:	480d      	ldr	r0, [pc, #52]	; (800090c <MX_TIM3_Init+0xa4>)
 80008d8:	f004 fef6 	bl	80056c8 <HAL_TIM_Encoder_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80008e2:	f000 fc6f 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	4619      	mov	r1, r3
 80008f2:	4806      	ldr	r0, [pc, #24]	; (800090c <MX_TIM3_Init+0xa4>)
 80008f4:	f005 ffd0 	bl	8006898 <HAL_TIMEx_MasterConfigSynchronization>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80008fe:	f000 fc61 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	3730      	adds	r7, #48	; 0x30
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000025c 	.word	0x2000025c
 8000910:	40000400 	.word	0x40000400

08000914 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000926:	463b      	mov	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
 8000934:	615a      	str	r2, [r3, #20]
 8000936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000938:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_TIM4_Init+0xac>)
 800093a:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <MX_TIM4_Init+0xb0>)
 800093c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 800093e:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <MX_TIM4_Init+0xac>)
 8000940:	22a9      	movs	r2, #169	; 0xa9
 8000942:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_TIM4_Init+0xac>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_TIM4_Init+0xac>)
 800094c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000950:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_TIM4_Init+0xac>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_TIM4_Init+0xac>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800095e:	4818      	ldr	r0, [pc, #96]	; (80009c0 <MX_TIM4_Init+0xac>)
 8000960:	f004 fd48 	bl	80053f4 <HAL_TIM_PWM_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800096a:	f000 fc2b 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4810      	ldr	r0, [pc, #64]	; (80009c0 <MX_TIM4_Init+0xac>)
 800097e:	f005 ff8b 	bl	8006898 <HAL_TIMEx_MasterConfigSynchronization>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000988:	f000 fc1c 	bl	80011c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098c:	2360      	movs	r3, #96	; 0x60
 800098e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	2200      	movs	r2, #0
 80009a0:	4619      	mov	r1, r3
 80009a2:	4807      	ldr	r0, [pc, #28]	; (80009c0 <MX_TIM4_Init+0xac>)
 80009a4:	f005 f886 	bl	8005ab4 <HAL_TIM_PWM_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80009ae:	f000 fc09 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009b2:	4803      	ldr	r0, [pc, #12]	; (80009c0 <MX_TIM4_Init+0xac>)
 80009b4:	f000 fe2c 	bl	8001610 <HAL_TIM_MspPostInit>

}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	; 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200002a8 	.word	0x200002a8
 80009c4:	40000800 	.word	0x40000800

080009c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009e6:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_TIM5_Init+0x94>)
 80009e8:	4a1d      	ldr	r2, [pc, #116]	; (8000a60 <MX_TIM5_Init+0x98>)
 80009ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_TIM5_Init+0x94>)
 80009ee:	22a9      	movs	r2, #169	; 0xa9
 80009f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_TIM5_Init+0x94>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_TIM5_Init+0x94>)
 80009fa:	f04f 32ff 	mov.w	r2, #4294967295
 80009fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_TIM5_Init+0x94>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_TIM5_Init+0x94>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a0c:	4813      	ldr	r0, [pc, #76]	; (8000a5c <MX_TIM5_Init+0x94>)
 8000a0e:	f004 fbb1 	bl	8005174 <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000a18:	f000 fbd4 	bl	80011c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a22:	f107 0310 	add.w	r3, r7, #16
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_TIM5_Init+0x94>)
 8000a2a:	f005 f957 	bl	8005cdc <HAL_TIM_ConfigClockSource>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000a34:	f000 fbc6 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_TIM5_Init+0x94>)
 8000a46:	f005 ff27 	bl	8006898 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000a50:	f000 fbb8 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3720      	adds	r7, #32
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200002f4 	.word	0x200002f4
 8000a60:	40000c00 	.word	0x40000c00

08000a64 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000a84:	4a1f      	ldr	r2, [pc, #124]	; (8000b04 <MX_TIM15_Init+0xa0>)
 8000a86:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 169;
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000a8a:	22a9      	movs	r2, #169	; 0xa9
 8000a8c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000a96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a9a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000aae:	4814      	ldr	r0, [pc, #80]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000ab0:	f004 fb60 	bl	8005174 <HAL_TIM_Base_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000aba:	f000 fb83 	bl	80011c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480d      	ldr	r0, [pc, #52]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000acc:	f005 f906 	bl	8005cdc <HAL_TIM_ConfigClockSource>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000ad6:	f000 fb75 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ada:	2320      	movs	r3, #32
 8000adc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <MX_TIM15_Init+0x9c>)
 8000ae8:	f005 fed6 	bl	8006898 <HAL_TIMEx_MasterConfigSynchronization>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000af2:	f000 fb67 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000340 	.word	0x20000340
 8000b04:	40014000 	.word	0x40014000

08000b08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b0e:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <MX_DMA_Init+0x88>)
 8000b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <MX_DMA_Init+0x88>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	6493      	str	r3, [r2, #72]	; 0x48
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <MX_DMA_Init+0x88>)
 8000b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_DMA_Init+0x88>)
 8000b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <MX_DMA_Init+0x88>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6493      	str	r3, [r2, #72]	; 0x48
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <MX_DMA_Init+0x88>)
 8000b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_DMA_Init+0x88>)
 8000b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <MX_DMA_Init+0x88>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6493      	str	r3, [r2, #72]	; 0x48
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_DMA_Init+0x88>)
 8000b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	200b      	movs	r0, #11
 8000b5c:	f002 fda7 	bl	80036ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b60:	200b      	movs	r0, #11
 8000b62:	f002 fdbe 	bl	80036e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	200c      	movs	r0, #12
 8000b6c:	f002 fd9f 	bl	80036ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b70:	200c      	movs	r0, #12
 8000b72:	f002 fdb6 	bl	80036e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2038      	movs	r0, #56	; 0x38
 8000b7c:	f002 fd97 	bl	80036ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000b80:	2038      	movs	r0, #56	; 0x38
 8000b82:	f002 fdae 	bl	80036e2 <HAL_NVIC_EnableIRQ>

}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	4b39      	ldr	r3, [pc, #228]	; (8000c90 <MX_GPIO_Init+0xfc>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a38      	ldr	r2, [pc, #224]	; (8000c90 <MX_GPIO_Init+0xfc>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b36      	ldr	r3, [pc, #216]	; (8000c90 <MX_GPIO_Init+0xfc>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc2:	4b33      	ldr	r3, [pc, #204]	; (8000c90 <MX_GPIO_Init+0xfc>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a32      	ldr	r2, [pc, #200]	; (8000c90 <MX_GPIO_Init+0xfc>)
 8000bc8:	f043 0320 	orr.w	r3, r3, #32
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b30      	ldr	r3, [pc, #192]	; (8000c90 <MX_GPIO_Init+0xfc>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0320 	and.w	r3, r3, #32
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <MX_GPIO_Init+0xfc>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	4a2c      	ldr	r2, [pc, #176]	; (8000c90 <MX_GPIO_Init+0xfc>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be6:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <MX_GPIO_Init+0xfc>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <MX_GPIO_Init+0xfc>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	4a26      	ldr	r2, [pc, #152]	; (8000c90 <MX_GPIO_Init+0xfc>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <MX_GPIO_Init+0xfc>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4821      	ldr	r0, [pc, #132]	; (8000c94 <MX_GPIO_Init+0x100>)
 8000c10:	f003 fa36 	bl	8004080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2120      	movs	r1, #32
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f003 fa30 	bl	8004080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4817      	ldr	r0, [pc, #92]	; (8000c94 <MX_GPIO_Init+0x100>)
 8000c38:	f003 f8a0 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4810      	ldr	r0, [pc, #64]	; (8000c94 <MX_GPIO_Init+0x100>)
 8000c54:	f003 f892 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c58:	2320      	movs	r3, #32
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c72:	f003 f883 	bl	8003d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2028      	movs	r0, #40	; 0x28
 8000c7c:	f002 fd17 	bl	80036ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c80:	2028      	movs	r0, #40	; 0x28
 8000c82:	f002 fd2e 	bl	80036e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	; 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000
 8000c94:	48000800 	.word	0x48000800

08000c98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c98:	b4b0      	push	{r4, r5, r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d108      	bne.n	8000cba <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cae:	1e54      	subs	r4, r2, #1
 8000cb0:	f143 0500 	adc.w	r5, r3, #0
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000cb6:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bcb0      	pop	{r4, r5, r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	200002f4 	.word	0x200002f4
 8000cc8:	20000390 	.word	0x20000390

08000ccc <micros>:

uint64_t micros()
{
 8000ccc:	b4b0      	push	{r4, r5, r7}
 8000cce:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <micros+0x2c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <micros+0x30>)
 8000cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce2:	1884      	adds	r4, r0, r2
 8000ce4:	eb41 0503 	adc.w	r5, r1, r3
 8000ce8:	4622      	mov	r2, r4
 8000cea:	462b      	mov	r3, r5
}
 8000cec:	4610      	mov	r0, r2
 8000cee:	4619      	mov	r1, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bcb0      	pop	{r4, r5, r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	200002f4 	.word	0x200002f4
 8000cfc:	20000390 	.word	0x20000390

08000d00 <updateInput>:

void updateInput()
{
 8000d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
	sumEncode = 0;
 8000d08:	4e55      	ldr	r6, [pc, #340]	; (8000e60 <updateInput+0x160>)
 8000d0a:	f04f 0200 	mov.w	r2, #0
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	e9c6 2300 	strd	r2, r3, [r6]
	sumTrimpot = 0;
 8000d16:	4e53      	ldr	r6, [pc, #332]	; (8000e64 <updateInput+0x164>)
 8000d18:	f04f 0200 	mov.w	r2, #0
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	e9c6 2300 	strd	r2, r3, [r6]
	for(int i = 0 ; i<200 ; i++ )
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	e029      	b.n	8000d7e <updateInput+0x7e>
	{
		sumEncode += InputRead[2*i];
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4a4e      	ldr	r2, [pc, #312]	; (8000e68 <updateInput+0x168>)
 8000d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	2200      	movs	r2, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4b48      	ldr	r3, [pc, #288]	; (8000e60 <updateInput+0x160>)
 8000d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d42:	eb10 0802 	adds.w	r8, r0, r2
 8000d46:	eb41 0903 	adc.w	r9, r1, r3
 8000d4a:	4b45      	ldr	r3, [pc, #276]	; (8000e60 <updateInput+0x160>)
 8000d4c:	e9c3 8900 	strd	r8, r9, [r3]
		sumTrimpot += InputRead[1 + (2*i)];
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	3301      	adds	r3, #1
 8000d56:	4a44      	ldr	r2, [pc, #272]	; (8000e68 <updateInput+0x168>)
 8000d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	2200      	movs	r2, #0
 8000d60:	461c      	mov	r4, r3
 8000d62:	4615      	mov	r5, r2
 8000d64:	4b3f      	ldr	r3, [pc, #252]	; (8000e64 <updateInput+0x164>)
 8000d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6a:	eb14 0a02 	adds.w	sl, r4, r2
 8000d6e:	eb45 0b03 	adc.w	fp, r5, r3
 8000d72:	4b3c      	ldr	r3, [pc, #240]	; (8000e64 <updateInput+0x164>)
 8000d74:	e9c3 ab00 	strd	sl, fp, [r3]
	for(int i = 0 ; i<200 ; i++ )
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2bc7      	cmp	r3, #199	; 0xc7
 8000d82:	ddd2      	ble.n	8000d2a <updateInput+0x2a>
	}
	avgEncode = sumEncode/200;
 8000d84:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <updateInput+0x160>)
 8000d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d8a:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	f7ff fa41 	bl	8000218 <__aeabi_uldivmod>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <updateInput+0x16c>)
 8000d9c:	601a      	str	r2, [r3, #0]
	avgTrimpot = sumTrimpot/200;
 8000d9e:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <updateInput+0x164>)
 8000da0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000da4:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	f7ff fa34 	bl	8000218 <__aeabi_uldivmod>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	b292      	uxth	r2, r2
 8000db6:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <updateInput+0x170>)
 8000db8:	801a      	strh	r2, [r3, #0]
	directError = avgTrimpot - avgEncode;
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <updateInput+0x170>)
 8000dbc:	881a      	ldrh	r2, [r3, #0]
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <updateInput+0x16c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	b21a      	sxth	r2, r3
 8000dca:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <updateInput+0x174>)
 8000dcc:	801a      	strh	r2, [r3, #0]

	if (directError > 0)
 8000dce:	4b29      	ldr	r3, [pc, #164]	; (8000e74 <updateInput+0x174>)
 8000dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	dd0a      	ble.n	8000dee <updateInput+0xee>
	{
		wrappedError = directError - 4096; // Moving backward with wrap-around
 8000dd8:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <updateInput+0x174>)
 8000dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	b21a      	sxth	r2, r3
 8000de8:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <updateInput+0x178>)
 8000dea:	801a      	strh	r2, [r3, #0]
 8000dec:	e009      	b.n	8000e02 <updateInput+0x102>
	}
	else
	{
		wrappedError = directError + 4096; // Moving forward with wrap-around
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <updateInput+0x174>)
 8000df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	b21a      	sxth	r2, r3
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <updateInput+0x178>)
 8000e00:	801a      	strh	r2, [r3, #0]
	}

	if (abs(directError) < abs(wrappedError))
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <updateInput+0x174>)
 8000e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bfb8      	it	lt
 8000e0c:	425b      	neglt	r3, r3
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <updateInput+0x178>)
 8000e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	bfb8      	it	lt
 8000e1a:	425b      	neglt	r3, r3
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d205      	bcs.n	8000e2e <updateInput+0x12e>
	{
		Error = directError;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <updateInput+0x174>)
 8000e24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <updateInput+0x17c>)
 8000e2a:	801a      	strh	r2, [r3, #0]
 8000e2c:	e004      	b.n	8000e38 <updateInput+0x138>
	}
	else
	{
		Error = wrappedError;
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <updateInput+0x178>)
 8000e30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <updateInput+0x17c>)
 8000e36:	801a      	strh	r2, [r3, #0]
	}

	if (Error < 0)
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <updateInput+0x17c>)
 8000e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	da03      	bge.n	8000e4a <updateInput+0x14a>
	{
		direction = 0; // Counter-clockwise / backward
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <updateInput+0x180>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	e002      	b.n	8000e50 <updateInput+0x150>
	}
	else
	{
		direction = 1; // Clockwise / forward
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <updateInput+0x180>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
	}

	PIDcalculate();
 8000e50:	f000 f8ac 	bl	8000fac <PIDcalculate>

//	PWM = arm_pid_f32(&PID, Error);
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e5e:	bf00      	nop
 8000e60:	200006b8 	.word	0x200006b8
 8000e64:	200006c0 	.word	0x200006c0
 8000e68:	20000398 	.word	0x20000398
 8000e6c:	200006c8 	.word	0x200006c8
 8000e70:	200006cc 	.word	0x200006cc
 8000e74:	200006de 	.word	0x200006de
 8000e78:	200006e4 	.word	0x200006e4
 8000e7c:	200006d8 	.word	0x200006d8
 8000e80:	200006e2 	.word	0x200006e2

08000e84 <motorControl>:

void motorControl()
{
 8000e84:	b598      	push	{r3, r4, r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	static uint16_t motorTime = 0;
	if(motorTime < HAL_GetTick())
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <motorControl+0x64>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	461c      	mov	r4, r3
 8000e8e:	f000 fd05 	bl	800189c <HAL_GetTick>
 8000e92:	4603      	mov	r3, r0
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d224      	bcs.n	8000ee2 <motorControl+0x5e>
	{
		motorTime = HAL_GetTick()+1;
 8000e98:	f000 fd00 	bl	800189c <HAL_GetTick>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <motorControl+0x64>)
 8000ea6:	801a      	strh	r2, [r3, #0]
		if(direction == 0) // ทว�?เ�?�?ม
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <motorControl+0x68>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d10a      	bne.n	8000ec6 <motorControl+0x42>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <motorControl+0x6c>)
 8000eb6:	f003 f8e3 	bl	8004080 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM);
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <motorControl+0x70>)
 8000ebc:	881a      	ldrh	r2, [r3, #0]
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <motorControl+0x74>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM);
		}

	}
}
 8000ec4:	e00d      	b.n	8000ee2 <motorControl+0x5e>
		else if(direction == 1) // ตามเ�?�?ม
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <motorControl+0x68>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d109      	bne.n	8000ee2 <motorControl+0x5e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <motorControl+0x6c>)
 8000ed4:	f003 f8d4 	bl	8004080 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM);
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <motorControl+0x70>)
 8000eda:	881a      	ldrh	r2, [r3, #0]
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <motorControl+0x74>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ee2:	bf00      	nop
 8000ee4:	bd98      	pop	{r3, r4, r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200006fe 	.word	0x200006fe
 8000eec:	200006e2 	.word	0x200006e2
 8000ef0:	48000800 	.word	0x48000800
 8000ef4:	200006e0 	.word	0x200006e0
 8000ef8:	200002a8 	.word	0x200002a8

08000efc <Communication>:

void Communication()
{
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	static uint16_t CommTime = 0;
		if(CommTime < micros())
 8000f00:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <Communication+0x90>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	2200      	movs	r2, #0
 8000f08:	461c      	mov	r4, r3
 8000f0a:	4615      	mov	r5, r2
 8000f0c:	f7ff fede 	bl	8000ccc <micros>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4294      	cmp	r4, r2
 8000f16:	eb75 0303 	sbcs.w	r3, r5, r3
 8000f1a:	d235      	bcs.n	8000f88 <Communication+0x8c>
		{
			CommTime = micros()+5000;
 8000f1c:	f7ff fed6 	bl	8000ccc <micros>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	b293      	uxth	r3, r2
 8000f26:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <Communication+0x90>)
 8000f30:	801a      	strh	r2, [r3, #0]
			HigherPos = (uint8_t)(avgEncode >> 8);
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <Communication+0x94>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	0a1b      	lsrs	r3, r3, #8
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <Communication+0x98>)
 8000f3c:	701a      	strb	r2, [r3, #0]
			LowerPos = (uint8_t)avgEncode;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <Communication+0x94>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <Communication+0x9c>)
 8000f46:	701a      	strb	r2, [r3, #0]
			TxBuffer[0] = 69;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <Communication+0xa0>)
 8000f4a:	2245      	movs	r2, #69	; 0x45
 8000f4c:	701a      	strb	r2, [r3, #0]
			TxBuffer[1] = HigherPos;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <Communication+0x98>)
 8000f50:	781a      	ldrb	r2, [r3, #0]
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <Communication+0xa0>)
 8000f54:	705a      	strb	r2, [r3, #1]
			TxBuffer[2] = LowerPos;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <Communication+0x9c>)
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <Communication+0xa0>)
 8000f5c:	709a      	strb	r2, [r3, #2]
			TxBuffer[3] = 10;
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <Communication+0xa0>)
 8000f60:	220a      	movs	r2, #10
 8000f62:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_DMA(&hlpuart1, TxBuffer, 4);
 8000f64:	2204      	movs	r2, #4
 8000f66:	490d      	ldr	r1, [pc, #52]	; (8000f9c <Communication+0xa0>)
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <Communication+0xa4>)
 8000f6a:	f005 fdc1 	bl	8006af0 <HAL_UART_Transmit_DMA>
			RxInt = ((RxBuffer[2] << 8)) | ((int8_t)(RxBuffer[1]));
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <Communication+0xa8>)
 8000f70:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <Communication+0xa8>)
 8000f7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b21a      	sxth	r2, r3
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <Communication+0xac>)
 8000f86:	801a      	strh	r2, [r3, #0]

		}
}
 8000f88:	bf00      	nop
 8000f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f8c:	20000700 	.word	0x20000700
 8000f90:	200006c8 	.word	0x200006c8
 8000f94:	200006fc 	.word	0x200006fc
 8000f98:	200006fd 	.word	0x200006fd
 8000f9c:	200006f4 	.word	0x200006f4
 8000fa0:	20000108 	.word	0x20000108
 8000fa4:	200006f8 	.word	0x200006f8
 8000fa8:	200006ce 	.word	0x200006ce

08000fac <PIDcalculate>:

void PIDcalculate()
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
	cmd = cmd_1 + A0*Error + A1*Error_1 + A2 * Error_2;
 8000fb0:	4b3b      	ldr	r3, [pc, #236]	; (80010a0 <PIDcalculate+0xf4>)
 8000fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fbe:	4b39      	ldr	r3, [pc, #228]	; (80010a4 <PIDcalculate+0xf8>)
 8000fc0:	edd3 7a00 	vldr	s15, [r3]
 8000fc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc8:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <PIDcalculate+0xfc>)
 8000fca:	edd3 7a00 	vldr	s15, [r3]
 8000fce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fd2:	4b36      	ldr	r3, [pc, #216]	; (80010ac <PIDcalculate+0x100>)
 8000fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fe0:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <PIDcalculate+0x104>)
 8000fe2:	edd3 7a00 	vldr	s15, [r3]
 8000fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fee:	4b31      	ldr	r3, [pc, #196]	; (80010b4 <PIDcalculate+0x108>)
 8000ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ffc:	4b2e      	ldr	r3, [pc, #184]	; (80010b8 <PIDcalculate+0x10c>)
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800100a:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <PIDcalculate+0x110>)
 800100c:	edc3 7a00 	vstr	s15, [r3]
	if (cmd > 20000 && direction == 1) // ตามเ�?�?ม Anti windup
 8001010:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <PIDcalculate+0x110>)
 8001012:	edd3 7a00 	vldr	s15, [r3]
 8001016:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80010c0 <PIDcalculate+0x114>
 800101a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001022:	dd0a      	ble.n	800103a <PIDcalculate+0x8e>
 8001024:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <PIDcalculate+0x118>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d106      	bne.n	800103a <PIDcalculate+0x8e>
	{
		cmd = 20000;
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <PIDcalculate+0x110>)
 800102e:	4a26      	ldr	r2, [pc, #152]	; (80010c8 <PIDcalculate+0x11c>)
 8001030:	601a      	str	r2, [r3, #0]
		direction = 1;
 8001032:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <PIDcalculate+0x118>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	e013      	b.n	8001062 <PIDcalculate+0xb6>
	}
	else if (cmd < -20000 && direction == 0) // ทว�?เ�?�?ม
 800103a:	4b20      	ldr	r3, [pc, #128]	; (80010bc <PIDcalculate+0x110>)
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80010cc <PIDcalculate+0x120>
 8001044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104c:	d509      	bpl.n	8001062 <PIDcalculate+0xb6>
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <PIDcalculate+0x118>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d105      	bne.n	8001062 <PIDcalculate+0xb6>
	{
		cmd = -20000;
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <PIDcalculate+0x110>)
 8001058:	4a1d      	ldr	r2, [pc, #116]	; (80010d0 <PIDcalculate+0x124>)
 800105a:	601a      	str	r2, [r3, #0]
		direction = 0;
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <PIDcalculate+0x118>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
	}
	cmd_1 = cmd;
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <PIDcalculate+0x110>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a10      	ldr	r2, [pc, #64]	; (80010a8 <PIDcalculate+0xfc>)
 8001068:	6013      	str	r3, [r2, #0]
	Error_2 = Error_1;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <PIDcalculate+0x100>)
 800106c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <PIDcalculate+0x108>)
 8001072:	801a      	strh	r2, [r3, #0]
	Error_1 = Error;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <PIDcalculate+0xf4>)
 8001076:	f9b3 2000 	ldrsh.w	r2, [r3]
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <PIDcalculate+0x100>)
 800107c:	801a      	strh	r2, [r3, #0]

	PWM = fabs(cmd);
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <PIDcalculate+0x110>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	eef0 7ae7 	vabs.f32	s15, s15
 8001088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800108c:	ee17 3a90 	vmov	r3, s15
 8001090:	b29a      	uxth	r2, r3
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <PIDcalculate+0x128>)
 8001094:	801a      	strh	r2, [r3, #0]
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	200006d8 	.word	0x200006d8
 80010a4:	200006e8 	.word	0x200006e8
 80010a8:	200006d4 	.word	0x200006d4
 80010ac:	200006da 	.word	0x200006da
 80010b0:	200006ec 	.word	0x200006ec
 80010b4:	200006dc 	.word	0x200006dc
 80010b8:	200006f0 	.word	0x200006f0
 80010bc:	200006d0 	.word	0x200006d0
 80010c0:	469c4000 	.word	0x469c4000
 80010c4:	200006e2 	.word	0x200006e2
 80010c8:	469c4000 	.word	0x469c4000
 80010cc:	c69c4000 	.word	0xc69c4000
 80010d0:	c69c4000 	.word	0xc69c4000
 80010d4:	200006e0 	.word	0x200006e0

080010d8 <UARTDMAconfig>:

void UARTDMAconfig()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 4);
 80010dc:	2204      	movs	r2, #4
 80010de:	4903      	ldr	r1, [pc, #12]	; (80010ec <UARTDMAconfig+0x14>)
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <UARTDMAconfig+0x18>)
 80010e2:	f005 fd85 	bl	8006bf0 <HAL_UART_Receive_DMA>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200006f8 	.word	0x200006f8
 80010f0:	20000108 	.word	0x20000108

080010f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *uart)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001118:	d116      	bne.n	8001148 <HAL_GPIO_EXTI_Callback+0x40>
		int pre_mode_status = mode_status;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_GPIO_EXTI_Callback+0x4c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	60fb      	str	r3, [r7, #12]
		if (pre_mode_status == 3) {
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b03      	cmp	r3, #3
 8001124:	d103      	bne.n	800112e <HAL_GPIO_EXTI_Callback+0x26>
			mode_status = 1;
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]
			mode_status = 2;
		} else if (pre_mode_status == 2) {
			mode_status = 3;
		}
	}
}
 800112c:	e00c      	b.n	8001148 <HAL_GPIO_EXTI_Callback+0x40>
		} else if (pre_mode_status == 1) {
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d103      	bne.n	800113c <HAL_GPIO_EXTI_Callback+0x34>
			mode_status = 2;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001136:	2202      	movs	r2, #2
 8001138:	601a      	str	r2, [r3, #0]
}
 800113a:	e005      	b.n	8001148 <HAL_GPIO_EXTI_Callback+0x40>
		} else if (pre_mode_status == 2) {
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d102      	bne.n	8001148 <HAL_GPIO_EXTI_Callback+0x40>
			mode_status = 3;
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001144:	2203      	movs	r2, #3
 8001146:	601a      	str	r2, [r3, #0]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	20000000 	.word	0x20000000

08001158 <Mode_LD2>:
void Mode_LD2() {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	if (mode_status == 1) {
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <Mode_LD2+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d106      	bne.n	8001172 <Mode_LD2+0x1a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //เปิดไฟ
 8001164:	2201      	movs	r2, #1
 8001166:	2120      	movs	r1, #32
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f002 ff88 	bl	8004080 <HAL_GPIO_WritePin>
		if (timestamp <= HAL_GetTick()) {
			timestamp = HAL_GetTick() + 1000;
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // สลับสถานะของ LED
		}
	}
}
 8001170:	e021      	b.n	80011b6 <Mode_LD2+0x5e>
	} else if (mode_status == 2) {
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <Mode_LD2+0x64>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d106      	bne.n	8001188 <Mode_LD2+0x30>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //เปิดไฟ
 800117a:	2200      	movs	r2, #0
 800117c:	2120      	movs	r1, #32
 800117e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001182:	f002 ff7d 	bl	8004080 <HAL_GPIO_WritePin>
}
 8001186:	e016      	b.n	80011b6 <Mode_LD2+0x5e>
	} else if (mode_status == 3) {
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <Mode_LD2+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b03      	cmp	r3, #3
 800118e:	d112      	bne.n	80011b6 <Mode_LD2+0x5e>
		if (timestamp <= HAL_GetTick()) {
 8001190:	f000 fb84 	bl	800189c <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <Mode_LD2+0x68>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	429a      	cmp	r2, r3
 800119c:	d30b      	bcc.n	80011b6 <Mode_LD2+0x5e>
			timestamp = HAL_GetTick() + 1000;
 800119e:	f000 fb7d 	bl	800189c <HAL_GetTick>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80011a8:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <Mode_LD2+0x68>)
 80011aa:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // สลับสถานะของ LED
 80011ac:	2120      	movs	r1, #32
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f002 ff7d 	bl	80040b0 <HAL_GPIO_TogglePin>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000704 	.word	0x20000704

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011cc:	e7fe      	b.n	80011cc <Error_Handler+0x8>
	...

080011d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_MspInit+0x44>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_MspInit+0x44>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6613      	str	r3, [r2, #96]	; 0x60
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_MspInit+0x44>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_MspInit+0x44>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_MspInit+0x44>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6593      	str	r3, [r2, #88]	; 0x58
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_MspInit+0x44>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001206:	f003 f829 	bl	800425c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b0a0      	sub	sp, #128	; 0x80
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001230:	f107 0318 	add.w	r3, r7, #24
 8001234:	2254      	movs	r2, #84	; 0x54
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f007 f933 	bl	80084a4 <memset>
  if(hadc->Instance==ADC1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001246:	d17f      	bne.n	8001348 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800124c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800124e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001252:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001254:	f107 0318 	add.w	r3, r7, #24
 8001258:	4618      	mov	r0, r3
 800125a:	f003 fd3d 	bl	8004cd8 <HAL_RCCEx_PeriphCLKConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001264:	f7ff ffae 	bl	80011c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001268:	4b39      	ldr	r3, [pc, #228]	; (8001350 <HAL_ADC_MspInit+0x138>)
 800126a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126c:	4a38      	ldr	r2, [pc, #224]	; (8001350 <HAL_ADC_MspInit+0x138>)
 800126e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001272:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001274:	4b36      	ldr	r3, [pc, #216]	; (8001350 <HAL_ADC_MspInit+0x138>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001280:	4b33      	ldr	r3, [pc, #204]	; (8001350 <HAL_ADC_MspInit+0x138>)
 8001282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001284:	4a32      	ldr	r2, [pc, #200]	; (8001350 <HAL_ADC_MspInit+0x138>)
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128c:	4b30      	ldr	r3, [pc, #192]	; (8001350 <HAL_ADC_MspInit+0x138>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <HAL_ADC_MspInit+0x138>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129c:	4a2c      	ldr	r2, [pc, #176]	; (8001350 <HAL_ADC_MspInit+0x138>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a4:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <HAL_ADC_MspInit+0x138>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80012b0:	2306      	movs	r3, #6
 80012b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b4:	2303      	movs	r3, #3
 80012b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012c0:	4619      	mov	r1, r3
 80012c2:	4824      	ldr	r0, [pc, #144]	; (8001354 <HAL_ADC_MspInit+0x13c>)
 80012c4:	f002 fd5a 	bl	8003d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012c8:	2303      	movs	r3, #3
 80012ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012cc:	2303      	movs	r3, #3
 80012ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012d8:	4619      	mov	r1, r3
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f002 fd4d 	bl	8003d7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <HAL_ADC_MspInit+0x140>)
 80012e4:	4a1d      	ldr	r2, [pc, #116]	; (800135c <HAL_ADC_MspInit+0x144>)
 80012e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_ADC_MspInit+0x140>)
 80012ea:	2205      	movs	r2, #5
 80012ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_ADC_MspInit+0x140>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f4:	4b18      	ldr	r3, [pc, #96]	; (8001358 <HAL_ADC_MspInit+0x140>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_ADC_MspInit+0x140>)
 80012fc:	2280      	movs	r2, #128	; 0x80
 80012fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_ADC_MspInit+0x140>)
 8001302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001306:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <HAL_ADC_MspInit+0x140>)
 800130a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800130e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_ADC_MspInit+0x140>)
 8001312:	2220      	movs	r2, #32
 8001314:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_ADC_MspInit+0x140>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <HAL_ADC_MspInit+0x140>)
 800131e:	f002 f9fb 	bl	8003718 <HAL_DMA_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001328:	f7ff ff4c 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_ADC_MspInit+0x140>)
 8001330:	655a      	str	r2, [r3, #84]	; 0x54
 8001332:	4a09      	ldr	r2, [pc, #36]	; (8001358 <HAL_ADC_MspInit+0x140>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	2012      	movs	r0, #18
 800133e:	f002 f9b6 	bl	80036ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001342:	2012      	movs	r0, #18
 8001344:	f002 f9cd 	bl	80036e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001348:	bf00      	nop
 800134a:	3780      	adds	r7, #128	; 0x80
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40021000 	.word	0x40021000
 8001354:	48000800 	.word	0x48000800
 8001358:	200000a8 	.word	0x200000a8
 800135c:	40020408 	.word	0x40020408

08001360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b09e      	sub	sp, #120	; 0x78
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	2254      	movs	r2, #84	; 0x54
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f007 f88f 	bl	80084a4 <memset>
  if(huart->Instance==LPUART1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a4d      	ldr	r2, [pc, #308]	; (80014c0 <HAL_UART_MspInit+0x160>)
 800138c:	4293      	cmp	r3, r2
 800138e:	f040 8092 	bne.w	80014b6 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001392:	2320      	movs	r3, #32
 8001394:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4618      	mov	r0, r3
 80013a0:	f003 fc9a 	bl	8004cd8 <HAL_RCCEx_PeriphCLKConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013aa:	f7ff ff0b 	bl	80011c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80013ae:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <HAL_UART_MspInit+0x164>)
 80013b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b2:	4a44      	ldr	r2, [pc, #272]	; (80014c4 <HAL_UART_MspInit+0x164>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80013ba:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <HAL_UART_MspInit+0x164>)
 80013bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <HAL_UART_MspInit+0x164>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	4a3e      	ldr	r2, [pc, #248]	; (80014c4 <HAL_UART_MspInit+0x164>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d2:	4b3c      	ldr	r3, [pc, #240]	; (80014c4 <HAL_UART_MspInit+0x164>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|LPUART1_RX_Pin;
 80013de:	230c      	movs	r3, #12
 80013e0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80013ee:	230c      	movs	r3, #12
 80013f0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013f6:	4619      	mov	r1, r3
 80013f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fc:	f002 fcbe 	bl	8003d7c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8001400:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <HAL_UART_MspInit+0x168>)
 8001402:	4a32      	ldr	r2, [pc, #200]	; (80014cc <HAL_UART_MspInit+0x16c>)
 8001404:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001406:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <HAL_UART_MspInit+0x168>)
 8001408:	2222      	movs	r2, #34	; 0x22
 800140a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140c:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <HAL_UART_MspInit+0x168>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <HAL_UART_MspInit+0x168>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001418:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <HAL_UART_MspInit+0x168>)
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_UART_MspInit+0x168>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <HAL_UART_MspInit+0x168>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800142a:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <HAL_UART_MspInit+0x168>)
 800142c:	2220      	movs	r2, #32
 800142e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001430:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <HAL_UART_MspInit+0x168>)
 8001432:	2200      	movs	r2, #0
 8001434:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001436:	4824      	ldr	r0, [pc, #144]	; (80014c8 <HAL_UART_MspInit+0x168>)
 8001438:	f002 f96e 	bl	8003718 <HAL_DMA_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001442:	f7ff febf 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a1f      	ldr	r2, [pc, #124]	; (80014c8 <HAL_UART_MspInit+0x168>)
 800144a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_UART_MspInit+0x168>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <HAL_UART_MspInit+0x170>)
 8001456:	4a1f      	ldr	r2, [pc, #124]	; (80014d4 <HAL_UART_MspInit+0x174>)
 8001458:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <HAL_UART_MspInit+0x170>)
 800145c:	2223      	movs	r2, #35	; 0x23
 800145e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <HAL_UART_MspInit+0x170>)
 8001462:	2210      	movs	r2, #16
 8001464:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <HAL_UART_MspInit+0x170>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <HAL_UART_MspInit+0x170>)
 800146e:	2280      	movs	r2, #128	; 0x80
 8001470:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <HAL_UART_MspInit+0x170>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_UART_MspInit+0x170>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <HAL_UART_MspInit+0x170>)
 8001480:	2200      	movs	r2, #0
 8001482:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_UART_MspInit+0x170>)
 8001486:	2200      	movs	r2, #0
 8001488:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800148a:	4811      	ldr	r0, [pc, #68]	; (80014d0 <HAL_UART_MspInit+0x170>)
 800148c:	f002 f944 	bl	8003718 <HAL_DMA_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8001496:	f7ff fe95 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <HAL_UART_MspInit+0x170>)
 800149e:	67da      	str	r2, [r3, #124]	; 0x7c
 80014a0:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <HAL_UART_MspInit+0x170>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	205b      	movs	r0, #91	; 0x5b
 80014ac:	f002 f8ff 	bl	80036ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80014b0:	205b      	movs	r0, #91	; 0x5b
 80014b2:	f002 f916 	bl	80036e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80014b6:	bf00      	nop
 80014b8:	3778      	adds	r7, #120	; 0x78
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40008000 	.word	0x40008000
 80014c4:	40021000 	.word	0x40021000
 80014c8:	2000019c 	.word	0x2000019c
 80014cc:	40020008 	.word	0x40020008
 80014d0:	200001fc 	.word	0x200001fc
 80014d4:	4002001c 	.word	0x4002001c

080014d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_TIM_Encoder_MspInit+0x7c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d128      	bne.n	800154c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_TIM_Encoder_MspInit+0x80>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	4a16      	ldr	r2, [pc, #88]	; (8001558 <HAL_TIM_Encoder_MspInit+0x80>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6593      	str	r3, [r2, #88]	; 0x58
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_TIM_Encoder_MspInit+0x80>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_TIM_Encoder_MspInit+0x80>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <HAL_TIM_Encoder_MspInit+0x80>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_TIM_Encoder_MspInit+0x80>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800152a:	23c0      	movs	r3, #192	; 0xc0
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800153a:	2302      	movs	r3, #2
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001548:	f002 fc18 	bl	8003d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40000400 	.word	0x40000400
 8001558:	40021000 	.word	0x40021000

0800155c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_TIM_PWM_MspInit+0x38>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d10b      	bne.n	8001586 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_TIM_PWM_MspInit+0x3c>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	4a09      	ldr	r2, [pc, #36]	; (8001598 <HAL_TIM_PWM_MspInit+0x3c>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6593      	str	r3, [r2, #88]	; 0x58
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <HAL_TIM_PWM_MspInit+0x3c>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40000800 	.word	0x40000800
 8001598:	40021000 	.word	0x40021000

0800159c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a16      	ldr	r2, [pc, #88]	; (8001604 <HAL_TIM_Base_MspInit+0x68>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10c      	bne.n	80015c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_TIM_Base_MspInit+0x6c>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	4a15      	ldr	r2, [pc, #84]	; (8001608 <HAL_TIM_Base_MspInit+0x6c>)
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	6593      	str	r3, [r2, #88]	; 0x58
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <HAL_TIM_Base_MspInit+0x6c>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80015c6:	e018      	b.n	80015fa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM15)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_TIM_Base_MspInit+0x70>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d113      	bne.n	80015fa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <HAL_TIM_Base_MspInit+0x6c>)
 80015d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d6:	4a0c      	ldr	r2, [pc, #48]	; (8001608 <HAL_TIM_Base_MspInit+0x6c>)
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015dc:	6613      	str	r3, [r2, #96]	; 0x60
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <HAL_TIM_Base_MspInit+0x6c>)
 80015e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	2018      	movs	r0, #24
 80015f0:	f002 f85d 	bl	80036ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80015f4:	2018      	movs	r0, #24
 80015f6:	f002 f874 	bl	80036e2 <HAL_NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40000c00 	.word	0x40000c00
 8001608:	40021000 	.word	0x40021000
 800160c:	40014000 	.word	0x40014000

08001610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a11      	ldr	r2, [pc, #68]	; (8001674 <HAL_TIM_MspPostInit+0x64>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d11b      	bne.n	800166a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_TIM_MspPostInit+0x68>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	4a10      	ldr	r2, [pc, #64]	; (8001678 <HAL_TIM_MspPostInit+0x68>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_TIM_MspPostInit+0x68>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800164a:	2340      	movs	r3, #64	; 0x40
 800164c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800165a:	2302      	movs	r3, #2
 800165c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	4619      	mov	r1, r3
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <HAL_TIM_MspPostInit+0x6c>)
 8001666:	f002 fb89 	bl	8003d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3720      	adds	r7, #32
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40000800 	.word	0x40000800
 8001678:	40021000 	.word	0x40021000
 800167c:	48000400 	.word	0x48000400

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001684:	e7fe      	b.n	8001684 <NMI_Handler+0x4>

08001686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <MemManage_Handler+0x4>

08001692 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <BusFault_Handler+0x4>

08001698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <UsageFault_Handler+0x4>

0800169e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016cc:	f000 f8d4 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <DMA1_Channel1_IRQHandler+0x10>)
 80016da:	f002 fa00 	bl	8003ade <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000019c 	.word	0x2000019c

080016e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <DMA1_Channel2_IRQHandler+0x10>)
 80016ee:	f002 f9f6 	bl	8003ade <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200001fc 	.word	0x200001fc

080016fc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <ADC1_2_IRQHandler+0x10>)
 8001702:	f000 fda7 	bl	8002254 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000003c 	.word	0x2000003c

08001710 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001716:	f004 f87d 	bl	8005814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000340 	.word	0x20000340

08001724 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001728:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800172c:	f002 fcda 	bl	80040e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <DMA2_Channel1_IRQHandler+0x10>)
 800173a:	f002 f9d0 	bl	8003ade <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200000a8 	.word	0x200000a8

08001748 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <LPUART1_IRQHandler+0x10>)
 800174e:	f005 fa9b 	bl	8006c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000108 	.word	0x20000108

0800175c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <SystemInit+0x20>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <SystemInit+0x20>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001780:	480d      	ldr	r0, [pc, #52]	; (80017b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001782:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001784:	f7ff ffea 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001788:	480c      	ldr	r0, [pc, #48]	; (80017bc <LoopForever+0x6>)
  ldr r1, =_edata
 800178a:	490d      	ldr	r1, [pc, #52]	; (80017c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800178c:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <LoopForever+0xe>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a0:	4c0a      	ldr	r4, [pc, #40]	; (80017cc <LoopForever+0x16>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ae:	f006 fe81 	bl	80084b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017b2:	f7fe feaf 	bl	8000514 <main>

080017b6 <LoopForever>:

LoopForever:
    b LoopForever
 80017b6:	e7fe      	b.n	80017b6 <LoopForever>
  ldr   r0, =_estack
 80017b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80017c4:	08008564 	.word	0x08008564
  ldr r2, =_sbss
 80017c8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80017cc:	2000070c 	.word	0x2000070c

080017d0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC3_IRQHandler>

080017d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f001 ff5b 	bl	8003698 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 f80e 	bl	8001804 <HAL_InitTick>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	71fb      	strb	r3, [r7, #7]
 80017f2:	e001      	b.n	80017f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017f4:	f7ff fcec 	bl	80011d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017f8:	79fb      	ldrb	r3, [r7, #7]

}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_InitTick+0x68>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d022      	beq.n	800185e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_InitTick+0x6c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_InitTick+0x68>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001824:	fbb1 f3f3 	udiv	r3, r1, r3
 8001828:	fbb2 f3f3 	udiv	r3, r2, r3
 800182c:	4618      	mov	r0, r3
 800182e:	f001 ff66 	bl	80036fe <HAL_SYSTICK_Config>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10f      	bne.n	8001858 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b0f      	cmp	r3, #15
 800183c:	d809      	bhi.n	8001852 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183e:	2200      	movs	r2, #0
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	f04f 30ff 	mov.w	r0, #4294967295
 8001846:	f001 ff32 	bl	80036ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_InitTick+0x70>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e007      	b.n	8001862 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
 8001856:	e004      	b.n	8001862 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	e001      	b.n	8001862 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000018 	.word	0x20000018
 8001870:	20000010 	.word	0x20000010
 8001874:	20000014 	.word	0x20000014

08001878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_IncTick+0x1c>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x20>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4413      	add	r3, r2
 8001886:	4a03      	ldr	r2, [pc, #12]	; (8001894 <HAL_IncTick+0x1c>)
 8001888:	6013      	str	r3, [r2, #0]
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	20000708 	.word	0x20000708
 8001898:	20000018 	.word	0x20000018

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_GetTick+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000708 	.word	0x20000708

080018b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	609a      	str	r2, [r3, #8]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	609a      	str	r2, [r3, #8]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3360      	adds	r3, #96	; 0x60
 800192e:	461a      	mov	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <LL_ADC_SetOffset+0x44>)
 800193e:	4013      	ands	r3, r2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	4313      	orrs	r3, r2
 800194c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001954:	bf00      	nop
 8001956:	371c      	adds	r7, #28
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	03fff000 	.word	0x03fff000

08001964 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3360      	adds	r3, #96	; 0x60
 8001972:	461a      	mov	r2, r3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001984:	4618      	mov	r0, r3
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3360      	adds	r3, #96	; 0x60
 80019a0:	461a      	mov	r2, r3
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	431a      	orrs	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019ba:	bf00      	nop
 80019bc:	371c      	adds	r7, #28
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b087      	sub	sp, #28
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3360      	adds	r3, #96	; 0x60
 80019d6:	461a      	mov	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3360      	adds	r3, #96	; 0x60
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	431a      	orrs	r2, r3
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a26:	bf00      	nop
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	615a      	str	r2, [r3, #20]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b087      	sub	sp, #28
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3330      	adds	r3, #48	; 0x30
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	0a1b      	lsrs	r3, r3, #8
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	4413      	add	r3, r2
 8001a9c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	211f      	movs	r1, #31
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	0e9b      	lsrs	r3, r3, #26
 8001ab6:	f003 011f 	and.w	r1, r3, #31
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aca:	bf00      	nop
 8001acc:	371c      	adds	r7, #28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3314      	adds	r3, #20
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	0e5b      	lsrs	r3, r3, #25
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	4413      	add	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	0d1b      	lsrs	r3, r3, #20
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	2107      	movs	r1, #7
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	401a      	ands	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	0d1b      	lsrs	r3, r3, #20
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	431a      	orrs	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b46:	bf00      	nop
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	401a      	ands	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f003 0318 	and.w	r3, r3, #24
 8001b76:	4908      	ldr	r1, [pc, #32]	; (8001b98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b78:	40d9      	lsrs	r1, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	400b      	ands	r3, r1
 8001b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b82:	431a      	orrs	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	0007ffff 	.word	0x0007ffff

08001b9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001be4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6093      	str	r3, [r2, #8]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c0c:	d101      	bne.n	8001c12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c5c:	d101      	bne.n	8001c62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c84:	f043 0201 	orr.w	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <LL_ADC_IsEnabled+0x18>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <LL_ADC_IsEnabled+0x1a>
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cd2:	f043 0204 	orr.w	r2, r3, #4
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d101      	bne.n	8001cfe <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d101      	bne.n	8001d24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e1a9      	b.n	80020a2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d109      	bne.n	8001d70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff fa5b 	bl	8001218 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff3f 	bl	8001bf8 <LL_ADC_IsDeepPowerDownEnabled>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d004      	beq.n	8001d8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff25 	bl	8001bd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ff5a 	bl	8001c48 <LL_ADC_IsInternalRegulatorEnabled>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d115      	bne.n	8001dc6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff3e 	bl	8001c20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001da4:	4b9c      	ldr	r3, [pc, #624]	; (8002018 <HAL_ADC_Init+0x2e4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	099b      	lsrs	r3, r3, #6
 8001daa:	4a9c      	ldr	r2, [pc, #624]	; (800201c <HAL_ADC_Init+0x2e8>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	099b      	lsrs	r3, r3, #6
 8001db2:	3301      	adds	r3, #1
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001db8:	e002      	b.n	8001dc0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f9      	bne.n	8001dba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff3c 	bl	8001c48 <LL_ADC_IsInternalRegulatorEnabled>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10d      	bne.n	8001df2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	f043 0210 	orr.w	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de6:	f043 0201 	orr.w	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff75 	bl	8001ce6 <LL_ADC_REG_IsConversionOngoing>
 8001dfc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f040 8142 	bne.w	8002090 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 813e 	bne.w	8002090 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e1c:	f043 0202 	orr.w	r2, r3, #2
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff35 	bl	8001c98 <LL_ADC_IsEnabled>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d141      	bne.n	8001eb8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e3c:	d004      	beq.n	8001e48 <HAL_ADC_Init+0x114>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a77      	ldr	r2, [pc, #476]	; (8002020 <HAL_ADC_Init+0x2ec>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d10f      	bne.n	8001e68 <HAL_ADC_Init+0x134>
 8001e48:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e4c:	f7ff ff24 	bl	8001c98 <LL_ADC_IsEnabled>
 8001e50:	4604      	mov	r4, r0
 8001e52:	4873      	ldr	r0, [pc, #460]	; (8002020 <HAL_ADC_Init+0x2ec>)
 8001e54:	f7ff ff20 	bl	8001c98 <LL_ADC_IsEnabled>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4323      	orrs	r3, r4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	e012      	b.n	8001e8e <HAL_ADC_Init+0x15a>
 8001e68:	486e      	ldr	r0, [pc, #440]	; (8002024 <HAL_ADC_Init+0x2f0>)
 8001e6a:	f7ff ff15 	bl	8001c98 <LL_ADC_IsEnabled>
 8001e6e:	4604      	mov	r4, r0
 8001e70:	486d      	ldr	r0, [pc, #436]	; (8002028 <HAL_ADC_Init+0x2f4>)
 8001e72:	f7ff ff11 	bl	8001c98 <LL_ADC_IsEnabled>
 8001e76:	4603      	mov	r3, r0
 8001e78:	431c      	orrs	r4, r3
 8001e7a:	486c      	ldr	r0, [pc, #432]	; (800202c <HAL_ADC_Init+0x2f8>)
 8001e7c:	f7ff ff0c 	bl	8001c98 <LL_ADC_IsEnabled>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4323      	orrs	r3, r4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d012      	beq.n	8001eb8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e9a:	d004      	beq.n	8001ea6 <HAL_ADC_Init+0x172>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a5f      	ldr	r2, [pc, #380]	; (8002020 <HAL_ADC_Init+0x2ec>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_Init+0x176>
 8001ea6:	4a62      	ldr	r2, [pc, #392]	; (8002030 <HAL_ADC_Init+0x2fc>)
 8001ea8:	e000      	b.n	8001eac <HAL_ADC_Init+0x178>
 8001eaa:	4a62      	ldr	r2, [pc, #392]	; (8002034 <HAL_ADC_Init+0x300>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f7ff fcfe 	bl	80018b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7f5b      	ldrb	r3, [r3, #29]
 8001ebc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ec2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ec8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ece:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ed6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d106      	bne.n	8001ef4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	3b01      	subs	r3, #1
 8001eec:	045b      	lsls	r3, r3, #17
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d009      	beq.n	8001f10 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	4b48      	ldr	r3, [pc, #288]	; (8002038 <HAL_ADC_Init+0x304>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	69b9      	ldr	r1, [r7, #24]
 8001f20:	430b      	orrs	r3, r1
 8001f22:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fee4 	bl	8001d0c <LL_ADC_INJ_IsConversionOngoing>
 8001f44:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d17f      	bne.n	800204c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d17c      	bne.n	800204c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f56:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f5e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f6e:	f023 0302 	bic.w	r3, r3, #2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d017      	beq.n	8001fb4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f92:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f9c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6911      	ldr	r1, [r2, #16]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001fb2:	e013      	b.n	8001fdc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fc2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fd8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d12a      	bne.n	800203c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ff0:	f023 0304 	bic.w	r3, r3, #4
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ffc:	4311      	orrs	r1, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002002:	4311      	orrs	r1, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002008:	430a      	orrs	r2, r1
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0201 	orr.w	r2, r2, #1
 8002014:	611a      	str	r2, [r3, #16]
 8002016:	e019      	b.n	800204c <HAL_ADC_Init+0x318>
 8002018:	20000010 	.word	0x20000010
 800201c:	053e2d63 	.word	0x053e2d63
 8002020:	50000100 	.word	0x50000100
 8002024:	50000400 	.word	0x50000400
 8002028:	50000500 	.word	0x50000500
 800202c:	50000600 	.word	0x50000600
 8002030:	50000300 	.word	0x50000300
 8002034:	50000700 	.word	0x50000700
 8002038:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0201 	bic.w	r2, r2, #1
 800204a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d10c      	bne.n	800206e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f023 010f 	bic.w	r1, r3, #15
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	1e5a      	subs	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	631a      	str	r2, [r3, #48]	; 0x30
 800206c:	e007      	b.n	800207e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 020f 	bic.w	r2, r2, #15
 800207c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	f023 0303 	bic.w	r3, r3, #3
 8002086:	f043 0201 	orr.w	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	65da      	str	r2, [r3, #92]	; 0x5c
 800208e:	e007      	b.n	80020a0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002094:	f043 0210 	orr.w	r2, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd90      	pop	{r4, r7, pc}
 80020aa:	bf00      	nop

080020ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020c0:	d004      	beq.n	80020cc <HAL_ADC_Start_DMA+0x20>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a5a      	ldr	r2, [pc, #360]	; (8002230 <HAL_ADC_Start_DMA+0x184>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_Start_DMA+0x24>
 80020cc:	4b59      	ldr	r3, [pc, #356]	; (8002234 <HAL_ADC_Start_DMA+0x188>)
 80020ce:	e000      	b.n	80020d2 <HAL_ADC_Start_DMA+0x26>
 80020d0:	4b59      	ldr	r3, [pc, #356]	; (8002238 <HAL_ADC_Start_DMA+0x18c>)
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fd62 	bl	8001b9c <LL_ADC_GetMultimode>
 80020d8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fe01 	bl	8001ce6 <LL_ADC_REG_IsConversionOngoing>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 809b 	bne.w	8002222 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_Start_DMA+0x4e>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e096      	b.n	8002228 <HAL_ADC_Start_DMA+0x17c>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a4d      	ldr	r2, [pc, #308]	; (800223c <HAL_ADC_Start_DMA+0x190>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d008      	beq.n	800211e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d002      	beq.n	800211e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2b09      	cmp	r3, #9
 800211c:	d17a      	bne.n	8002214 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 ff60 	bl	8002fe4 <ADC_Enable>
 8002124:	4603      	mov	r3, r0
 8002126:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002128:	7dfb      	ldrb	r3, [r7, #23]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d16d      	bne.n	800220a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002132:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002136:	f023 0301 	bic.w	r3, r3, #1
 800213a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a3a      	ldr	r2, [pc, #232]	; (8002230 <HAL_ADC_Start_DMA+0x184>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d009      	beq.n	8002160 <HAL_ADC_Start_DMA+0xb4>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a3b      	ldr	r2, [pc, #236]	; (8002240 <HAL_ADC_Start_DMA+0x194>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d002      	beq.n	800215c <HAL_ADC_Start_DMA+0xb0>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	e003      	b.n	8002164 <HAL_ADC_Start_DMA+0xb8>
 800215c:	4b39      	ldr	r3, [pc, #228]	; (8002244 <HAL_ADC_Start_DMA+0x198>)
 800215e:	e001      	b.n	8002164 <HAL_ADC_Start_DMA+0xb8>
 8002160:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	4293      	cmp	r3, r2
 800216a:	d002      	beq.n	8002172 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d105      	bne.n	800217e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002176:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d006      	beq.n	8002198 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218e:	f023 0206 	bic.w	r2, r3, #6
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	661a      	str	r2, [r3, #96]	; 0x60
 8002196:	e002      	b.n	800219e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a2:	4a29      	ldr	r2, [pc, #164]	; (8002248 <HAL_ADC_Start_DMA+0x19c>)
 80021a4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	4a28      	ldr	r2, [pc, #160]	; (800224c <HAL_ADC_Start_DMA+0x1a0>)
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b2:	4a27      	ldr	r2, [pc, #156]	; (8002250 <HAL_ADC_Start_DMA+0x1a4>)
 80021b4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	221c      	movs	r2, #28
 80021bc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0210 	orr.w	r2, r2, #16
 80021d4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 0201 	orr.w	r2, r2, #1
 80021e4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3340      	adds	r3, #64	; 0x40
 80021f0:	4619      	mov	r1, r3
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f001 fb37 	bl	8003868 <HAL_DMA_Start_IT>
 80021fa:	4603      	mov	r3, r0
 80021fc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fd5b 	bl	8001cbe <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002208:	e00d      	b.n	8002226 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002212:	e008      	b.n	8002226 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002220:	e001      	b.n	8002226 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002222:	2302      	movs	r3, #2
 8002224:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002226:	7dfb      	ldrb	r3, [r7, #23]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	50000100 	.word	0x50000100
 8002234:	50000300 	.word	0x50000300
 8002238:	50000700 	.word	0x50000700
 800223c:	50000600 	.word	0x50000600
 8002240:	50000500 	.word	0x50000500
 8002244:	50000400 	.word	0x50000400
 8002248:	08003111 	.word	0x08003111
 800224c:	080031e9 	.word	0x080031e9
 8002250:	08003205 	.word	0x08003205

08002254 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002278:	d004      	beq.n	8002284 <HAL_ADC_IRQHandler+0x30>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a8e      	ldr	r2, [pc, #568]	; (80024b8 <HAL_ADC_IRQHandler+0x264>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d101      	bne.n	8002288 <HAL_ADC_IRQHandler+0x34>
 8002284:	4b8d      	ldr	r3, [pc, #564]	; (80024bc <HAL_ADC_IRQHandler+0x268>)
 8002286:	e000      	b.n	800228a <HAL_ADC_IRQHandler+0x36>
 8002288:	4b8d      	ldr	r3, [pc, #564]	; (80024c0 <HAL_ADC_IRQHandler+0x26c>)
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fc86 	bl	8001b9c <LL_ADC_GetMultimode>
 8002290:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d017      	beq.n	80022cc <HAL_ADC_IRQHandler+0x78>
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d012      	beq.n	80022cc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d105      	bne.n	80022be <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f001 f808 	bl	80032d4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2202      	movs	r2, #2
 80022ca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d004      	beq.n	80022e0 <HAL_ADC_IRQHandler+0x8c>
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10b      	bne.n	80022f8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8094 	beq.w	8002414 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 808e 	beq.w	8002414 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	d105      	bne.n	8002310 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fb9f 	bl	8001a58 <LL_ADC_REG_IsTriggerSourceSWStart>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d072      	beq.n	8002406 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a64      	ldr	r2, [pc, #400]	; (80024b8 <HAL_ADC_IRQHandler+0x264>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d009      	beq.n	800233e <HAL_ADC_IRQHandler+0xea>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a65      	ldr	r2, [pc, #404]	; (80024c4 <HAL_ADC_IRQHandler+0x270>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d002      	beq.n	800233a <HAL_ADC_IRQHandler+0xe6>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	e003      	b.n	8002342 <HAL_ADC_IRQHandler+0xee>
 800233a:	4b63      	ldr	r3, [pc, #396]	; (80024c8 <HAL_ADC_IRQHandler+0x274>)
 800233c:	e001      	b.n	8002342 <HAL_ADC_IRQHandler+0xee>
 800233e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	4293      	cmp	r3, r2
 8002348:	d008      	beq.n	800235c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2b05      	cmp	r3, #5
 8002354:	d002      	beq.n	800235c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2b09      	cmp	r3, #9
 800235a:	d104      	bne.n	8002366 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	623b      	str	r3, [r7, #32]
 8002364:	e014      	b.n	8002390 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a53      	ldr	r2, [pc, #332]	; (80024b8 <HAL_ADC_IRQHandler+0x264>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d009      	beq.n	8002384 <HAL_ADC_IRQHandler+0x130>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a53      	ldr	r2, [pc, #332]	; (80024c4 <HAL_ADC_IRQHandler+0x270>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d002      	beq.n	8002380 <HAL_ADC_IRQHandler+0x12c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	e003      	b.n	8002388 <HAL_ADC_IRQHandler+0x134>
 8002380:	4b51      	ldr	r3, [pc, #324]	; (80024c8 <HAL_ADC_IRQHandler+0x274>)
 8002382:	e001      	b.n	8002388 <HAL_ADC_IRQHandler+0x134>
 8002384:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002388:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d135      	bne.n	8002406 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d12e      	bne.n	8002406 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fc9a 	bl	8001ce6 <LL_ADC_REG_IsConversionOngoing>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d11a      	bne.n	80023ee <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 020c 	bic.w	r2, r2, #12
 80023c6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d112      	bne.n	8002406 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	f043 0201 	orr.w	r2, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80023ec:	e00b      	b.n	8002406 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	f043 0210 	orr.w	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fe:	f043 0201 	orr.w	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f984 	bl	8002714 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	220c      	movs	r2, #12
 8002412:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d004      	beq.n	8002428 <HAL_ADC_IRQHandler+0x1d4>
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10b      	bne.n	8002440 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80b3 	beq.w	800259a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80ad 	beq.w	800259a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	d105      	bne.n	8002458 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fb3a 	bl	8001ad6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002462:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff faf5 	bl	8001a58 <LL_ADC_REG_IsTriggerSourceSWStart>
 800246e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a10      	ldr	r2, [pc, #64]	; (80024b8 <HAL_ADC_IRQHandler+0x264>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d009      	beq.n	800248e <HAL_ADC_IRQHandler+0x23a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <HAL_ADC_IRQHandler+0x270>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d002      	beq.n	800248a <HAL_ADC_IRQHandler+0x236>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	e003      	b.n	8002492 <HAL_ADC_IRQHandler+0x23e>
 800248a:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <HAL_ADC_IRQHandler+0x274>)
 800248c:	e001      	b.n	8002492 <HAL_ADC_IRQHandler+0x23e>
 800248e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	4293      	cmp	r3, r2
 8002498:	d008      	beq.n	80024ac <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b06      	cmp	r3, #6
 80024a4:	d002      	beq.n	80024ac <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b07      	cmp	r3, #7
 80024aa:	d10f      	bne.n	80024cc <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	623b      	str	r3, [r7, #32]
 80024b4:	e01f      	b.n	80024f6 <HAL_ADC_IRQHandler+0x2a2>
 80024b6:	bf00      	nop
 80024b8:	50000100 	.word	0x50000100
 80024bc:	50000300 	.word	0x50000300
 80024c0:	50000700 	.word	0x50000700
 80024c4:	50000500 	.word	0x50000500
 80024c8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a8b      	ldr	r2, [pc, #556]	; (8002700 <HAL_ADC_IRQHandler+0x4ac>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d009      	beq.n	80024ea <HAL_ADC_IRQHandler+0x296>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a8a      	ldr	r2, [pc, #552]	; (8002704 <HAL_ADC_IRQHandler+0x4b0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d002      	beq.n	80024e6 <HAL_ADC_IRQHandler+0x292>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	e003      	b.n	80024ee <HAL_ADC_IRQHandler+0x29a>
 80024e6:	4b88      	ldr	r3, [pc, #544]	; (8002708 <HAL_ADC_IRQHandler+0x4b4>)
 80024e8:	e001      	b.n	80024ee <HAL_ADC_IRQHandler+0x29a>
 80024ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024ee:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d047      	beq.n	800258c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d007      	beq.n	8002516 <HAL_ADC_IRQHandler+0x2c2>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d03f      	beq.n	800258c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002512:	2b00      	cmp	r3, #0
 8002514:	d13a      	bne.n	800258c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002520:	2b40      	cmp	r3, #64	; 0x40
 8002522:	d133      	bne.n	800258c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d12e      	bne.n	800258c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fbea 	bl	8001d0c <LL_ADC_INJ_IsConversionOngoing>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d11a      	bne.n	8002574 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800254c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002552:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d112      	bne.n	800258c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	65da      	str	r2, [r3, #92]	; 0x5c
 8002572:	e00b      	b.n	800258c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002578:	f043 0210 	orr.w	r2, r3, #16
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fe79 	bl	8003284 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2260      	movs	r2, #96	; 0x60
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d011      	beq.n	80025c8 <HAL_ADC_IRQHandler+0x374>
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00c      	beq.n	80025c8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f8be 	bl	800273c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2280      	movs	r2, #128	; 0x80
 80025c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d012      	beq.n	80025f8 <HAL_ADC_IRQHandler+0x3a4>
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00d      	beq.n	80025f8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fe5f 	bl	80032ac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d012      	beq.n	8002628 <HAL_ADC_IRQHandler+0x3d4>
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00d      	beq.n	8002628 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002610:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fe51 	bl	80032c0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002626:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	2b00      	cmp	r3, #0
 8002630:	d043      	beq.n	80026ba <HAL_ADC_IRQHandler+0x466>
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	d03e      	beq.n	80026ba <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002644:	2301      	movs	r3, #1
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
 8002648:	e021      	b.n	800268e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d015      	beq.n	800267c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002658:	d004      	beq.n	8002664 <HAL_ADC_IRQHandler+0x410>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a28      	ldr	r2, [pc, #160]	; (8002700 <HAL_ADC_IRQHandler+0x4ac>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d101      	bne.n	8002668 <HAL_ADC_IRQHandler+0x414>
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <HAL_ADC_IRQHandler+0x4b8>)
 8002666:	e000      	b.n	800266a <HAL_ADC_IRQHandler+0x416>
 8002668:	4b29      	ldr	r3, [pc, #164]	; (8002710 <HAL_ADC_IRQHandler+0x4bc>)
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff faa4 	bl	8001bb8 <LL_ADC_GetMultiDMATransfer>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002676:	2301      	movs	r3, #1
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
 800267a:	e008      	b.n	800268e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800268a:	2301      	movs	r3, #1
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	2b01      	cmp	r3, #1
 8002692:	d10e      	bne.n	80026b2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a4:	f043 0202 	orr.w	r2, r3, #2
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f84f 	bl	8002750 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2210      	movs	r2, #16
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d018      	beq.n	80026f6 <HAL_ADC_IRQHandler+0x4a2>
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d013      	beq.n	80026f6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	f043 0208 	orr.w	r2, r3, #8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ee:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fdd1 	bl	8003298 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80026f6:	bf00      	nop
 80026f8:	3728      	adds	r7, #40	; 0x28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	50000100 	.word	0x50000100
 8002704:	50000500 	.word	0x50000500
 8002708:	50000400 	.word	0x50000400
 800270c:	50000300 	.word	0x50000300
 8002710:	50000700 	.word	0x50000700

08002714 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b0b6      	sub	sp, #216	; 0xd8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800277e:	2b01      	cmp	r3, #1
 8002780:	d102      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x24>
 8002782:	2302      	movs	r3, #2
 8002784:	f000 bc13 	b.w	8002fae <HAL_ADC_ConfigChannel+0x84a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff faa6 	bl	8001ce6 <LL_ADC_REG_IsConversionOngoing>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	f040 83f3 	bne.w	8002f88 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6859      	ldr	r1, [r3, #4]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f7ff f965 	bl	8001a7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fa94 	bl	8001ce6 <LL_ADC_REG_IsConversionOngoing>
 80027be:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff faa0 	bl	8001d0c <LL_ADC_INJ_IsConversionOngoing>
 80027cc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f040 81d9 	bne.w	8002b8c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f040 81d4 	bne.w	8002b8c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027ec:	d10f      	bne.n	800280e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2200      	movs	r2, #0
 80027f8:	4619      	mov	r1, r3
 80027fa:	f7ff f97f 	bl	8001afc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff f913 	bl	8001a32 <LL_ADC_SetSamplingTimeCommonConfig>
 800280c:	e00e      	b.n	800282c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6819      	ldr	r1, [r3, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	461a      	mov	r2, r3
 800281c:	f7ff f96e 	bl	8001afc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2100      	movs	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff f903 	bl	8001a32 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	08db      	lsrs	r3, r3, #3
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b04      	cmp	r3, #4
 800284c:	d022      	beq.n	8002894 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6919      	ldr	r1, [r3, #16]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800285e:	f7ff f85d 	bl	800191c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6919      	ldr	r1, [r3, #16]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	461a      	mov	r2, r3
 8002870:	f7ff f8a9 	bl	80019c6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002880:	2b01      	cmp	r3, #1
 8002882:	d102      	bne.n	800288a <HAL_ADC_ConfigChannel+0x126>
 8002884:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002888:	e000      	b.n	800288c <HAL_ADC_ConfigChannel+0x128>
 800288a:	2300      	movs	r3, #0
 800288c:	461a      	mov	r2, r3
 800288e:	f7ff f8b5 	bl	80019fc <LL_ADC_SetOffsetSaturation>
 8002892:	e17b      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff f862 	bl	8001964 <LL_ADC_GetOffsetChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10a      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x15c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff f857 	bl	8001964 <LL_ADC_GetOffsetChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	0e9b      	lsrs	r3, r3, #26
 80028ba:	f003 021f 	and.w	r2, r3, #31
 80028be:	e01e      	b.n	80028fe <HAL_ADC_ConfigChannel+0x19a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff f84c 	bl	8001964 <LL_ADC_GetOffsetChannel>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80028ee:	2320      	movs	r3, #32
 80028f0:	e004      	b.n	80028fc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80028f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x1b2>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	0e9b      	lsrs	r3, r3, #26
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	e018      	b.n	8002948 <HAL_ADC_ConfigChannel+0x1e4>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800292a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800292e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800293a:	2320      	movs	r3, #32
 800293c:	e004      	b.n	8002948 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800293e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002948:	429a      	cmp	r2, r3
 800294a:	d106      	bne.n	800295a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2200      	movs	r2, #0
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff f81b 	bl	8001990 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2101      	movs	r1, #1
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe ffff 	bl	8001964 <LL_ADC_GetOffsetChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x222>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2101      	movs	r1, #1
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fff4 	bl	8001964 <LL_ADC_GetOffsetChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	f003 021f 	and.w	r2, r3, #31
 8002984:	e01e      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x260>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2101      	movs	r1, #1
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe ffe9 	bl	8001964 <LL_ADC_GetOffsetChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80029a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80029ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80029b4:	2320      	movs	r3, #32
 80029b6:	e004      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80029b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d105      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x278>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0e9b      	lsrs	r3, r3, #26
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	e018      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x2aa>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80029f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80029f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002a00:	2320      	movs	r3, #32
 8002a02:	e004      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002a04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d106      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2200      	movs	r2, #0
 8002a18:	2101      	movs	r1, #1
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe ffb8 	bl	8001990 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2102      	movs	r1, #2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe ff9c 	bl	8001964 <LL_ADC_GetOffsetChannel>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10a      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x2e8>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fe ff91 	bl	8001964 <LL_ADC_GetOffsetChannel>
 8002a42:	4603      	mov	r3, r0
 8002a44:	0e9b      	lsrs	r3, r3, #26
 8002a46:	f003 021f 	and.w	r2, r3, #31
 8002a4a:	e01e      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x326>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2102      	movs	r1, #2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe ff86 	bl	8001964 <LL_ADC_GetOffsetChannel>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002a7a:	2320      	movs	r3, #32
 8002a7c:	e004      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002a7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d105      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x33e>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	0e9b      	lsrs	r3, r3, #26
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	e016      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x36c>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ab4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ab6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002aba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	e004      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d106      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2102      	movs	r1, #2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe ff57 	bl	8001990 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2103      	movs	r1, #3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe ff3b 	bl	8001964 <LL_ADC_GetOffsetChannel>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10a      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x3aa>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2103      	movs	r1, #3
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe ff30 	bl	8001964 <LL_ADC_GetOffsetChannel>
 8002b04:	4603      	mov	r3, r0
 8002b06:	0e9b      	lsrs	r3, r3, #26
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	e017      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x3da>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2103      	movs	r1, #3
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe ff25 	bl	8001964 <LL_ADC_GetOffsetChannel>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b28:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002b30:	2320      	movs	r3, #32
 8002b32:	e003      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d105      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x3f2>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	0e9b      	lsrs	r3, r3, #26
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	e011      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x416>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b66:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002b6e:	2320      	movs	r3, #32
 8002b70:	e003      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b74:	fab3 f383 	clz	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d106      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2200      	movs	r2, #0
 8002b84:	2103      	movs	r1, #3
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe ff02 	bl	8001990 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff f881 	bl	8001c98 <LL_ADC_IsEnabled>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f040 813d 	bne.w	8002e18 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6819      	ldr	r1, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	461a      	mov	r2, r3
 8002bac:	f7fe ffd2 	bl	8001b54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4aa2      	ldr	r2, [pc, #648]	; (8002e40 <HAL_ADC_ConfigChannel+0x6dc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	f040 812e 	bne.w	8002e18 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10b      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x480>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0e9b      	lsrs	r3, r3, #26
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2b09      	cmp	r3, #9
 8002bda:	bf94      	ite	ls
 8002bdc:	2301      	movls	r3, #1
 8002bde:	2300      	movhi	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	e019      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x4b4>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002bfc:	2320      	movs	r3, #32
 8002bfe:	e003      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	3301      	adds	r3, #1
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	2b09      	cmp	r3, #9
 8002c10:	bf94      	ite	ls
 8002c12:	2301      	movls	r3, #1
 8002c14:	2300      	movhi	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d079      	beq.n	8002d10 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d107      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x4d4>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	0e9b      	lsrs	r3, r3, #26
 8002c2e:	3301      	adds	r3, #1
 8002c30:	069b      	lsls	r3, r3, #26
 8002c32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c36:	e015      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x500>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c48:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002c50:	2320      	movs	r3, #32
 8002c52:	e003      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	069b      	lsls	r3, r3, #26
 8002c60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x520>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	0e9b      	lsrs	r3, r3, #26
 8002c76:	3301      	adds	r3, #1
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	e017      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x550>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c94:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	e003      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	2101      	movs	r1, #1
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	ea42 0103 	orr.w	r1, r2, r3
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x576>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	0e9b      	lsrs	r3, r3, #26
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f003 021f 	and.w	r2, r3, #31
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	051b      	lsls	r3, r3, #20
 8002cd8:	e018      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x5a8>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	e003      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f003 021f 	and.w	r2, r3, #31
 8002d04:	4613      	mov	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4413      	add	r3, r2
 8002d0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	e07e      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d107      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x5c8>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0e9b      	lsrs	r3, r3, #26
 8002d22:	3301      	adds	r3, #1
 8002d24:	069b      	lsls	r3, r3, #26
 8002d26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d2a:	e015      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x5f4>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002d44:	2320      	movs	r3, #32
 8002d46:	e003      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	069b      	lsls	r3, r3, #26
 8002d54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x614>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	0e9b      	lsrs	r3, r3, #26
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	e017      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x644>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	61fb      	str	r3, [r7, #28]
  return result;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002d90:	2320      	movs	r3, #32
 8002d92:	e003      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	2101      	movs	r1, #1
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	ea42 0103 	orr.w	r1, r2, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10d      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x670>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	0e9b      	lsrs	r3, r3, #26
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	3b1e      	subs	r3, #30
 8002dcc:	051b      	lsls	r3, r3, #20
 8002dce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	e01b      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x6a8>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	613b      	str	r3, [r7, #16]
  return result;
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002dec:	2320      	movs	r3, #32
 8002dee:	e003      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f003 021f 	and.w	r2, r3, #31
 8002dfe:	4613      	mov	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	3b1e      	subs	r3, #30
 8002e06:	051b      	lsls	r3, r3, #20
 8002e08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e0c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e12:	4619      	mov	r1, r3
 8002e14:	f7fe fe72 	bl	8001afc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <HAL_ADC_ConfigChannel+0x6e0>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80be 	beq.w	8002fa2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e2e:	d004      	beq.n	8002e3a <HAL_ADC_ConfigChannel+0x6d6>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <HAL_ADC_ConfigChannel+0x6e4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d10a      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x6ec>
 8002e3a:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <HAL_ADC_ConfigChannel+0x6e8>)
 8002e3c:	e009      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x6ee>
 8002e3e:	bf00      	nop
 8002e40:	407f0000 	.word	0x407f0000
 8002e44:	80080000 	.word	0x80080000
 8002e48:	50000100 	.word	0x50000100
 8002e4c:	50000300 	.word	0x50000300
 8002e50:	4b59      	ldr	r3, [pc, #356]	; (8002fb8 <HAL_ADC_ConfigChannel+0x854>)
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fd54 	bl	8001900 <LL_ADC_GetCommonPathInternalCh>
 8002e58:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a56      	ldr	r2, [pc, #344]	; (8002fbc <HAL_ADC_ConfigChannel+0x858>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d004      	beq.n	8002e70 <HAL_ADC_ConfigChannel+0x70c>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a55      	ldr	r2, [pc, #340]	; (8002fc0 <HAL_ADC_ConfigChannel+0x85c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d13a      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d134      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e84:	d005      	beq.n	8002e92 <HAL_ADC_ConfigChannel+0x72e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a4e      	ldr	r2, [pc, #312]	; (8002fc4 <HAL_ADC_ConfigChannel+0x860>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	f040 8085 	bne.w	8002f9c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e9a:	d004      	beq.n	8002ea6 <HAL_ADC_ConfigChannel+0x742>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a49      	ldr	r2, [pc, #292]	; (8002fc8 <HAL_ADC_ConfigChannel+0x864>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x746>
 8002ea6:	4a49      	ldr	r2, [pc, #292]	; (8002fcc <HAL_ADC_ConfigChannel+0x868>)
 8002ea8:	e000      	b.n	8002eac <HAL_ADC_ConfigChannel+0x748>
 8002eaa:	4a43      	ldr	r2, [pc, #268]	; (8002fb8 <HAL_ADC_ConfigChannel+0x854>)
 8002eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	f7fe fd0f 	bl	80018da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ebc:	4b44      	ldr	r3, [pc, #272]	; (8002fd0 <HAL_ADC_ConfigChannel+0x86c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	4a44      	ldr	r2, [pc, #272]	; (8002fd4 <HAL_ADC_ConfigChannel+0x870>)
 8002ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec8:	099b      	lsrs	r3, r3, #6
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	4613      	mov	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ed6:	e002      	b.n	8002ede <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f9      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ee4:	e05a      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a3b      	ldr	r2, [pc, #236]	; (8002fd8 <HAL_ADC_ConfigChannel+0x874>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d125      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d11f      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a31      	ldr	r2, [pc, #196]	; (8002fc8 <HAL_ADC_ConfigChannel+0x864>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d104      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x7ac>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a34      	ldr	r2, [pc, #208]	; (8002fdc <HAL_ADC_ConfigChannel+0x878>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d047      	beq.n	8002fa0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f18:	d004      	beq.n	8002f24 <HAL_ADC_ConfigChannel+0x7c0>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2a      	ldr	r2, [pc, #168]	; (8002fc8 <HAL_ADC_ConfigChannel+0x864>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x7c4>
 8002f24:	4a29      	ldr	r2, [pc, #164]	; (8002fcc <HAL_ADC_ConfigChannel+0x868>)
 8002f26:	e000      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x7c6>
 8002f28:	4a23      	ldr	r2, [pc, #140]	; (8002fb8 <HAL_ADC_ConfigChannel+0x854>)
 8002f2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f32:	4619      	mov	r1, r3
 8002f34:	4610      	mov	r0, r2
 8002f36:	f7fe fcd0 	bl	80018da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f3a:	e031      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a27      	ldr	r2, [pc, #156]	; (8002fe0 <HAL_ADC_ConfigChannel+0x87c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d12d      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d127      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <HAL_ADC_ConfigChannel+0x864>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d022      	beq.n	8002fa2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f64:	d004      	beq.n	8002f70 <HAL_ADC_ConfigChannel+0x80c>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <HAL_ADC_ConfigChannel+0x864>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x810>
 8002f70:	4a16      	ldr	r2, [pc, #88]	; (8002fcc <HAL_ADC_ConfigChannel+0x868>)
 8002f72:	e000      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x812>
 8002f74:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <HAL_ADC_ConfigChannel+0x854>)
 8002f76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4610      	mov	r0, r2
 8002f82:	f7fe fcaa 	bl	80018da <LL_ADC_SetCommonPathInternalCh>
 8002f86:	e00c      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002f9a:	e002      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f9c:	bf00      	nop
 8002f9e:	e000      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fa0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002faa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	37d8      	adds	r7, #216	; 0xd8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	50000700 	.word	0x50000700
 8002fbc:	c3210000 	.word	0xc3210000
 8002fc0:	90c00010 	.word	0x90c00010
 8002fc4:	50000600 	.word	0x50000600
 8002fc8:	50000100 	.word	0x50000100
 8002fcc:	50000300 	.word	0x50000300
 8002fd0:	20000010 	.word	0x20000010
 8002fd4:	053e2d63 	.word	0x053e2d63
 8002fd8:	c7520000 	.word	0xc7520000
 8002fdc:	50000500 	.word	0x50000500
 8002fe0:	cb840000 	.word	0xcb840000

08002fe4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe fe4f 	bl	8001c98 <LL_ADC_IsEnabled>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d176      	bne.n	80030ee <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	4b3c      	ldr	r3, [pc, #240]	; (80030f8 <ADC_Enable+0x114>)
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00d      	beq.n	800302a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	f043 0210 	orr.w	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e062      	b.n	80030f0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe fe1e 	bl	8001c70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800303c:	d004      	beq.n	8003048 <ADC_Enable+0x64>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a2e      	ldr	r2, [pc, #184]	; (80030fc <ADC_Enable+0x118>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d101      	bne.n	800304c <ADC_Enable+0x68>
 8003048:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <ADC_Enable+0x11c>)
 800304a:	e000      	b.n	800304e <ADC_Enable+0x6a>
 800304c:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <ADC_Enable+0x120>)
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe fc56 	bl	8001900 <LL_ADC_GetCommonPathInternalCh>
 8003054:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800305a:	2b00      	cmp	r3, #0
 800305c:	d013      	beq.n	8003086 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800305e:	4b2a      	ldr	r3, [pc, #168]	; (8003108 <ADC_Enable+0x124>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	099b      	lsrs	r3, r3, #6
 8003064:	4a29      	ldr	r2, [pc, #164]	; (800310c <ADC_Enable+0x128>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	099b      	lsrs	r3, r3, #6
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	4613      	mov	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003078:	e002      	b.n	8003080 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	3b01      	subs	r3, #1
 800307e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f9      	bne.n	800307a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003086:	f7fe fc09 	bl	800189c <HAL_GetTick>
 800308a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800308c:	e028      	b.n	80030e0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe fe00 	bl	8001c98 <LL_ADC_IsEnabled>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d104      	bne.n	80030a8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe fde4 	bl	8001c70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030a8:	f7fe fbf8 	bl	800189c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d914      	bls.n	80030e0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d00d      	beq.n	80030e0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	f043 0210 	orr.w	r2, r3, #16
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e007      	b.n	80030f0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d1cf      	bne.n	800308e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	8000003f 	.word	0x8000003f
 80030fc:	50000100 	.word	0x50000100
 8003100:	50000300 	.word	0x50000300
 8003104:	50000700 	.word	0x50000700
 8003108:	20000010 	.word	0x20000010
 800310c:	053e2d63 	.word	0x053e2d63

08003110 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003122:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003126:	2b00      	cmp	r3, #0
 8003128:	d14b      	bne.n	80031c2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d021      	beq.n	8003188 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7fe fc85 	bl	8001a58 <LL_ADC_REG_IsTriggerSourceSWStart>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d032      	beq.n	80031ba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d12b      	bne.n	80031ba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003166:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d11f      	bne.n	80031ba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317e:	f043 0201 	orr.w	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	65da      	str	r2, [r3, #92]	; 0x5c
 8003186:	e018      	b.n	80031ba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d111      	bne.n	80031ba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d105      	bne.n	80031ba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b2:	f043 0201 	orr.w	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f7ff faaa 	bl	8002714 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031c0:	e00e      	b.n	80031e0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f7ff fabe 	bl	8002750 <HAL_ADC_ErrorCallback>
}
 80031d4:	e004      	b.n	80031e0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7ff fa96 	bl	8002728 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031fc:	bf00      	nop
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003222:	f043 0204 	orr.w	r2, r3, #4
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff fa90 	bl	8002750 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <LL_ADC_IsEnabled>:
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <LL_ADC_IsEnabled+0x18>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <LL_ADC_IsEnabled+0x1a>
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_ADC_REG_IsConversionOngoing>:
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b04      	cmp	r3, #4
 8003270:	d101      	bne.n	8003276 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b0a1      	sub	sp, #132	; 0x84
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003302:	2302      	movs	r3, #2
 8003304:	e0e7      	b.n	80034d6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800330e:	2300      	movs	r3, #0
 8003310:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003312:	2300      	movs	r3, #0
 8003314:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800331e:	d102      	bne.n	8003326 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003320:	4b6f      	ldr	r3, [pc, #444]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	e009      	b.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6e      	ldr	r2, [pc, #440]	; (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d102      	bne.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003330:	4b6d      	ldr	r3, [pc, #436]	; (80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	e001      	b.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0be      	b.n	80034d6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ff7f 	bl	800325e <LL_ADC_REG_IsConversionOngoing>
 8003360:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff ff79 	bl	800325e <LL_ADC_REG_IsConversionOngoing>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	f040 80a0 	bne.w	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003376:	2b00      	cmp	r3, #0
 8003378:	f040 809c 	bne.w	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003384:	d004      	beq.n	8003390 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a55      	ldr	r2, [pc, #340]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d101      	bne.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003390:	4b56      	ldr	r3, [pc, #344]	; (80034ec <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003392:	e000      	b.n	8003396 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003394:	4b56      	ldr	r3, [pc, #344]	; (80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003396:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d04b      	beq.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033b2:	035b      	lsls	r3, r3, #13
 80033b4:	430b      	orrs	r3, r1
 80033b6:	431a      	orrs	r2, r3
 80033b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033c4:	d004      	beq.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a45      	ldr	r2, [pc, #276]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d10f      	bne.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80033d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80033d4:	f7ff ff30 	bl	8003238 <LL_ADC_IsEnabled>
 80033d8:	4604      	mov	r4, r0
 80033da:	4841      	ldr	r0, [pc, #260]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033dc:	f7ff ff2c 	bl	8003238 <LL_ADC_IsEnabled>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4323      	orrs	r3, r4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	e012      	b.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80033f0:	483c      	ldr	r0, [pc, #240]	; (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033f2:	f7ff ff21 	bl	8003238 <LL_ADC_IsEnabled>
 80033f6:	4604      	mov	r4, r0
 80033f8:	483b      	ldr	r0, [pc, #236]	; (80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033fa:	f7ff ff1d 	bl	8003238 <LL_ADC_IsEnabled>
 80033fe:	4603      	mov	r3, r0
 8003400:	431c      	orrs	r4, r3
 8003402:	483c      	ldr	r0, [pc, #240]	; (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003404:	f7ff ff18 	bl	8003238 <LL_ADC_IsEnabled>
 8003408:	4603      	mov	r3, r0
 800340a:	4323      	orrs	r3, r4
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d056      	beq.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800341a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003422:	f023 030f 	bic.w	r3, r3, #15
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	6811      	ldr	r1, [r2, #0]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	6892      	ldr	r2, [r2, #8]
 800342e:	430a      	orrs	r2, r1
 8003430:	431a      	orrs	r2, r3
 8003432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003434:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003436:	e047      	b.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003442:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800344c:	d004      	beq.n	8003458 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a23      	ldr	r2, [pc, #140]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d10f      	bne.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003458:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800345c:	f7ff feec 	bl	8003238 <LL_ADC_IsEnabled>
 8003460:	4604      	mov	r4, r0
 8003462:	481f      	ldr	r0, [pc, #124]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003464:	f7ff fee8 	bl	8003238 <LL_ADC_IsEnabled>
 8003468:	4603      	mov	r3, r0
 800346a:	4323      	orrs	r3, r4
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e012      	b.n	800349e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003478:	481a      	ldr	r0, [pc, #104]	; (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800347a:	f7ff fedd 	bl	8003238 <LL_ADC_IsEnabled>
 800347e:	4604      	mov	r4, r0
 8003480:	4819      	ldr	r0, [pc, #100]	; (80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003482:	f7ff fed9 	bl	8003238 <LL_ADC_IsEnabled>
 8003486:	4603      	mov	r3, r0
 8003488:	431c      	orrs	r4, r3
 800348a:	481a      	ldr	r0, [pc, #104]	; (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800348c:	f7ff fed4 	bl	8003238 <LL_ADC_IsEnabled>
 8003490:	4603      	mov	r3, r0
 8003492:	4323      	orrs	r3, r4
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d012      	beq.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034aa:	f023 030f 	bic.w	r3, r3, #15
 80034ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80034b0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034b2:	e009      	b.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	f043 0220 	orr.w	r2, r3, #32
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80034c6:	e000      	b.n	80034ca <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3784      	adds	r7, #132	; 0x84
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd90      	pop	{r4, r7, pc}
 80034de:	bf00      	nop
 80034e0:	50000100 	.word	0x50000100
 80034e4:	50000400 	.word	0x50000400
 80034e8:	50000500 	.word	0x50000500
 80034ec:	50000300 	.word	0x50000300
 80034f0:	50000700 	.word	0x50000700
 80034f4:	50000600 	.word	0x50000600

080034f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003508:	4b0c      	ldr	r3, [pc, #48]	; (800353c <__NVIC_SetPriorityGrouping+0x44>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003514:	4013      	ands	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800352a:	4a04      	ldr	r2, [pc, #16]	; (800353c <__NVIC_SetPriorityGrouping+0x44>)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	60d3      	str	r3, [r2, #12]
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <__NVIC_GetPriorityGrouping+0x18>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	0a1b      	lsrs	r3, r3, #8
 800354a:	f003 0307 	and.w	r3, r3, #7
}
 800354e:	4618      	mov	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	2b00      	cmp	r3, #0
 800356c:	db0b      	blt.n	8003586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	f003 021f 	and.w	r2, r3, #31
 8003574:	4907      	ldr	r1, [pc, #28]	; (8003594 <__NVIC_EnableIRQ+0x38>)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2001      	movs	r0, #1
 800357e:	fa00 f202 	lsl.w	r2, r0, r2
 8003582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	e000e100 	.word	0xe000e100

08003598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	6039      	str	r1, [r7, #0]
 80035a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	db0a      	blt.n	80035c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	490c      	ldr	r1, [pc, #48]	; (80035e4 <__NVIC_SetPriority+0x4c>)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	0112      	lsls	r2, r2, #4
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	440b      	add	r3, r1
 80035bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c0:	e00a      	b.n	80035d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4908      	ldr	r1, [pc, #32]	; (80035e8 <__NVIC_SetPriority+0x50>)
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	3b04      	subs	r3, #4
 80035d0:	0112      	lsls	r2, r2, #4
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	440b      	add	r3, r1
 80035d6:	761a      	strb	r2, [r3, #24]
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000e100 	.word	0xe000e100
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b089      	sub	sp, #36	; 0x24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f1c3 0307 	rsb	r3, r3, #7
 8003606:	2b04      	cmp	r3, #4
 8003608:	bf28      	it	cs
 800360a:	2304      	movcs	r3, #4
 800360c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3304      	adds	r3, #4
 8003612:	2b06      	cmp	r3, #6
 8003614:	d902      	bls.n	800361c <NVIC_EncodePriority+0x30>
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3b03      	subs	r3, #3
 800361a:	e000      	b.n	800361e <NVIC_EncodePriority+0x32>
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003620:	f04f 32ff 	mov.w	r2, #4294967295
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43da      	mvns	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	401a      	ands	r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003634:	f04f 31ff 	mov.w	r1, #4294967295
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	43d9      	mvns	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003644:	4313      	orrs	r3, r2
         );
}
 8003646:	4618      	mov	r0, r3
 8003648:	3724      	adds	r7, #36	; 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003664:	d301      	bcc.n	800366a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003666:	2301      	movs	r3, #1
 8003668:	e00f      	b.n	800368a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800366a:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <SysTick_Config+0x40>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3b01      	subs	r3, #1
 8003670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003672:	210f      	movs	r1, #15
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	f7ff ff8e 	bl	8003598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <SysTick_Config+0x40>)
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003682:	4b04      	ldr	r3, [pc, #16]	; (8003694 <SysTick_Config+0x40>)
 8003684:	2207      	movs	r2, #7
 8003686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	e000e010 	.word	0xe000e010

08003698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ff29 	bl	80034f8 <__NVIC_SetPriorityGrouping>
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b086      	sub	sp, #24
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	4603      	mov	r3, r0
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036bc:	f7ff ff40 	bl	8003540 <__NVIC_GetPriorityGrouping>
 80036c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	6978      	ldr	r0, [r7, #20]
 80036c8:	f7ff ff90 	bl	80035ec <NVIC_EncodePriority>
 80036cc:	4602      	mov	r2, r0
 80036ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d2:	4611      	mov	r1, r2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff5f 	bl	8003598 <__NVIC_SetPriority>
}
 80036da:	bf00      	nop
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	4603      	mov	r3, r0
 80036ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff ff33 	bl	800355c <__NVIC_EnableIRQ>
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ffa4 	bl	8003654 <SysTick_Config>
 800370c:	4603      	mov	r3, r0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e08d      	b.n	8003846 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	4b47      	ldr	r3, [pc, #284]	; (8003850 <HAL_DMA_Init+0x138>)
 8003732:	429a      	cmp	r2, r3
 8003734:	d80f      	bhi.n	8003756 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	4b45      	ldr	r3, [pc, #276]	; (8003854 <HAL_DMA_Init+0x13c>)
 800373e:	4413      	add	r3, r2
 8003740:	4a45      	ldr	r2, [pc, #276]	; (8003858 <HAL_DMA_Init+0x140>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	091b      	lsrs	r3, r3, #4
 8003748:	009a      	lsls	r2, r3, #2
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a42      	ldr	r2, [pc, #264]	; (800385c <HAL_DMA_Init+0x144>)
 8003752:	641a      	str	r2, [r3, #64]	; 0x40
 8003754:	e00e      	b.n	8003774 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	4b40      	ldr	r3, [pc, #256]	; (8003860 <HAL_DMA_Init+0x148>)
 800375e:	4413      	add	r3, r2
 8003760:	4a3d      	ldr	r2, [pc, #244]	; (8003858 <HAL_DMA_Init+0x140>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	091b      	lsrs	r3, r3, #4
 8003768:	009a      	lsls	r2, r3, #2
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a3c      	ldr	r2, [pc, #240]	; (8003864 <HAL_DMA_Init+0x14c>)
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003798:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fa76 	bl	8003cb8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d4:	d102      	bne.n	80037dc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037f0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d010      	beq.n	800381c <HAL_DMA_Init+0x104>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d80c      	bhi.n	800381c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fa96 	bl	8003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	e008      	b.n	800382e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40020407 	.word	0x40020407
 8003854:	bffdfff8 	.word	0xbffdfff8
 8003858:	cccccccd 	.word	0xcccccccd
 800385c:	40020000 	.word	0x40020000
 8003860:	bffdfbf8 	.word	0xbffdfbf8
 8003864:	40020400 	.word	0x40020400

08003868 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_DMA_Start_IT+0x20>
 8003884:	2302      	movs	r3, #2
 8003886:	e066      	b.n	8003956 <HAL_DMA_Start_IT+0xee>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d155      	bne.n	8003948 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0201 	bic.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f9bb 	bl	8003c3c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d008      	beq.n	80038e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 020e 	orr.w	r2, r2, #14
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	e00f      	b.n	8003900 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0204 	bic.w	r2, r2, #4
 80038ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 020a 	orr.w	r2, r2, #10
 80038fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d007      	beq.n	800391e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800391c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003934:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	e005      	b.n	8003954 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003950:	2302      	movs	r3, #2
 8003952:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003954:	7dfb      	ldrb	r3, [r7, #23]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800395e:	b480      	push	{r7}
 8003960:	b085      	sub	sp, #20
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d005      	beq.n	8003982 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2204      	movs	r2, #4
 800397a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
 8003980:	e037      	b.n	80039f2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 020e 	bic.w	r2, r2, #14
 8003990:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039a0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f003 021f 	and.w	r2, r3, #31
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2101      	movs	r1, #1
 80039c0:	fa01 f202 	lsl.w	r2, r1, r2
 80039c4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039ce:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00c      	beq.n	80039f2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039e6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039f0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d00d      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	e047      	b.n	8003ad4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 020e 	bic.w	r2, r2, #14
 8003a52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	f003 021f 	and.w	r2, r3, #31
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	2101      	movs	r1, #1
 8003a82:	fa01 f202 	lsl.w	r2, r1, r2
 8003a86:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a90:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00c      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aa8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ab2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4798      	blx	r3
    }
  }
  return status;
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	f003 031f 	and.w	r3, r3, #31
 8003afe:	2204      	movs	r2, #4
 8003b00:	409a      	lsls	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d026      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x7a>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d021      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d107      	bne.n	8003b32 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0204 	bic.w	r2, r2, #4
 8003b30:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	f003 021f 	and.w	r2, r3, #31
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	2104      	movs	r1, #4
 8003b40:	fa01 f202 	lsl.w	r2, r1, r2
 8003b44:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d071      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b56:	e06c      	b.n	8003c32 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	2202      	movs	r2, #2
 8003b62:	409a      	lsls	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d02e      	beq.n	8003bca <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d029      	beq.n	8003bca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 020a 	bic.w	r2, r2, #10
 8003b92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	f003 021f 	and.w	r2, r3, #31
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	2102      	movs	r1, #2
 8003baa:	fa01 f202 	lsl.w	r2, r1, r2
 8003bae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d038      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003bc8:	e033      	b.n	8003c32 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d02a      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d025      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 020e 	bic.w	r2, r2, #14
 8003bf6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	f003 021f 	and.w	r2, r3, #31
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	2101      	movs	r1, #1
 8003c06:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d004      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c32:	bf00      	nop
 8003c34:	bf00      	nop
}
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c52:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c64:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	f003 021f 	and.w	r2, r3, #31
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	2101      	movs	r1, #1
 8003c74:	fa01 f202 	lsl.w	r2, r1, r2
 8003c78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b10      	cmp	r3, #16
 8003c88:	d108      	bne.n	8003c9c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c9a:	e007      	b.n	8003cac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d802      	bhi.n	8003cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ccc:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e001      	b.n	8003cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003cd4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	3b08      	subs	r3, #8
 8003ce2:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	009a      	lsls	r2, r3, #2
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a0b      	ldr	r2, [pc, #44]	; (8003d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d02:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 031f 	and.w	r3, r3, #31
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	409a      	lsls	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40020407 	.word	0x40020407
 8003d24:	40020800 	.word	0x40020800
 8003d28:	40020820 	.word	0x40020820
 8003d2c:	cccccccd 	.word	0xcccccccd
 8003d30:	40020880 	.word	0x40020880

08003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d56:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	2201      	movs	r2, #1
 8003d62:	409a      	lsls	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	1000823f 	.word	0x1000823f
 8003d78:	40020940 	.word	0x40020940

08003d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d8a:	e15a      	b.n	8004042 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	2101      	movs	r1, #1
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	fa01 f303 	lsl.w	r3, r1, r3
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 814c 	beq.w	800403c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d005      	beq.n	8003dbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d130      	bne.n	8003e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003df2:	2201      	movs	r2, #1
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	091b      	lsrs	r3, r3, #4
 8003e08:	f003 0201 	and.w	r2, r3, #1
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d017      	beq.n	8003e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	2203      	movs	r2, #3
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d123      	bne.n	8003eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	08da      	lsrs	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3208      	adds	r2, #8
 8003e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	220f      	movs	r2, #15
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	08da      	lsrs	r2, r3, #3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3208      	adds	r2, #8
 8003ea8:	6939      	ldr	r1, [r7, #16]
 8003eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	2203      	movs	r2, #3
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0203 	and.w	r2, r3, #3
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80a6 	beq.w	800403c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ef0:	4b5b      	ldr	r3, [pc, #364]	; (8004060 <HAL_GPIO_Init+0x2e4>)
 8003ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef4:	4a5a      	ldr	r2, [pc, #360]	; (8004060 <HAL_GPIO_Init+0x2e4>)
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	6613      	str	r3, [r2, #96]	; 0x60
 8003efc:	4b58      	ldr	r3, [pc, #352]	; (8004060 <HAL_GPIO_Init+0x2e4>)
 8003efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f08:	4a56      	ldr	r2, [pc, #344]	; (8004064 <HAL_GPIO_Init+0x2e8>)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	089b      	lsrs	r3, r3, #2
 8003f0e:	3302      	adds	r3, #2
 8003f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	220f      	movs	r2, #15
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f32:	d01f      	beq.n	8003f74 <HAL_GPIO_Init+0x1f8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a4c      	ldr	r2, [pc, #304]	; (8004068 <HAL_GPIO_Init+0x2ec>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d019      	beq.n	8003f70 <HAL_GPIO_Init+0x1f4>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a4b      	ldr	r2, [pc, #300]	; (800406c <HAL_GPIO_Init+0x2f0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d013      	beq.n	8003f6c <HAL_GPIO_Init+0x1f0>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a4a      	ldr	r2, [pc, #296]	; (8004070 <HAL_GPIO_Init+0x2f4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00d      	beq.n	8003f68 <HAL_GPIO_Init+0x1ec>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a49      	ldr	r2, [pc, #292]	; (8004074 <HAL_GPIO_Init+0x2f8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d007      	beq.n	8003f64 <HAL_GPIO_Init+0x1e8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a48      	ldr	r2, [pc, #288]	; (8004078 <HAL_GPIO_Init+0x2fc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d101      	bne.n	8003f60 <HAL_GPIO_Init+0x1e4>
 8003f5c:	2305      	movs	r3, #5
 8003f5e:	e00a      	b.n	8003f76 <HAL_GPIO_Init+0x1fa>
 8003f60:	2306      	movs	r3, #6
 8003f62:	e008      	b.n	8003f76 <HAL_GPIO_Init+0x1fa>
 8003f64:	2304      	movs	r3, #4
 8003f66:	e006      	b.n	8003f76 <HAL_GPIO_Init+0x1fa>
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e004      	b.n	8003f76 <HAL_GPIO_Init+0x1fa>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e002      	b.n	8003f76 <HAL_GPIO_Init+0x1fa>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <HAL_GPIO_Init+0x1fa>
 8003f74:	2300      	movs	r3, #0
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	f002 0203 	and.w	r2, r2, #3
 8003f7c:	0092      	lsls	r2, r2, #2
 8003f7e:	4093      	lsls	r3, r2
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f86:	4937      	ldr	r1, [pc, #220]	; (8004064 <HAL_GPIO_Init+0x2e8>)
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	089b      	lsrs	r3, r3, #2
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f94:	4b39      	ldr	r3, [pc, #228]	; (800407c <HAL_GPIO_Init+0x300>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fb8:	4a30      	ldr	r2, [pc, #192]	; (800407c <HAL_GPIO_Init+0x300>)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fbe:	4b2f      	ldr	r3, [pc, #188]	; (800407c <HAL_GPIO_Init+0x300>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fe2:	4a26      	ldr	r2, [pc, #152]	; (800407c <HAL_GPIO_Init+0x300>)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003fe8:	4b24      	ldr	r3, [pc, #144]	; (800407c <HAL_GPIO_Init+0x300>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800400c:	4a1b      	ldr	r2, [pc, #108]	; (800407c <HAL_GPIO_Init+0x300>)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004012:	4b1a      	ldr	r3, [pc, #104]	; (800407c <HAL_GPIO_Init+0x300>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	43db      	mvns	r3, r3
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4013      	ands	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004036:	4a11      	ldr	r2, [pc, #68]	; (800407c <HAL_GPIO_Init+0x300>)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	3301      	adds	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	f47f ae9d 	bne.w	8003d8c <HAL_GPIO_Init+0x10>
  }
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	40021000 	.word	0x40021000
 8004064:	40010000 	.word	0x40010000
 8004068:	48000400 	.word	0x48000400
 800406c:	48000800 	.word	0x48000800
 8004070:	48000c00 	.word	0x48000c00
 8004074:	48001000 	.word	0x48001000
 8004078:	48001400 	.word	0x48001400
 800407c:	40010400 	.word	0x40010400

08004080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	807b      	strh	r3, [r7, #2]
 800408c:	4613      	mov	r3, r2
 800408e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004090:	787b      	ldrb	r3, [r7, #1]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004096:	887a      	ldrh	r2, [r7, #2]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800409c:	e002      	b.n	80040a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800409e:	887a      	ldrh	r2, [r7, #2]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040c2:	887a      	ldrh	r2, [r7, #2]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4013      	ands	r3, r2
 80040c8:	041a      	lsls	r2, r3, #16
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	43d9      	mvns	r1, r3
 80040ce:	887b      	ldrh	r3, [r7, #2]
 80040d0:	400b      	ands	r3, r1
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	619a      	str	r2, [r3, #24]
}
 80040d8:	bf00      	nop
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040ee:	4b08      	ldr	r3, [pc, #32]	; (8004110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	88fb      	ldrh	r3, [r7, #6]
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d006      	beq.n	8004108 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040fa:	4a05      	ldr	r2, [pc, #20]	; (8004110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004100:	88fb      	ldrh	r3, [r7, #6]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fd f800 	bl	8001108 <HAL_GPIO_EXTI_Callback>
  }
}
 8004108:	bf00      	nop
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40010400 	.word	0x40010400

08004114 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d141      	bne.n	80041a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004122:	4b4b      	ldr	r3, [pc, #300]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800412a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412e:	d131      	bne.n	8004194 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004130:	4b47      	ldr	r3, [pc, #284]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004136:	4a46      	ldr	r2, [pc, #280]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800413c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004140:	4b43      	ldr	r3, [pc, #268]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004148:	4a41      	ldr	r2, [pc, #260]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800414e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004150:	4b40      	ldr	r3, [pc, #256]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2232      	movs	r2, #50	; 0x32
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	4a3f      	ldr	r2, [pc, #252]	; (8004258 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	0c9b      	lsrs	r3, r3, #18
 8004162:	3301      	adds	r3, #1
 8004164:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004166:	e002      	b.n	800416e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3b01      	subs	r3, #1
 800416c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800416e:	4b38      	ldr	r3, [pc, #224]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417a:	d102      	bne.n	8004182 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f2      	bne.n	8004168 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004182:	4b33      	ldr	r3, [pc, #204]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418e:	d158      	bne.n	8004242 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e057      	b.n	8004244 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004194:	4b2e      	ldr	r3, [pc, #184]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800419a:	4a2d      	ldr	r2, [pc, #180]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800419c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041a4:	e04d      	b.n	8004242 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ac:	d141      	bne.n	8004232 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041ae:	4b28      	ldr	r3, [pc, #160]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ba:	d131      	bne.n	8004220 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041bc:	4b24      	ldr	r3, [pc, #144]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041c2:	4a23      	ldr	r2, [pc, #140]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041cc:	4b20      	ldr	r3, [pc, #128]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041d4:	4a1e      	ldr	r2, [pc, #120]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041dc:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2232      	movs	r2, #50	; 0x32
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	4a1c      	ldr	r2, [pc, #112]	; (8004258 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ec:	0c9b      	lsrs	r3, r3, #18
 80041ee:	3301      	adds	r3, #1
 80041f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041f2:	e002      	b.n	80041fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041fa:	4b15      	ldr	r3, [pc, #84]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004206:	d102      	bne.n	800420e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f2      	bne.n	80041f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800420e:	4b10      	ldr	r3, [pc, #64]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421a:	d112      	bne.n	8004242 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e011      	b.n	8004244 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004226:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004230:	e007      	b.n	8004242 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004232:	4b07      	ldr	r3, [pc, #28]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800423a:	4a05      	ldr	r2, [pc, #20]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004240:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	40007000 	.word	0x40007000
 8004254:	20000010 	.word	0x20000010
 8004258:	431bde83 	.word	0x431bde83

0800425c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	4a04      	ldr	r2, [pc, #16]	; (8004278 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800426a:	6093      	str	r3, [r2, #8]
}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40007000 	.word	0x40007000

0800427c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e2fe      	b.n	800488c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d075      	beq.n	8004386 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800429a:	4b97      	ldr	r3, [pc, #604]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042a4:	4b94      	ldr	r3, [pc, #592]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b0c      	cmp	r3, #12
 80042b2:	d102      	bne.n	80042ba <HAL_RCC_OscConfig+0x3e>
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d002      	beq.n	80042c0 <HAL_RCC_OscConfig+0x44>
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d10b      	bne.n	80042d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c0:	4b8d      	ldr	r3, [pc, #564]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d05b      	beq.n	8004384 <HAL_RCC_OscConfig+0x108>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d157      	bne.n	8004384 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e2d9      	b.n	800488c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e0:	d106      	bne.n	80042f0 <HAL_RCC_OscConfig+0x74>
 80042e2:	4b85      	ldr	r3, [pc, #532]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a84      	ldr	r2, [pc, #528]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e01d      	b.n	800432c <HAL_RCC_OscConfig+0xb0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f8:	d10c      	bne.n	8004314 <HAL_RCC_OscConfig+0x98>
 80042fa:	4b7f      	ldr	r3, [pc, #508]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a7e      	ldr	r2, [pc, #504]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 8004300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	4b7c      	ldr	r3, [pc, #496]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a7b      	ldr	r2, [pc, #492]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 800430c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	e00b      	b.n	800432c <HAL_RCC_OscConfig+0xb0>
 8004314:	4b78      	ldr	r3, [pc, #480]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a77      	ldr	r2, [pc, #476]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 800431a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	4b75      	ldr	r3, [pc, #468]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a74      	ldr	r2, [pc, #464]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 8004326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800432a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d013      	beq.n	800435c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fd fab2 	bl	800189c <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433c:	f7fd faae 	bl	800189c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	; 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e29e      	b.n	800488c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800434e:	4b6a      	ldr	r3, [pc, #424]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0xc0>
 800435a:	e014      	b.n	8004386 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435c:	f7fd fa9e 	bl	800189c <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004364:	f7fd fa9a 	bl	800189c <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	; 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e28a      	b.n	800488c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004376:	4b60      	ldr	r3, [pc, #384]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0xe8>
 8004382:	e000      	b.n	8004386 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d075      	beq.n	800447e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004392:	4b59      	ldr	r3, [pc, #356]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800439c:	4b56      	ldr	r3, [pc, #344]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0303 	and.w	r3, r3, #3
 80043a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b0c      	cmp	r3, #12
 80043aa:	d102      	bne.n	80043b2 <HAL_RCC_OscConfig+0x136>
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d002      	beq.n	80043b8 <HAL_RCC_OscConfig+0x13c>
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d11f      	bne.n	80043f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043b8:	4b4f      	ldr	r3, [pc, #316]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_RCC_OscConfig+0x154>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e25d      	b.n	800488c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d0:	4b49      	ldr	r3, [pc, #292]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	061b      	lsls	r3, r3, #24
 80043de:	4946      	ldr	r1, [pc, #280]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043e4:	4b45      	ldr	r3, [pc, #276]	; (80044fc <HAL_RCC_OscConfig+0x280>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fd fa0b 	bl	8001804 <HAL_InitTick>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d043      	beq.n	800447c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e249      	b.n	800488c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d023      	beq.n	8004448 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004400:	4b3d      	ldr	r3, [pc, #244]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a3c      	ldr	r2, [pc, #240]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 8004406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800440a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fd fa46 	bl	800189c <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004414:	f7fd fa42 	bl	800189c <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e232      	b.n	800488c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004426:	4b34      	ldr	r3, [pc, #208]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0f0      	beq.n	8004414 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004432:	4b31      	ldr	r3, [pc, #196]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	061b      	lsls	r3, r3, #24
 8004440:	492d      	ldr	r1, [pc, #180]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 8004442:	4313      	orrs	r3, r2
 8004444:	604b      	str	r3, [r1, #4]
 8004446:	e01a      	b.n	800447e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004448:	4b2b      	ldr	r3, [pc, #172]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a2a      	ldr	r2, [pc, #168]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 800444e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004454:	f7fd fa22 	bl	800189c <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445c:	f7fd fa1e 	bl	800189c <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e20e      	b.n	800488c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800446e:	4b22      	ldr	r3, [pc, #136]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x1e0>
 800447a:	e000      	b.n	800447e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800447c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d041      	beq.n	800450e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d01c      	beq.n	80044cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004492:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 8004494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004498:	4a17      	ldr	r2, [pc, #92]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a2:	f7fd f9fb 	bl	800189c <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044aa:	f7fd f9f7 	bl	800189c <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e1e7      	b.n	800488c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044bc:	4b0e      	ldr	r3, [pc, #56]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 80044be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0ef      	beq.n	80044aa <HAL_RCC_OscConfig+0x22e>
 80044ca:	e020      	b.n	800450e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 80044ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044d2:	4a09      	ldr	r2, [pc, #36]	; (80044f8 <HAL_RCC_OscConfig+0x27c>)
 80044d4:	f023 0301 	bic.w	r3, r3, #1
 80044d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044dc:	f7fd f9de 	bl	800189c <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044e2:	e00d      	b.n	8004500 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e4:	f7fd f9da 	bl	800189c <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d906      	bls.n	8004500 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e1ca      	b.n	800488c <HAL_RCC_OscConfig+0x610>
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000
 80044fc:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004500:	4b8c      	ldr	r3, [pc, #560]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 8004502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1ea      	bne.n	80044e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80a6 	beq.w	8004668 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451c:	2300      	movs	r3, #0
 800451e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004520:	4b84      	ldr	r3, [pc, #528]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_OscConfig+0x2b4>
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <HAL_RCC_OscConfig+0x2b6>
 8004530:	2300      	movs	r3, #0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00d      	beq.n	8004552 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004536:	4b7f      	ldr	r3, [pc, #508]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 8004538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453a:	4a7e      	ldr	r2, [pc, #504]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004540:	6593      	str	r3, [r2, #88]	; 0x58
 8004542:	4b7c      	ldr	r3, [pc, #496]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 8004544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800454e:	2301      	movs	r3, #1
 8004550:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004552:	4b79      	ldr	r3, [pc, #484]	; (8004738 <HAL_RCC_OscConfig+0x4bc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d118      	bne.n	8004590 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800455e:	4b76      	ldr	r3, [pc, #472]	; (8004738 <HAL_RCC_OscConfig+0x4bc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a75      	ldr	r2, [pc, #468]	; (8004738 <HAL_RCC_OscConfig+0x4bc>)
 8004564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456a:	f7fd f997 	bl	800189c <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004572:	f7fd f993 	bl	800189c <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e183      	b.n	800488c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004584:	4b6c      	ldr	r3, [pc, #432]	; (8004738 <HAL_RCC_OscConfig+0x4bc>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d108      	bne.n	80045aa <HAL_RCC_OscConfig+0x32e>
 8004598:	4b66      	ldr	r3, [pc, #408]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 800459a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459e:	4a65      	ldr	r2, [pc, #404]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045a8:	e024      	b.n	80045f4 <HAL_RCC_OscConfig+0x378>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	d110      	bne.n	80045d4 <HAL_RCC_OscConfig+0x358>
 80045b2:	4b60      	ldr	r3, [pc, #384]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 80045b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b8:	4a5e      	ldr	r2, [pc, #376]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 80045ba:	f043 0304 	orr.w	r3, r3, #4
 80045be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045c2:	4b5c      	ldr	r3, [pc, #368]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 80045c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c8:	4a5a      	ldr	r2, [pc, #360]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045d2:	e00f      	b.n	80045f4 <HAL_RCC_OscConfig+0x378>
 80045d4:	4b57      	ldr	r3, [pc, #348]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045da:	4a56      	ldr	r2, [pc, #344]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045e4:	4b53      	ldr	r3, [pc, #332]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	4a52      	ldr	r2, [pc, #328]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 80045ec:	f023 0304 	bic.w	r3, r3, #4
 80045f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d016      	beq.n	800462a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fc:	f7fd f94e 	bl	800189c <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004602:	e00a      	b.n	800461a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004604:	f7fd f94a 	bl	800189c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e138      	b.n	800488c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800461a:	4b46      	ldr	r3, [pc, #280]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0ed      	beq.n	8004604 <HAL_RCC_OscConfig+0x388>
 8004628:	e015      	b.n	8004656 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462a:	f7fd f937 	bl	800189c <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004630:	e00a      	b.n	8004648 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004632:	f7fd f933 	bl	800189c <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e121      	b.n	800488c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004648:	4b3a      	ldr	r3, [pc, #232]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1ed      	bne.n	8004632 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004656:	7ffb      	ldrb	r3, [r7, #31]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d105      	bne.n	8004668 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800465c:	4b35      	ldr	r3, [pc, #212]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 800465e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004660:	4a34      	ldr	r2, [pc, #208]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 8004662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004666:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d03c      	beq.n	80046ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01c      	beq.n	80046b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800467c:	4b2d      	ldr	r3, [pc, #180]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 800467e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004682:	4a2c      	ldr	r2, [pc, #176]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468c:	f7fd f906 	bl	800189c <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004694:	f7fd f902 	bl	800189c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e0f2      	b.n	800488c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046a6:	4b23      	ldr	r3, [pc, #140]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 80046a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0ef      	beq.n	8004694 <HAL_RCC_OscConfig+0x418>
 80046b4:	e01b      	b.n	80046ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046b6:	4b1f      	ldr	r3, [pc, #124]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 80046b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046bc:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c6:	f7fd f8e9 	bl	800189c <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ce:	f7fd f8e5 	bl	800189c <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e0d5      	b.n	800488c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046e0:	4b14      	ldr	r3, [pc, #80]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 80046e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1ef      	bne.n	80046ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 80c9 	beq.w	800488a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046f8:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 030c 	and.w	r3, r3, #12
 8004700:	2b0c      	cmp	r3, #12
 8004702:	f000 8083 	beq.w	800480c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d15e      	bne.n	80047cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470e:	4b09      	ldr	r3, [pc, #36]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a08      	ldr	r2, [pc, #32]	; (8004734 <HAL_RCC_OscConfig+0x4b8>)
 8004714:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471a:	f7fd f8bf 	bl	800189c <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004720:	e00c      	b.n	800473c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004722:	f7fd f8bb 	bl	800189c <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d905      	bls.n	800473c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e0ab      	b.n	800488c <HAL_RCC_OscConfig+0x610>
 8004734:	40021000 	.word	0x40021000
 8004738:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800473c:	4b55      	ldr	r3, [pc, #340]	; (8004894 <HAL_RCC_OscConfig+0x618>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1ec      	bne.n	8004722 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004748:	4b52      	ldr	r3, [pc, #328]	; (8004894 <HAL_RCC_OscConfig+0x618>)
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	4b52      	ldr	r3, [pc, #328]	; (8004898 <HAL_RCC_OscConfig+0x61c>)
 800474e:	4013      	ands	r3, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6a11      	ldr	r1, [r2, #32]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004758:	3a01      	subs	r2, #1
 800475a:	0112      	lsls	r2, r2, #4
 800475c:	4311      	orrs	r1, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004762:	0212      	lsls	r2, r2, #8
 8004764:	4311      	orrs	r1, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800476a:	0852      	lsrs	r2, r2, #1
 800476c:	3a01      	subs	r2, #1
 800476e:	0552      	lsls	r2, r2, #21
 8004770:	4311      	orrs	r1, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004776:	0852      	lsrs	r2, r2, #1
 8004778:	3a01      	subs	r2, #1
 800477a:	0652      	lsls	r2, r2, #25
 800477c:	4311      	orrs	r1, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004782:	06d2      	lsls	r2, r2, #27
 8004784:	430a      	orrs	r2, r1
 8004786:	4943      	ldr	r1, [pc, #268]	; (8004894 <HAL_RCC_OscConfig+0x618>)
 8004788:	4313      	orrs	r3, r2
 800478a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800478c:	4b41      	ldr	r3, [pc, #260]	; (8004894 <HAL_RCC_OscConfig+0x618>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a40      	ldr	r2, [pc, #256]	; (8004894 <HAL_RCC_OscConfig+0x618>)
 8004792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004796:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004798:	4b3e      	ldr	r3, [pc, #248]	; (8004894 <HAL_RCC_OscConfig+0x618>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4a3d      	ldr	r2, [pc, #244]	; (8004894 <HAL_RCC_OscConfig+0x618>)
 800479e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a4:	f7fd f87a 	bl	800189c <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ac:	f7fd f876 	bl	800189c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e066      	b.n	800488c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047be:	4b35      	ldr	r3, [pc, #212]	; (8004894 <HAL_RCC_OscConfig+0x618>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x530>
 80047ca:	e05e      	b.n	800488a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047cc:	4b31      	ldr	r3, [pc, #196]	; (8004894 <HAL_RCC_OscConfig+0x618>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a30      	ldr	r2, [pc, #192]	; (8004894 <HAL_RCC_OscConfig+0x618>)
 80047d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d8:	f7fd f860 	bl	800189c <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e0:	f7fd f85c 	bl	800189c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e04c      	b.n	800488c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047f2:	4b28      	ldr	r3, [pc, #160]	; (8004894 <HAL_RCC_OscConfig+0x618>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80047fe:	4b25      	ldr	r3, [pc, #148]	; (8004894 <HAL_RCC_OscConfig+0x618>)
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	4924      	ldr	r1, [pc, #144]	; (8004894 <HAL_RCC_OscConfig+0x618>)
 8004804:	4b25      	ldr	r3, [pc, #148]	; (800489c <HAL_RCC_OscConfig+0x620>)
 8004806:	4013      	ands	r3, r2
 8004808:	60cb      	str	r3, [r1, #12]
 800480a:	e03e      	b.n	800488a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e039      	b.n	800488c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004818:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <HAL_RCC_OscConfig+0x618>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f003 0203 	and.w	r2, r3, #3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	429a      	cmp	r2, r3
 800482a:	d12c      	bne.n	8004886 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	3b01      	subs	r3, #1
 8004838:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d123      	bne.n	8004886 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800484a:	429a      	cmp	r2, r3
 800484c:	d11b      	bne.n	8004886 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d113      	bne.n	8004886 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	3b01      	subs	r3, #1
 800486c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d109      	bne.n	8004886 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487c:	085b      	lsrs	r3, r3, #1
 800487e:	3b01      	subs	r3, #1
 8004880:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004882:	429a      	cmp	r2, r3
 8004884:	d001      	beq.n	800488a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3720      	adds	r7, #32
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40021000 	.word	0x40021000
 8004898:	019f800c 	.word	0x019f800c
 800489c:	feeefffc 	.word	0xfeeefffc

080048a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e11e      	b.n	8004af6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048b8:	4b91      	ldr	r3, [pc, #580]	; (8004b00 <HAL_RCC_ClockConfig+0x260>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d910      	bls.n	80048e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b8e      	ldr	r3, [pc, #568]	; (8004b00 <HAL_RCC_ClockConfig+0x260>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 020f 	bic.w	r2, r3, #15
 80048ce:	498c      	ldr	r1, [pc, #560]	; (8004b00 <HAL_RCC_ClockConfig+0x260>)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d6:	4b8a      	ldr	r3, [pc, #552]	; (8004b00 <HAL_RCC_ClockConfig+0x260>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d001      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e106      	b.n	8004af6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d073      	beq.n	80049dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d129      	bne.n	8004950 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048fc:	4b81      	ldr	r3, [pc, #516]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e0f4      	b.n	8004af6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800490c:	f000 f99e 	bl	8004c4c <RCC_GetSysClockFreqFromPLLSource>
 8004910:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4a7c      	ldr	r2, [pc, #496]	; (8004b08 <HAL_RCC_ClockConfig+0x268>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d93f      	bls.n	800499a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800491a:	4b7a      	ldr	r3, [pc, #488]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800492e:	2b00      	cmp	r3, #0
 8004930:	d033      	beq.n	800499a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004936:	2b00      	cmp	r3, #0
 8004938:	d12f      	bne.n	800499a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800493a:	4b72      	ldr	r3, [pc, #456]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004942:	4a70      	ldr	r2, [pc, #448]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004948:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	e024      	b.n	800499a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b02      	cmp	r3, #2
 8004956:	d107      	bne.n	8004968 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004958:	4b6a      	ldr	r3, [pc, #424]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0c6      	b.n	8004af6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004968:	4b66      	ldr	r3, [pc, #408]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0be      	b.n	8004af6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004978:	f000 f8ce 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 800497c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4a61      	ldr	r2, [pc, #388]	; (8004b08 <HAL_RCC_ClockConfig+0x268>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d909      	bls.n	800499a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004986:	4b5f      	ldr	r3, [pc, #380]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800498e:	4a5d      	ldr	r2, [pc, #372]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004994:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004996:	2380      	movs	r3, #128	; 0x80
 8004998:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800499a:	4b5a      	ldr	r3, [pc, #360]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 0203 	bic.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4957      	ldr	r1, [pc, #348]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ac:	f7fc ff76 	bl	800189c <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b2:	e00a      	b.n	80049ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b4:	f7fc ff72 	bl	800189c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e095      	b.n	8004af6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	4b4e      	ldr	r3, [pc, #312]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 020c 	and.w	r2, r3, #12
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1eb      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d023      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f4:	4b43      	ldr	r3, [pc, #268]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a42      	ldr	r2, [pc, #264]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 80049fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d007      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004a0c:	4b3d      	ldr	r3, [pc, #244]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a14:	4a3b      	ldr	r2, [pc, #236]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004a16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a1c:	4b39      	ldr	r3, [pc, #228]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	4936      	ldr	r1, [pc, #216]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	608b      	str	r3, [r1, #8]
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d105      	bne.n	8004a42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a36:	4b33      	ldr	r3, [pc, #204]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	4a32      	ldr	r2, [pc, #200]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a42:	4b2f      	ldr	r3, [pc, #188]	; (8004b00 <HAL_RCC_ClockConfig+0x260>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d21d      	bcs.n	8004a8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a50:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <HAL_RCC_ClockConfig+0x260>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f023 020f 	bic.w	r2, r3, #15
 8004a58:	4929      	ldr	r1, [pc, #164]	; (8004b00 <HAL_RCC_ClockConfig+0x260>)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a60:	f7fc ff1c 	bl	800189c <HAL_GetTick>
 8004a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	e00a      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a68:	f7fc ff18 	bl	800189c <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e03b      	b.n	8004af6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7e:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <HAL_RCC_ClockConfig+0x260>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d1ed      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a98:	4b1a      	ldr	r3, [pc, #104]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	4917      	ldr	r1, [pc, #92]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ab6:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	490f      	ldr	r1, [pc, #60]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aca:	f000 f825 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <HAL_RCC_ClockConfig+0x264>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	091b      	lsrs	r3, r3, #4
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	490c      	ldr	r1, [pc, #48]	; (8004b0c <HAL_RCC_ClockConfig+0x26c>)
 8004adc:	5ccb      	ldrb	r3, [r1, r3]
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae6:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <HAL_RCC_ClockConfig+0x270>)
 8004ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004aea:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <HAL_RCC_ClockConfig+0x274>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fc fe88 	bl	8001804 <HAL_InitTick>
 8004af4:	4603      	mov	r3, r0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	40022000 	.word	0x40022000
 8004b04:	40021000 	.word	0x40021000
 8004b08:	04c4b400 	.word	0x04c4b400
 8004b0c:	08008514 	.word	0x08008514
 8004b10:	20000010 	.word	0x20000010
 8004b14:	20000014 	.word	0x20000014

08004b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b1e:	4b2c      	ldr	r3, [pc, #176]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d102      	bne.n	8004b30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b2a:	4b2a      	ldr	r3, [pc, #168]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	e047      	b.n	8004bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b30:	4b27      	ldr	r3, [pc, #156]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d102      	bne.n	8004b42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b3c:	4b26      	ldr	r3, [pc, #152]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	e03e      	b.n	8004bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b42:	4b23      	ldr	r3, [pc, #140]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	2b0c      	cmp	r3, #12
 8004b4c:	d136      	bne.n	8004bbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b4e:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b58:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	3301      	adds	r3, #1
 8004b64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d10c      	bne.n	8004b86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b6c:	4a1a      	ldr	r2, [pc, #104]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	4a16      	ldr	r2, [pc, #88]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b76:	68d2      	ldr	r2, [r2, #12]
 8004b78:	0a12      	lsrs	r2, r2, #8
 8004b7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b7e:	fb02 f303 	mul.w	r3, r2, r3
 8004b82:	617b      	str	r3, [r7, #20]
      break;
 8004b84:	e00c      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b86:	4a13      	ldr	r2, [pc, #76]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	4a10      	ldr	r2, [pc, #64]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b90:	68d2      	ldr	r2, [r2, #12]
 8004b92:	0a12      	lsrs	r2, r2, #8
 8004b94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	617b      	str	r3, [r7, #20]
      break;
 8004b9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	0e5b      	lsrs	r3, r3, #25
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	3301      	adds	r3, #1
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	613b      	str	r3, [r7, #16]
 8004bba:	e001      	b.n	8004bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004bc0:	693b      	ldr	r3, [r7, #16]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	00f42400 	.word	0x00f42400
 8004bd8:	016e3600 	.word	0x016e3600

08004bdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be0:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004be2:	681b      	ldr	r3, [r3, #0]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000010 	.word	0x20000010

08004bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bf8:	f7ff fff0 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	0a1b      	lsrs	r3, r3, #8
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	4904      	ldr	r1, [pc, #16]	; (8004c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c0a:	5ccb      	ldrb	r3, [r1, r3]
 8004c0c:	f003 031f 	and.w	r3, r3, #31
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	08008524 	.word	0x08008524

08004c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c24:	f7ff ffda 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	0adb      	lsrs	r3, r3, #11
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	4904      	ldr	r1, [pc, #16]	; (8004c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c36:	5ccb      	ldrb	r3, [r1, r3]
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40021000 	.word	0x40021000
 8004c48:	08008524 	.word	0x08008524

08004c4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c52:	4b1e      	ldr	r3, [pc, #120]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	3301      	adds	r3, #1
 8004c68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d10c      	bne.n	8004c8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c70:	4a17      	ldr	r2, [pc, #92]	; (8004cd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	4a14      	ldr	r2, [pc, #80]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c7a:	68d2      	ldr	r2, [r2, #12]
 8004c7c:	0a12      	lsrs	r2, r2, #8
 8004c7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
 8004c86:	617b      	str	r3, [r7, #20]
    break;
 8004c88:	e00c      	b.n	8004ca4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c8a:	4a12      	ldr	r2, [pc, #72]	; (8004cd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c92:	4a0e      	ldr	r2, [pc, #56]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c94:	68d2      	ldr	r2, [r2, #12]
 8004c96:	0a12      	lsrs	r2, r2, #8
 8004c98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ca0:	617b      	str	r3, [r7, #20]
    break;
 8004ca2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ca4:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	0e5b      	lsrs	r3, r3, #25
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	3301      	adds	r3, #1
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004cbe:	687b      	ldr	r3, [r7, #4]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	016e3600 	.word	0x016e3600
 8004cd4:	00f42400 	.word	0x00f42400

08004cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8098 	beq.w	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cfa:	4b43      	ldr	r3, [pc, #268]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10d      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d06:	4b40      	ldr	r3, [pc, #256]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0a:	4a3f      	ldr	r2, [pc, #252]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d10:	6593      	str	r3, [r2, #88]	; 0x58
 8004d12:	4b3d      	ldr	r3, [pc, #244]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d22:	4b3a      	ldr	r3, [pc, #232]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a39      	ldr	r2, [pc, #228]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d2e:	f7fc fdb5 	bl	800189c <HAL_GetTick>
 8004d32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d34:	e009      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d36:	f7fc fdb1 	bl	800189c <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d902      	bls.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	74fb      	strb	r3, [r7, #19]
        break;
 8004d48:	e005      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d4a:	4b30      	ldr	r3, [pc, #192]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0ef      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d56:	7cfb      	ldrb	r3, [r7, #19]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d159      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d5c:	4b2a      	ldr	r3, [pc, #168]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01e      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d019      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d78:	4b23      	ldr	r3, [pc, #140]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d84:	4b20      	ldr	r3, [pc, #128]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	4a1f      	ldr	r2, [pc, #124]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d94:	4b1c      	ldr	r3, [pc, #112]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9a:	4a1b      	ldr	r2, [pc, #108]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004da4:	4a18      	ldr	r2, [pc, #96]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d016      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db6:	f7fc fd71 	bl	800189c <HAL_GetTick>
 8004dba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dbc:	e00b      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dbe:	f7fc fd6d 	bl	800189c <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d902      	bls.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	74fb      	strb	r3, [r7, #19]
            break;
 8004dd4:	e006      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0ec      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004de4:	7cfb      	ldrb	r3, [r7, #19]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10b      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df8:	4903      	ldr	r1, [pc, #12]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e00:	e008      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e02:	7cfb      	ldrb	r3, [r7, #19]
 8004e04:	74bb      	strb	r3, [r7, #18]
 8004e06:	e005      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	7cfb      	ldrb	r3, [r7, #19]
 8004e12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e14:	7c7b      	ldrb	r3, [r7, #17]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d105      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e1a:	4ba7      	ldr	r3, [pc, #668]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1e:	4aa6      	ldr	r2, [pc, #664]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e32:	4ba1      	ldr	r3, [pc, #644]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e38:	f023 0203 	bic.w	r2, r3, #3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	499d      	ldr	r1, [pc, #628]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00a      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e54:	4b98      	ldr	r3, [pc, #608]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5a:	f023 020c 	bic.w	r2, r3, #12
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	4995      	ldr	r1, [pc, #596]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e76:	4b90      	ldr	r3, [pc, #576]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	498c      	ldr	r1, [pc, #560]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e98:	4b87      	ldr	r3, [pc, #540]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	4984      	ldr	r1, [pc, #528]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0310 	and.w	r3, r3, #16
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004eba:	4b7f      	ldr	r3, [pc, #508]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	497b      	ldr	r1, [pc, #492]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004edc:	4b76      	ldr	r3, [pc, #472]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	4973      	ldr	r1, [pc, #460]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004efe:	4b6e      	ldr	r3, [pc, #440]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	496a      	ldr	r1, [pc, #424]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f20:	4b65      	ldr	r3, [pc, #404]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	4962      	ldr	r1, [pc, #392]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f42:	4b5d      	ldr	r3, [pc, #372]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	4959      	ldr	r1, [pc, #356]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f64:	4b54      	ldr	r3, [pc, #336]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f6a:	f023 0203 	bic.w	r2, r3, #3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	4951      	ldr	r1, [pc, #324]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f86:	4b4c      	ldr	r3, [pc, #304]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	4948      	ldr	r1, [pc, #288]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d015      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fa8:	4b43      	ldr	r3, [pc, #268]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	4940      	ldr	r1, [pc, #256]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc6:	d105      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fc8:	4b3b      	ldr	r3, [pc, #236]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4a3a      	ldr	r2, [pc, #232]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d015      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fe0:	4b35      	ldr	r3, [pc, #212]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fee:	4932      	ldr	r1, [pc, #200]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ffe:	d105      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005000:	4b2d      	ldr	r3, [pc, #180]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4a2c      	ldr	r2, [pc, #176]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800500a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d015      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005018:	4b27      	ldr	r3, [pc, #156]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	4924      	ldr	r1, [pc, #144]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005032:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005036:	d105      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005038:	4b1f      	ldr	r3, [pc, #124]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4a1e      	ldr	r2, [pc, #120]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005042:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d015      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005050:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005056:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505e:	4916      	ldr	r1, [pc, #88]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800506e:	d105      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005070:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	4a10      	ldr	r2, [pc, #64]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005076:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800507a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d019      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	4908      	ldr	r1, [pc, #32]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a6:	d109      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050a8:	4b03      	ldr	r3, [pc, #12]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	4a02      	ldr	r2, [pc, #8]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050b2:	60d3      	str	r3, [r2, #12]
 80050b4:	e002      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80050b6:	bf00      	nop
 80050b8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d015      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80050c8:	4b29      	ldr	r3, [pc, #164]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d6:	4926      	ldr	r1, [pc, #152]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050e6:	d105      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050e8:	4b21      	ldr	r3, [pc, #132]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4a20      	ldr	r2, [pc, #128]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d015      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005100:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005106:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800510e:	4918      	ldr	r1, [pc, #96]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800511a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511e:	d105      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005120:	4b13      	ldr	r3, [pc, #76]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4a12      	ldr	r2, [pc, #72]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800512a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d015      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005138:	4b0d      	ldr	r3, [pc, #52]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800513a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800513e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005146:	490a      	ldr	r1, [pc, #40]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005156:	d105      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005158:	4b05      	ldr	r3, [pc, #20]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4a04      	ldr	r2, [pc, #16]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800515e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005162:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005164:	7cbb      	ldrb	r3, [r7, #18]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000

08005174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e049      	b.n	800521a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fc f9fe 	bl	800159c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3304      	adds	r3, #4
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f000 fed0 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b01      	cmp	r3, #1
 8005236:	d001      	beq.n	800523c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e04c      	b.n	80052d6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a26      	ldr	r2, [pc, #152]	; (80052e4 <HAL_TIM_Base_Start+0xc0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d022      	beq.n	8005294 <HAL_TIM_Base_Start+0x70>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005256:	d01d      	beq.n	8005294 <HAL_TIM_Base_Start+0x70>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a22      	ldr	r2, [pc, #136]	; (80052e8 <HAL_TIM_Base_Start+0xc4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d018      	beq.n	8005294 <HAL_TIM_Base_Start+0x70>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a21      	ldr	r2, [pc, #132]	; (80052ec <HAL_TIM_Base_Start+0xc8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d013      	beq.n	8005294 <HAL_TIM_Base_Start+0x70>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1f      	ldr	r2, [pc, #124]	; (80052f0 <HAL_TIM_Base_Start+0xcc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00e      	beq.n	8005294 <HAL_TIM_Base_Start+0x70>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <HAL_TIM_Base_Start+0xd0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d009      	beq.n	8005294 <HAL_TIM_Base_Start+0x70>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1c      	ldr	r2, [pc, #112]	; (80052f8 <HAL_TIM_Base_Start+0xd4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d004      	beq.n	8005294 <HAL_TIM_Base_Start+0x70>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1b      	ldr	r2, [pc, #108]	; (80052fc <HAL_TIM_Base_Start+0xd8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d115      	bne.n	80052c0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	4b19      	ldr	r3, [pc, #100]	; (8005300 <HAL_TIM_Base_Start+0xdc>)
 800529c:	4013      	ands	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b06      	cmp	r3, #6
 80052a4:	d015      	beq.n	80052d2 <HAL_TIM_Base_Start+0xae>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ac:	d011      	beq.n	80052d2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052be:	e008      	b.n	80052d2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	e000      	b.n	80052d4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00
 80052f4:	40013400 	.word	0x40013400
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40015000 	.word	0x40015000
 8005300:	00010007 	.word	0x00010007

08005304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d001      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e054      	b.n	80053c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a26      	ldr	r2, [pc, #152]	; (80053d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d022      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005346:	d01d      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a22      	ldr	r2, [pc, #136]	; (80053d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d018      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a21      	ldr	r2, [pc, #132]	; (80053dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d013      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00e      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d009      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1c      	ldr	r2, [pc, #112]	; (80053e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d004      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1b      	ldr	r2, [pc, #108]	; (80053ec <HAL_TIM_Base_Start_IT+0xe8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d115      	bne.n	80053b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <HAL_TIM_Base_Start_IT+0xec>)
 800538c:	4013      	ands	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b06      	cmp	r3, #6
 8005394:	d015      	beq.n	80053c2 <HAL_TIM_Base_Start_IT+0xbe>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539c:	d011      	beq.n	80053c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0201 	orr.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ae:	e008      	b.n	80053c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0201 	orr.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	e000      	b.n	80053c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40012c00 	.word	0x40012c00
 80053d8:	40000400 	.word	0x40000400
 80053dc:	40000800 	.word	0x40000800
 80053e0:	40000c00 	.word	0x40000c00
 80053e4:	40013400 	.word	0x40013400
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40015000 	.word	0x40015000
 80053f0:	00010007 	.word	0x00010007

080053f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e049      	b.n	800549a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fc f89e 	bl	800155c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3304      	adds	r3, #4
 8005430:	4619      	mov	r1, r3
 8005432:	4610      	mov	r0, r2
 8005434:	f000 fd90 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d109      	bne.n	80054c8 <HAL_TIM_PWM_Start+0x24>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	bf14      	ite	ne
 80054c0:	2301      	movne	r3, #1
 80054c2:	2300      	moveq	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	e03c      	b.n	8005542 <HAL_TIM_PWM_Start+0x9e>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d109      	bne.n	80054e2 <HAL_TIM_PWM_Start+0x3e>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	bf14      	ite	ne
 80054da:	2301      	movne	r3, #1
 80054dc:	2300      	moveq	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	e02f      	b.n	8005542 <HAL_TIM_PWM_Start+0x9e>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d109      	bne.n	80054fc <HAL_TIM_PWM_Start+0x58>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	bf14      	ite	ne
 80054f4:	2301      	movne	r3, #1
 80054f6:	2300      	moveq	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	e022      	b.n	8005542 <HAL_TIM_PWM_Start+0x9e>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b0c      	cmp	r3, #12
 8005500:	d109      	bne.n	8005516 <HAL_TIM_PWM_Start+0x72>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	bf14      	ite	ne
 800550e:	2301      	movne	r3, #1
 8005510:	2300      	moveq	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	e015      	b.n	8005542 <HAL_TIM_PWM_Start+0x9e>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b10      	cmp	r3, #16
 800551a:	d109      	bne.n	8005530 <HAL_TIM_PWM_Start+0x8c>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	e008      	b.n	8005542 <HAL_TIM_PWM_Start+0x9e>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b01      	cmp	r3, #1
 800553a:	bf14      	ite	ne
 800553c:	2301      	movne	r3, #1
 800553e:	2300      	moveq	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e0a6      	b.n	8005698 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d104      	bne.n	800555a <HAL_TIM_PWM_Start+0xb6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005558:	e023      	b.n	80055a2 <HAL_TIM_PWM_Start+0xfe>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b04      	cmp	r3, #4
 800555e:	d104      	bne.n	800556a <HAL_TIM_PWM_Start+0xc6>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005568:	e01b      	b.n	80055a2 <HAL_TIM_PWM_Start+0xfe>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b08      	cmp	r3, #8
 800556e:	d104      	bne.n	800557a <HAL_TIM_PWM_Start+0xd6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005578:	e013      	b.n	80055a2 <HAL_TIM_PWM_Start+0xfe>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b0c      	cmp	r3, #12
 800557e:	d104      	bne.n	800558a <HAL_TIM_PWM_Start+0xe6>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005588:	e00b      	b.n	80055a2 <HAL_TIM_PWM_Start+0xfe>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b10      	cmp	r3, #16
 800558e:	d104      	bne.n	800559a <HAL_TIM_PWM_Start+0xf6>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005598:	e003      	b.n	80055a2 <HAL_TIM_PWM_Start+0xfe>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2202      	movs	r2, #2
 800559e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2201      	movs	r2, #1
 80055a8:	6839      	ldr	r1, [r7, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f001 f94e 	bl	800684c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a3a      	ldr	r2, [pc, #232]	; (80056a0 <HAL_TIM_PWM_Start+0x1fc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d018      	beq.n	80055ec <HAL_TIM_PWM_Start+0x148>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a39      	ldr	r2, [pc, #228]	; (80056a4 <HAL_TIM_PWM_Start+0x200>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d013      	beq.n	80055ec <HAL_TIM_PWM_Start+0x148>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a37      	ldr	r2, [pc, #220]	; (80056a8 <HAL_TIM_PWM_Start+0x204>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00e      	beq.n	80055ec <HAL_TIM_PWM_Start+0x148>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a36      	ldr	r2, [pc, #216]	; (80056ac <HAL_TIM_PWM_Start+0x208>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d009      	beq.n	80055ec <HAL_TIM_PWM_Start+0x148>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a34      	ldr	r2, [pc, #208]	; (80056b0 <HAL_TIM_PWM_Start+0x20c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d004      	beq.n	80055ec <HAL_TIM_PWM_Start+0x148>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a33      	ldr	r2, [pc, #204]	; (80056b4 <HAL_TIM_PWM_Start+0x210>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d101      	bne.n	80055f0 <HAL_TIM_PWM_Start+0x14c>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <HAL_TIM_PWM_Start+0x14e>
 80055f0:	2300      	movs	r3, #0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005604:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a25      	ldr	r2, [pc, #148]	; (80056a0 <HAL_TIM_PWM_Start+0x1fc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d022      	beq.n	8005656 <HAL_TIM_PWM_Start+0x1b2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005618:	d01d      	beq.n	8005656 <HAL_TIM_PWM_Start+0x1b2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a26      	ldr	r2, [pc, #152]	; (80056b8 <HAL_TIM_PWM_Start+0x214>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d018      	beq.n	8005656 <HAL_TIM_PWM_Start+0x1b2>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a24      	ldr	r2, [pc, #144]	; (80056bc <HAL_TIM_PWM_Start+0x218>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d013      	beq.n	8005656 <HAL_TIM_PWM_Start+0x1b2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a23      	ldr	r2, [pc, #140]	; (80056c0 <HAL_TIM_PWM_Start+0x21c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00e      	beq.n	8005656 <HAL_TIM_PWM_Start+0x1b2>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a19      	ldr	r2, [pc, #100]	; (80056a4 <HAL_TIM_PWM_Start+0x200>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d009      	beq.n	8005656 <HAL_TIM_PWM_Start+0x1b2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <HAL_TIM_PWM_Start+0x204>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d004      	beq.n	8005656 <HAL_TIM_PWM_Start+0x1b2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a18      	ldr	r2, [pc, #96]	; (80056b4 <HAL_TIM_PWM_Start+0x210>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d115      	bne.n	8005682 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	4b19      	ldr	r3, [pc, #100]	; (80056c4 <HAL_TIM_PWM_Start+0x220>)
 800565e:	4013      	ands	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b06      	cmp	r3, #6
 8005666:	d015      	beq.n	8005694 <HAL_TIM_PWM_Start+0x1f0>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800566e:	d011      	beq.n	8005694 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005680:	e008      	b.n	8005694 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0201 	orr.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	e000      	b.n	8005696 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005694:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40013400 	.word	0x40013400
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40014400 	.word	0x40014400
 80056b0:	40014800 	.word	0x40014800
 80056b4:	40015000 	.word	0x40015000
 80056b8:	40000400 	.word	0x40000400
 80056bc:	40000800 	.word	0x40000800
 80056c0:	40000c00 	.word	0x40000c00
 80056c4:	00010007 	.word	0x00010007

080056c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e097      	b.n	800580c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d106      	bne.n	80056f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7fb fef1 	bl	80014d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6812      	ldr	r2, [r2, #0]
 8005708:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800570c:	f023 0307 	bic.w	r3, r3, #7
 8005710:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3304      	adds	r3, #4
 800571a:	4619      	mov	r1, r3
 800571c:	4610      	mov	r0, r2
 800571e:	f000 fc1b 	bl	8005f58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800574a:	f023 0303 	bic.w	r3, r3, #3
 800574e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	4313      	orrs	r3, r2
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005768:	f023 030c 	bic.w	r3, r3, #12
 800576c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005774:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005778:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	021b      	lsls	r3, r3, #8
 8005784:	4313      	orrs	r3, r2
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	011a      	lsls	r2, r3, #4
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	031b      	lsls	r3, r3, #12
 8005798:	4313      	orrs	r3, r2
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80057a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80057ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	4313      	orrs	r3, r2
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d020      	beq.n	8005878 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01b      	beq.n	8005878 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0202 	mvn.w	r2, #2
 8005848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fb5c 	bl	8005f1c <HAL_TIM_IC_CaptureCallback>
 8005864:	e005      	b.n	8005872 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fb4e 	bl	8005f08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fb5f 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	d020      	beq.n	80058c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01b      	beq.n	80058c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0204 	mvn.w	r2, #4
 8005894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2202      	movs	r2, #2
 800589a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fb36 	bl	8005f1c <HAL_TIM_IC_CaptureCallback>
 80058b0:	e005      	b.n	80058be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fb28 	bl	8005f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fb39 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d020      	beq.n	8005910 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f003 0308 	and.w	r3, r3, #8
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01b      	beq.n	8005910 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0208 	mvn.w	r2, #8
 80058e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2204      	movs	r2, #4
 80058e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fb10 	bl	8005f1c <HAL_TIM_IC_CaptureCallback>
 80058fc:	e005      	b.n	800590a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fb02 	bl	8005f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fb13 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 0310 	and.w	r3, r3, #16
 8005916:	2b00      	cmp	r3, #0
 8005918:	d020      	beq.n	800595c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f003 0310 	and.w	r3, r3, #16
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01b      	beq.n	800595c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0210 	mvn.w	r2, #16
 800592c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2208      	movs	r2, #8
 8005932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 faea 	bl	8005f1c <HAL_TIM_IC_CaptureCallback>
 8005948:	e005      	b.n	8005956 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fadc 	bl	8005f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 faed 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00c      	beq.n	8005980 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d007      	beq.n	8005980 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0201 	mvn.w	r2, #1
 8005978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fb f98c 	bl	8000c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005986:	2b00      	cmp	r3, #0
 8005988:	d104      	bne.n	8005994 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00c      	beq.n	80059ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	2b00      	cmp	r3, #0
 800599c:	d007      	beq.n	80059ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80059a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f001 f815 	bl	80069d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00c      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 f80d 	bl	80069ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00c      	beq.n	80059f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d007      	beq.n	80059f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 faa7 	bl	8005f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f003 0320 	and.w	r3, r3, #32
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00c      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f06f 0220 	mvn.w	r2, #32
 8005a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 ffd5 	bl	80069c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00c      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 ffe1 	bl	8006a00 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00c      	beq.n	8005a62 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d007      	beq.n	8005a62 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 ffd9 	bl	8006a14 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00c      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d007      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 ffd1 	bl	8006a28 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00c      	beq.n	8005aaa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 ffc9 	bl	8006a3c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e0ff      	b.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b14      	cmp	r3, #20
 8005ade:	f200 80f0 	bhi.w	8005cc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ae2:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae8:	08005b3d 	.word	0x08005b3d
 8005aec:	08005cc3 	.word	0x08005cc3
 8005af0:	08005cc3 	.word	0x08005cc3
 8005af4:	08005cc3 	.word	0x08005cc3
 8005af8:	08005b7d 	.word	0x08005b7d
 8005afc:	08005cc3 	.word	0x08005cc3
 8005b00:	08005cc3 	.word	0x08005cc3
 8005b04:	08005cc3 	.word	0x08005cc3
 8005b08:	08005bbf 	.word	0x08005bbf
 8005b0c:	08005cc3 	.word	0x08005cc3
 8005b10:	08005cc3 	.word	0x08005cc3
 8005b14:	08005cc3 	.word	0x08005cc3
 8005b18:	08005bff 	.word	0x08005bff
 8005b1c:	08005cc3 	.word	0x08005cc3
 8005b20:	08005cc3 	.word	0x08005cc3
 8005b24:	08005cc3 	.word	0x08005cc3
 8005b28:	08005c41 	.word	0x08005c41
 8005b2c:	08005cc3 	.word	0x08005cc3
 8005b30:	08005cc3 	.word	0x08005cc3
 8005b34:	08005cc3 	.word	0x08005cc3
 8005b38:	08005c81 	.word	0x08005c81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fabc 	bl	80060c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0208 	orr.w	r2, r2, #8
 8005b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699a      	ldr	r2, [r3, #24]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0204 	bic.w	r2, r2, #4
 8005b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6999      	ldr	r1, [r3, #24]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	691a      	ldr	r2, [r3, #16]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	619a      	str	r2, [r3, #24]
      break;
 8005b7a:	e0a5      	b.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68b9      	ldr	r1, [r7, #8]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fb36 	bl	80061f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6999      	ldr	r1, [r3, #24]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	021a      	lsls	r2, r3, #8
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	619a      	str	r2, [r3, #24]
      break;
 8005bbc:	e084      	b.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fba9 	bl	800631c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0208 	orr.w	r2, r2, #8
 8005bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69da      	ldr	r2, [r3, #28]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0204 	bic.w	r2, r2, #4
 8005be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69d9      	ldr	r1, [r3, #28]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	691a      	ldr	r2, [r3, #16]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	61da      	str	r2, [r3, #28]
      break;
 8005bfc:	e064      	b.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fc1b 	bl	8006440 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69d9      	ldr	r1, [r3, #28]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	021a      	lsls	r2, r3, #8
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	61da      	str	r2, [r3, #28]
      break;
 8005c3e:	e043      	b.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fc8e 	bl	8006568 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0208 	orr.w	r2, r2, #8
 8005c5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0204 	bic.w	r2, r2, #4
 8005c6a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005c7e:	e023      	b.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68b9      	ldr	r1, [r7, #8]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fcd8 	bl	800663c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c9a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005caa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	021a      	lsls	r2, r3, #8
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005cc0:	e002      	b.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop

08005cdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_TIM_ConfigClockSource+0x1c>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e0f6      	b.n	8005ee6 <HAL_TIM_ConfigClockSource+0x20a>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005d16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a6f      	ldr	r2, [pc, #444]	; (8005ef0 <HAL_TIM_ConfigClockSource+0x214>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	f000 80c1 	beq.w	8005eba <HAL_TIM_ConfigClockSource+0x1de>
 8005d38:	4a6d      	ldr	r2, [pc, #436]	; (8005ef0 <HAL_TIM_ConfigClockSource+0x214>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	f200 80c6 	bhi.w	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
 8005d40:	4a6c      	ldr	r2, [pc, #432]	; (8005ef4 <HAL_TIM_ConfigClockSource+0x218>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	f000 80b9 	beq.w	8005eba <HAL_TIM_ConfigClockSource+0x1de>
 8005d48:	4a6a      	ldr	r2, [pc, #424]	; (8005ef4 <HAL_TIM_ConfigClockSource+0x218>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	f200 80be 	bhi.w	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
 8005d50:	4a69      	ldr	r2, [pc, #420]	; (8005ef8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	f000 80b1 	beq.w	8005eba <HAL_TIM_ConfigClockSource+0x1de>
 8005d58:	4a67      	ldr	r2, [pc, #412]	; (8005ef8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	f200 80b6 	bhi.w	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
 8005d60:	4a66      	ldr	r2, [pc, #408]	; (8005efc <HAL_TIM_ConfigClockSource+0x220>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	f000 80a9 	beq.w	8005eba <HAL_TIM_ConfigClockSource+0x1de>
 8005d68:	4a64      	ldr	r2, [pc, #400]	; (8005efc <HAL_TIM_ConfigClockSource+0x220>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	f200 80ae 	bhi.w	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
 8005d70:	4a63      	ldr	r2, [pc, #396]	; (8005f00 <HAL_TIM_ConfigClockSource+0x224>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	f000 80a1 	beq.w	8005eba <HAL_TIM_ConfigClockSource+0x1de>
 8005d78:	4a61      	ldr	r2, [pc, #388]	; (8005f00 <HAL_TIM_ConfigClockSource+0x224>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	f200 80a6 	bhi.w	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
 8005d80:	4a60      	ldr	r2, [pc, #384]	; (8005f04 <HAL_TIM_ConfigClockSource+0x228>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	f000 8099 	beq.w	8005eba <HAL_TIM_ConfigClockSource+0x1de>
 8005d88:	4a5e      	ldr	r2, [pc, #376]	; (8005f04 <HAL_TIM_ConfigClockSource+0x228>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	f200 809e 	bhi.w	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
 8005d90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005d94:	f000 8091 	beq.w	8005eba <HAL_TIM_ConfigClockSource+0x1de>
 8005d98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005d9c:	f200 8096 	bhi.w	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
 8005da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005da4:	f000 8089 	beq.w	8005eba <HAL_TIM_ConfigClockSource+0x1de>
 8005da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dac:	f200 808e 	bhi.w	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
 8005db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db4:	d03e      	beq.n	8005e34 <HAL_TIM_ConfigClockSource+0x158>
 8005db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dba:	f200 8087 	bhi.w	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
 8005dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc2:	f000 8086 	beq.w	8005ed2 <HAL_TIM_ConfigClockSource+0x1f6>
 8005dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dca:	d87f      	bhi.n	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
 8005dcc:	2b70      	cmp	r3, #112	; 0x70
 8005dce:	d01a      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x12a>
 8005dd0:	2b70      	cmp	r3, #112	; 0x70
 8005dd2:	d87b      	bhi.n	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
 8005dd4:	2b60      	cmp	r3, #96	; 0x60
 8005dd6:	d050      	beq.n	8005e7a <HAL_TIM_ConfigClockSource+0x19e>
 8005dd8:	2b60      	cmp	r3, #96	; 0x60
 8005dda:	d877      	bhi.n	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
 8005ddc:	2b50      	cmp	r3, #80	; 0x50
 8005dde:	d03c      	beq.n	8005e5a <HAL_TIM_ConfigClockSource+0x17e>
 8005de0:	2b50      	cmp	r3, #80	; 0x50
 8005de2:	d873      	bhi.n	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
 8005de4:	2b40      	cmp	r3, #64	; 0x40
 8005de6:	d058      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x1be>
 8005de8:	2b40      	cmp	r3, #64	; 0x40
 8005dea:	d86f      	bhi.n	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
 8005dec:	2b30      	cmp	r3, #48	; 0x30
 8005dee:	d064      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x1de>
 8005df0:	2b30      	cmp	r3, #48	; 0x30
 8005df2:	d86b      	bhi.n	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d060      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x1de>
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	d867      	bhi.n	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d05c      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x1de>
 8005e00:	2b10      	cmp	r3, #16
 8005e02:	d05a      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x1de>
 8005e04:	e062      	b.n	8005ecc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e16:	f000 fcf9 	bl	800680c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	609a      	str	r2, [r3, #8]
      break;
 8005e32:	e04f      	b.n	8005ed4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e44:	f000 fce2 	bl	800680c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e56:	609a      	str	r2, [r3, #8]
      break;
 8005e58:	e03c      	b.n	8005ed4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e66:	461a      	mov	r2, r3
 8005e68:	f000 fc54 	bl	8006714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2150      	movs	r1, #80	; 0x50
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fcad 	bl	80067d2 <TIM_ITRx_SetConfig>
      break;
 8005e78:	e02c      	b.n	8005ed4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e86:	461a      	mov	r2, r3
 8005e88:	f000 fc73 	bl	8006772 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2160      	movs	r1, #96	; 0x60
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fc9d 	bl	80067d2 <TIM_ITRx_SetConfig>
      break;
 8005e98:	e01c      	b.n	8005ed4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f000 fc34 	bl	8006714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2140      	movs	r1, #64	; 0x40
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 fc8d 	bl	80067d2 <TIM_ITRx_SetConfig>
      break;
 8005eb8:	e00c      	b.n	8005ed4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	f000 fc84 	bl	80067d2 <TIM_ITRx_SetConfig>
      break;
 8005eca:	e003      	b.n	8005ed4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed0:	e000      	b.n	8005ed4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	00100070 	.word	0x00100070
 8005ef4:	00100060 	.word	0x00100060
 8005ef8:	00100050 	.word	0x00100050
 8005efc:	00100040 	.word	0x00100040
 8005f00:	00100030 	.word	0x00100030
 8005f04:	00100020 	.word	0x00100020

08005f08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a4c      	ldr	r2, [pc, #304]	; (800609c <TIM_Base_SetConfig+0x144>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d017      	beq.n	8005fa0 <TIM_Base_SetConfig+0x48>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f76:	d013      	beq.n	8005fa0 <TIM_Base_SetConfig+0x48>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a49      	ldr	r2, [pc, #292]	; (80060a0 <TIM_Base_SetConfig+0x148>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00f      	beq.n	8005fa0 <TIM_Base_SetConfig+0x48>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a48      	ldr	r2, [pc, #288]	; (80060a4 <TIM_Base_SetConfig+0x14c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00b      	beq.n	8005fa0 <TIM_Base_SetConfig+0x48>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a47      	ldr	r2, [pc, #284]	; (80060a8 <TIM_Base_SetConfig+0x150>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d007      	beq.n	8005fa0 <TIM_Base_SetConfig+0x48>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a46      	ldr	r2, [pc, #280]	; (80060ac <TIM_Base_SetConfig+0x154>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d003      	beq.n	8005fa0 <TIM_Base_SetConfig+0x48>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a45      	ldr	r2, [pc, #276]	; (80060b0 <TIM_Base_SetConfig+0x158>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d108      	bne.n	8005fb2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a39      	ldr	r2, [pc, #228]	; (800609c <TIM_Base_SetConfig+0x144>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d023      	beq.n	8006002 <TIM_Base_SetConfig+0xaa>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc0:	d01f      	beq.n	8006002 <TIM_Base_SetConfig+0xaa>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a36      	ldr	r2, [pc, #216]	; (80060a0 <TIM_Base_SetConfig+0x148>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d01b      	beq.n	8006002 <TIM_Base_SetConfig+0xaa>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a35      	ldr	r2, [pc, #212]	; (80060a4 <TIM_Base_SetConfig+0x14c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d017      	beq.n	8006002 <TIM_Base_SetConfig+0xaa>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a34      	ldr	r2, [pc, #208]	; (80060a8 <TIM_Base_SetConfig+0x150>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d013      	beq.n	8006002 <TIM_Base_SetConfig+0xaa>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a33      	ldr	r2, [pc, #204]	; (80060ac <TIM_Base_SetConfig+0x154>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00f      	beq.n	8006002 <TIM_Base_SetConfig+0xaa>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a33      	ldr	r2, [pc, #204]	; (80060b4 <TIM_Base_SetConfig+0x15c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00b      	beq.n	8006002 <TIM_Base_SetConfig+0xaa>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a32      	ldr	r2, [pc, #200]	; (80060b8 <TIM_Base_SetConfig+0x160>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d007      	beq.n	8006002 <TIM_Base_SetConfig+0xaa>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a31      	ldr	r2, [pc, #196]	; (80060bc <TIM_Base_SetConfig+0x164>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d003      	beq.n	8006002 <TIM_Base_SetConfig+0xaa>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a2c      	ldr	r2, [pc, #176]	; (80060b0 <TIM_Base_SetConfig+0x158>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d108      	bne.n	8006014 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a18      	ldr	r2, [pc, #96]	; (800609c <TIM_Base_SetConfig+0x144>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d013      	beq.n	8006068 <TIM_Base_SetConfig+0x110>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a1a      	ldr	r2, [pc, #104]	; (80060ac <TIM_Base_SetConfig+0x154>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00f      	beq.n	8006068 <TIM_Base_SetConfig+0x110>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a1a      	ldr	r2, [pc, #104]	; (80060b4 <TIM_Base_SetConfig+0x15c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00b      	beq.n	8006068 <TIM_Base_SetConfig+0x110>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a19      	ldr	r2, [pc, #100]	; (80060b8 <TIM_Base_SetConfig+0x160>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d007      	beq.n	8006068 <TIM_Base_SetConfig+0x110>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a18      	ldr	r2, [pc, #96]	; (80060bc <TIM_Base_SetConfig+0x164>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d003      	beq.n	8006068 <TIM_Base_SetConfig+0x110>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a13      	ldr	r2, [pc, #76]	; (80060b0 <TIM_Base_SetConfig+0x158>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d103      	bne.n	8006070 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b01      	cmp	r3, #1
 8006080:	d105      	bne.n	800608e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f023 0201 	bic.w	r2, r3, #1
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	611a      	str	r2, [r3, #16]
  }
}
 800608e:	bf00      	nop
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40012c00 	.word	0x40012c00
 80060a0:	40000400 	.word	0x40000400
 80060a4:	40000800 	.word	0x40000800
 80060a8:	40000c00 	.word	0x40000c00
 80060ac:	40013400 	.word	0x40013400
 80060b0:	40015000 	.word	0x40015000
 80060b4:	40014000 	.word	0x40014000
 80060b8:	40014400 	.word	0x40014400
 80060bc:	40014800 	.word	0x40014800

080060c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	f023 0201 	bic.w	r2, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0303 	bic.w	r3, r3, #3
 80060fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f023 0302 	bic.w	r3, r3, #2
 800610c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a30      	ldr	r2, [pc, #192]	; (80061dc <TIM_OC1_SetConfig+0x11c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <TIM_OC1_SetConfig+0x88>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a2f      	ldr	r2, [pc, #188]	; (80061e0 <TIM_OC1_SetConfig+0x120>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00f      	beq.n	8006148 <TIM_OC1_SetConfig+0x88>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a2e      	ldr	r2, [pc, #184]	; (80061e4 <TIM_OC1_SetConfig+0x124>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00b      	beq.n	8006148 <TIM_OC1_SetConfig+0x88>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a2d      	ldr	r2, [pc, #180]	; (80061e8 <TIM_OC1_SetConfig+0x128>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d007      	beq.n	8006148 <TIM_OC1_SetConfig+0x88>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a2c      	ldr	r2, [pc, #176]	; (80061ec <TIM_OC1_SetConfig+0x12c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_OC1_SetConfig+0x88>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a2b      	ldr	r2, [pc, #172]	; (80061f0 <TIM_OC1_SetConfig+0x130>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d10c      	bne.n	8006162 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f023 0308 	bic.w	r3, r3, #8
 800614e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	4313      	orrs	r3, r2
 8006158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f023 0304 	bic.w	r3, r3, #4
 8006160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a1d      	ldr	r2, [pc, #116]	; (80061dc <TIM_OC1_SetConfig+0x11c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d013      	beq.n	8006192 <TIM_OC1_SetConfig+0xd2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a1c      	ldr	r2, [pc, #112]	; (80061e0 <TIM_OC1_SetConfig+0x120>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00f      	beq.n	8006192 <TIM_OC1_SetConfig+0xd2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a1b      	ldr	r2, [pc, #108]	; (80061e4 <TIM_OC1_SetConfig+0x124>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00b      	beq.n	8006192 <TIM_OC1_SetConfig+0xd2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a1a      	ldr	r2, [pc, #104]	; (80061e8 <TIM_OC1_SetConfig+0x128>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d007      	beq.n	8006192 <TIM_OC1_SetConfig+0xd2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a19      	ldr	r2, [pc, #100]	; (80061ec <TIM_OC1_SetConfig+0x12c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d003      	beq.n	8006192 <TIM_OC1_SetConfig+0xd2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a18      	ldr	r2, [pc, #96]	; (80061f0 <TIM_OC1_SetConfig+0x130>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d111      	bne.n	80061b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	621a      	str	r2, [r3, #32]
}
 80061d0:	bf00      	nop
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	40012c00 	.word	0x40012c00
 80061e0:	40013400 	.word	0x40013400
 80061e4:	40014000 	.word	0x40014000
 80061e8:	40014400 	.word	0x40014400
 80061ec:	40014800 	.word	0x40014800
 80061f0:	40015000 	.word	0x40015000

080061f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	f023 0210 	bic.w	r2, r3, #16
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800622e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	021b      	lsls	r3, r3, #8
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f023 0320 	bic.w	r3, r3, #32
 8006242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	4313      	orrs	r3, r2
 800624e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a2c      	ldr	r2, [pc, #176]	; (8006304 <TIM_OC2_SetConfig+0x110>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d007      	beq.n	8006268 <TIM_OC2_SetConfig+0x74>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a2b      	ldr	r2, [pc, #172]	; (8006308 <TIM_OC2_SetConfig+0x114>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d003      	beq.n	8006268 <TIM_OC2_SetConfig+0x74>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a2a      	ldr	r2, [pc, #168]	; (800630c <TIM_OC2_SetConfig+0x118>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d10d      	bne.n	8006284 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800626e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	4313      	orrs	r3, r2
 800627a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006282:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a1f      	ldr	r2, [pc, #124]	; (8006304 <TIM_OC2_SetConfig+0x110>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d013      	beq.n	80062b4 <TIM_OC2_SetConfig+0xc0>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a1e      	ldr	r2, [pc, #120]	; (8006308 <TIM_OC2_SetConfig+0x114>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00f      	beq.n	80062b4 <TIM_OC2_SetConfig+0xc0>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a1e      	ldr	r2, [pc, #120]	; (8006310 <TIM_OC2_SetConfig+0x11c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00b      	beq.n	80062b4 <TIM_OC2_SetConfig+0xc0>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a1d      	ldr	r2, [pc, #116]	; (8006314 <TIM_OC2_SetConfig+0x120>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d007      	beq.n	80062b4 <TIM_OC2_SetConfig+0xc0>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a1c      	ldr	r2, [pc, #112]	; (8006318 <TIM_OC2_SetConfig+0x124>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_OC2_SetConfig+0xc0>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a17      	ldr	r2, [pc, #92]	; (800630c <TIM_OC2_SetConfig+0x118>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d113      	bne.n	80062dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	621a      	str	r2, [r3, #32]
}
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40012c00 	.word	0x40012c00
 8006308:	40013400 	.word	0x40013400
 800630c:	40015000 	.word	0x40015000
 8006310:	40014000 	.word	0x40014000
 8006314:	40014400 	.word	0x40014400
 8006318:	40014800 	.word	0x40014800

0800631c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800634a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0303 	bic.w	r3, r3, #3
 8006356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	021b      	lsls	r3, r3, #8
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	4313      	orrs	r3, r2
 8006374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a2b      	ldr	r2, [pc, #172]	; (8006428 <TIM_OC3_SetConfig+0x10c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d007      	beq.n	800638e <TIM_OC3_SetConfig+0x72>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a2a      	ldr	r2, [pc, #168]	; (800642c <TIM_OC3_SetConfig+0x110>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d003      	beq.n	800638e <TIM_OC3_SetConfig+0x72>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a29      	ldr	r2, [pc, #164]	; (8006430 <TIM_OC3_SetConfig+0x114>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d10d      	bne.n	80063aa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	021b      	lsls	r3, r3, #8
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	4313      	orrs	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a1e      	ldr	r2, [pc, #120]	; (8006428 <TIM_OC3_SetConfig+0x10c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <TIM_OC3_SetConfig+0xbe>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a1d      	ldr	r2, [pc, #116]	; (800642c <TIM_OC3_SetConfig+0x110>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00f      	beq.n	80063da <TIM_OC3_SetConfig+0xbe>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <TIM_OC3_SetConfig+0x118>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00b      	beq.n	80063da <TIM_OC3_SetConfig+0xbe>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a1c      	ldr	r2, [pc, #112]	; (8006438 <TIM_OC3_SetConfig+0x11c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d007      	beq.n	80063da <TIM_OC3_SetConfig+0xbe>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a1b      	ldr	r2, [pc, #108]	; (800643c <TIM_OC3_SetConfig+0x120>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_OC3_SetConfig+0xbe>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a16      	ldr	r2, [pc, #88]	; (8006430 <TIM_OC3_SetConfig+0x114>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d113      	bne.n	8006402 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	621a      	str	r2, [r3, #32]
}
 800641c:	bf00      	nop
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	40012c00 	.word	0x40012c00
 800642c:	40013400 	.word	0x40013400
 8006430:	40015000 	.word	0x40015000
 8006434:	40014000 	.word	0x40014000
 8006438:	40014400 	.word	0x40014400
 800643c:	40014800 	.word	0x40014800

08006440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800646e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800647a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	021b      	lsls	r3, r3, #8
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800648e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	031b      	lsls	r3, r3, #12
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	4313      	orrs	r3, r2
 800649a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a2c      	ldr	r2, [pc, #176]	; (8006550 <TIM_OC4_SetConfig+0x110>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d007      	beq.n	80064b4 <TIM_OC4_SetConfig+0x74>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a2b      	ldr	r2, [pc, #172]	; (8006554 <TIM_OC4_SetConfig+0x114>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d003      	beq.n	80064b4 <TIM_OC4_SetConfig+0x74>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a2a      	ldr	r2, [pc, #168]	; (8006558 <TIM_OC4_SetConfig+0x118>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d10d      	bne.n	80064d0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	031b      	lsls	r3, r3, #12
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a1f      	ldr	r2, [pc, #124]	; (8006550 <TIM_OC4_SetConfig+0x110>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d013      	beq.n	8006500 <TIM_OC4_SetConfig+0xc0>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a1e      	ldr	r2, [pc, #120]	; (8006554 <TIM_OC4_SetConfig+0x114>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d00f      	beq.n	8006500 <TIM_OC4_SetConfig+0xc0>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a1e      	ldr	r2, [pc, #120]	; (800655c <TIM_OC4_SetConfig+0x11c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00b      	beq.n	8006500 <TIM_OC4_SetConfig+0xc0>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a1d      	ldr	r2, [pc, #116]	; (8006560 <TIM_OC4_SetConfig+0x120>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d007      	beq.n	8006500 <TIM_OC4_SetConfig+0xc0>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a1c      	ldr	r2, [pc, #112]	; (8006564 <TIM_OC4_SetConfig+0x124>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d003      	beq.n	8006500 <TIM_OC4_SetConfig+0xc0>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a17      	ldr	r2, [pc, #92]	; (8006558 <TIM_OC4_SetConfig+0x118>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d113      	bne.n	8006528 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006506:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800650e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	019b      	lsls	r3, r3, #6
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	019b      	lsls	r3, r3, #6
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	621a      	str	r2, [r3, #32]
}
 8006542:	bf00      	nop
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	40012c00 	.word	0x40012c00
 8006554:	40013400 	.word	0x40013400
 8006558:	40015000 	.word	0x40015000
 800655c:	40014000 	.word	0x40014000
 8006560:	40014400 	.word	0x40014400
 8006564:	40014800 	.word	0x40014800

08006568 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	041b      	lsls	r3, r3, #16
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a19      	ldr	r2, [pc, #100]	; (8006624 <TIM_OC5_SetConfig+0xbc>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d013      	beq.n	80065ea <TIM_OC5_SetConfig+0x82>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a18      	ldr	r2, [pc, #96]	; (8006628 <TIM_OC5_SetConfig+0xc0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00f      	beq.n	80065ea <TIM_OC5_SetConfig+0x82>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a17      	ldr	r2, [pc, #92]	; (800662c <TIM_OC5_SetConfig+0xc4>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00b      	beq.n	80065ea <TIM_OC5_SetConfig+0x82>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a16      	ldr	r2, [pc, #88]	; (8006630 <TIM_OC5_SetConfig+0xc8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d007      	beq.n	80065ea <TIM_OC5_SetConfig+0x82>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a15      	ldr	r2, [pc, #84]	; (8006634 <TIM_OC5_SetConfig+0xcc>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d003      	beq.n	80065ea <TIM_OC5_SetConfig+0x82>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a14      	ldr	r2, [pc, #80]	; (8006638 <TIM_OC5_SetConfig+0xd0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d109      	bne.n	80065fe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	021b      	lsls	r3, r3, #8
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	621a      	str	r2, [r3, #32]
}
 8006618:	bf00      	nop
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	40012c00 	.word	0x40012c00
 8006628:	40013400 	.word	0x40013400
 800662c:	40014000 	.word	0x40014000
 8006630:	40014400 	.word	0x40014400
 8006634:	40014800 	.word	0x40014800
 8006638:	40015000 	.word	0x40015000

0800663c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800666a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	021b      	lsls	r3, r3, #8
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4313      	orrs	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	051b      	lsls	r3, r3, #20
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4313      	orrs	r3, r2
 800668e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a1a      	ldr	r2, [pc, #104]	; (80066fc <TIM_OC6_SetConfig+0xc0>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d013      	beq.n	80066c0 <TIM_OC6_SetConfig+0x84>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a19      	ldr	r2, [pc, #100]	; (8006700 <TIM_OC6_SetConfig+0xc4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00f      	beq.n	80066c0 <TIM_OC6_SetConfig+0x84>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a18      	ldr	r2, [pc, #96]	; (8006704 <TIM_OC6_SetConfig+0xc8>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d00b      	beq.n	80066c0 <TIM_OC6_SetConfig+0x84>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a17      	ldr	r2, [pc, #92]	; (8006708 <TIM_OC6_SetConfig+0xcc>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d007      	beq.n	80066c0 <TIM_OC6_SetConfig+0x84>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a16      	ldr	r2, [pc, #88]	; (800670c <TIM_OC6_SetConfig+0xd0>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_OC6_SetConfig+0x84>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a15      	ldr	r2, [pc, #84]	; (8006710 <TIM_OC6_SetConfig+0xd4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d109      	bne.n	80066d4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	029b      	lsls	r3, r3, #10
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	621a      	str	r2, [r3, #32]
}
 80066ee:	bf00      	nop
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40013400 	.word	0x40013400
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800
 8006710:	40015000 	.word	0x40015000

08006714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f023 0201 	bic.w	r2, r3, #1
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800673e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f023 030a 	bic.w	r3, r3, #10
 8006750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	621a      	str	r2, [r3, #32]
}
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006772:	b480      	push	{r7}
 8006774:	b087      	sub	sp, #28
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	f023 0210 	bic.w	r2, r3, #16
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800679c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	031b      	lsls	r3, r3, #12
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	621a      	str	r2, [r3, #32]
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b085      	sub	sp, #20
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80067e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f043 0307 	orr.w	r3, r3, #7
 80067f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	609a      	str	r2, [r3, #8]
}
 8006800:	bf00      	nop
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	021a      	lsls	r2, r3, #8
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	431a      	orrs	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	4313      	orrs	r3, r2
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	4313      	orrs	r3, r2
 8006838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	609a      	str	r2, [r3, #8]
}
 8006840:	bf00      	nop
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f003 031f 	and.w	r3, r3, #31
 800685e:	2201      	movs	r2, #1
 8006860:	fa02 f303 	lsl.w	r3, r2, r3
 8006864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a1a      	ldr	r2, [r3, #32]
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	43db      	mvns	r3, r3
 800686e:	401a      	ands	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a1a      	ldr	r2, [r3, #32]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f003 031f 	and.w	r3, r3, #31
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	fa01 f303 	lsl.w	r3, r1, r3
 8006884:	431a      	orrs	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	621a      	str	r2, [r3, #32]
}
 800688a:	bf00      	nop
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
	...

08006898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d101      	bne.n	80068b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068ac:	2302      	movs	r3, #2
 80068ae:	e074      	b.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a34      	ldr	r2, [pc, #208]	; (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a33      	ldr	r2, [pc, #204]	; (80069ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a31      	ldr	r2, [pc, #196]	; (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d108      	bne.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80068f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a21      	ldr	r2, [pc, #132]	; (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d022      	beq.n	800696e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006930:	d01d      	beq.n	800696e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a1f      	ldr	r2, [pc, #124]	; (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d018      	beq.n	800696e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a1d      	ldr	r2, [pc, #116]	; (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d013      	beq.n	800696e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a1c      	ldr	r2, [pc, #112]	; (80069bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00e      	beq.n	800696e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a15      	ldr	r2, [pc, #84]	; (80069ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d009      	beq.n	800696e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a18      	ldr	r2, [pc, #96]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d004      	beq.n	800696e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a11      	ldr	r2, [pc, #68]	; (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d10c      	bne.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	4313      	orrs	r3, r2
 800697e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40012c00 	.word	0x40012c00
 80069ac:	40013400 	.word	0x40013400
 80069b0:	40015000 	.word	0x40015000
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800
 80069bc:	40000c00 	.word	0x40000c00
 80069c0:	40014000 	.word	0x40014000

080069c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e042      	b.n	8006ae8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d106      	bne.n	8006a7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7fa fc73 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2224      	movs	r2, #36	; 0x24
 8006a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 0201 	bic.w	r2, r2, #1
 8006a90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 ff48 	bl	8007930 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fc49 	bl	8007338 <UART_SetConfig>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e01b      	b.n	8006ae8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ace:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0201 	orr.w	r2, r2, #1
 8006ade:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 ffc7 	bl	8007a74 <UART_CheckIdleState>
 8006ae6:	4603      	mov	r3, r0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08a      	sub	sp, #40	; 0x28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	4613      	mov	r3, r2
 8006afc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	d167      	bne.n	8006bd8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <HAL_UART_Transmit_DMA+0x24>
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e060      	b.n	8006bda <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	88fa      	ldrh	r2, [r7, #6]
 8006b22:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	88fa      	ldrh	r2, [r7, #6]
 8006b2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2221      	movs	r2, #33	; 0x21
 8006b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d028      	beq.n	8006b98 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b4a:	4a26      	ldr	r2, [pc, #152]	; (8006be4 <HAL_UART_Transmit_DMA+0xf4>)
 8006b4c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b52:	4a25      	ldr	r2, [pc, #148]	; (8006be8 <HAL_UART_Transmit_DMA+0xf8>)
 8006b54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b5a:	4a24      	ldr	r2, [pc, #144]	; (8006bec <HAL_UART_Transmit_DMA+0xfc>)
 8006b5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b62:	2200      	movs	r2, #0
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b6e:	4619      	mov	r1, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3328      	adds	r3, #40	; 0x28
 8006b76:	461a      	mov	r2, r3
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	f7fc fe75 	bl	8003868 <HAL_DMA_Start_IT>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d009      	beq.n	8006b98 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2210      	movs	r2, #16
 8006b88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e020      	b.n	8006bda <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2240      	movs	r2, #64	; 0x40
 8006b9e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc0:	623a      	str	r2, [r7, #32]
 8006bc2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	69f9      	ldr	r1, [r7, #28]
 8006bc6:	6a3a      	ldr	r2, [r7, #32]
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e5      	bne.n	8006ba0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	e000      	b.n	8006bda <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006bd8:	2302      	movs	r3, #2
  }
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3728      	adds	r7, #40	; 0x28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	08007f3f 	.word	0x08007f3f
 8006be8:	08007fd9 	.word	0x08007fd9
 8006bec:	0800815f 	.word	0x0800815f

08006bf0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08a      	sub	sp, #40	; 0x28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d137      	bne.n	8006c78 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <HAL_UART_Receive_DMA+0x24>
 8006c0e:	88fb      	ldrh	r3, [r7, #6]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e030      	b.n	8006c7a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a18      	ldr	r2, [pc, #96]	; (8006c84 <HAL_UART_Receive_DMA+0x94>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d01f      	beq.n	8006c68 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d018      	beq.n	8006c68 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	613b      	str	r3, [r7, #16]
   return(result);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	623b      	str	r3, [r7, #32]
 8006c56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c58:	69f9      	ldr	r1, [r7, #28]
 8006c5a:	6a3a      	ldr	r2, [r7, #32]
 8006c5c:	e841 2300 	strex	r3, r2, [r1]
 8006c60:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e6      	bne.n	8006c36 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f001 f818 	bl	8007ca4 <UART_Start_Receive_DMA>
 8006c74:	4603      	mov	r3, r0
 8006c76:	e000      	b.n	8006c7a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c78:	2302      	movs	r3, #2
  }
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3728      	adds	r7, #40	; 0x28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	40008000 	.word	0x40008000

08006c88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b0ba      	sub	sp, #232	; 0xe8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006cae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006cb2:	f640 030f 	movw	r3, #2063	; 0x80f
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006cbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d11b      	bne.n	8006cfc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc8:	f003 0320 	and.w	r3, r3, #32
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d015      	beq.n	8006cfc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd4:	f003 0320 	and.w	r3, r3, #32
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d105      	bne.n	8006ce8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d009      	beq.n	8006cfc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 82e3 	beq.w	80072b8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	4798      	blx	r3
      }
      return;
 8006cfa:	e2dd      	b.n	80072b8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 8123 	beq.w	8006f4c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006d06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d0a:	4b8d      	ldr	r3, [pc, #564]	; (8006f40 <HAL_UART_IRQHandler+0x2b8>)
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d106      	bne.n	8006d20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006d12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006d16:	4b8b      	ldr	r3, [pc, #556]	; (8006f44 <HAL_UART_IRQHandler+0x2bc>)
 8006d18:	4013      	ands	r3, r2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 8116 	beq.w	8006f4c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d011      	beq.n	8006d50 <HAL_UART_IRQHandler+0xc8>
 8006d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00b      	beq.n	8006d50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d46:	f043 0201 	orr.w	r2, r3, #1
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d011      	beq.n	8006d80 <HAL_UART_IRQHandler+0xf8>
 8006d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d76:	f043 0204 	orr.w	r2, r3, #4
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d011      	beq.n	8006db0 <HAL_UART_IRQHandler+0x128>
 8006d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00b      	beq.n	8006db0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2204      	movs	r2, #4
 8006d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da6:	f043 0202 	orr.w	r2, r3, #2
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d017      	beq.n	8006dec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc0:	f003 0320 	and.w	r3, r3, #32
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d105      	bne.n	8006dd4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006dc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006dcc:	4b5c      	ldr	r3, [pc, #368]	; (8006f40 <HAL_UART_IRQHandler+0x2b8>)
 8006dce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00b      	beq.n	8006dec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2208      	movs	r2, #8
 8006dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de2:	f043 0208 	orr.w	r2, r3, #8
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d012      	beq.n	8006e1e <HAL_UART_IRQHandler+0x196>
 8006df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00c      	beq.n	8006e1e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e14:	f043 0220 	orr.w	r2, r3, #32
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 8249 	beq.w	80072bc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d013      	beq.n	8006e5e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e3a:	f003 0320 	and.w	r3, r3, #32
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d105      	bne.n	8006e4e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d007      	beq.n	8006e5e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e72:	2b40      	cmp	r3, #64	; 0x40
 8006e74:	d005      	beq.n	8006e82 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d054      	beq.n	8006f2c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fff5 	bl	8007e72 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e92:	2b40      	cmp	r3, #64	; 0x40
 8006e94:	d146      	bne.n	8006f24 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3308      	adds	r3, #8
 8006e9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006eac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3308      	adds	r3, #8
 8006ebe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ec2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ece:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1d9      	bne.n	8006e96 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d017      	beq.n	8006f1c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ef2:	4a15      	ldr	r2, [pc, #84]	; (8006f48 <HAL_UART_IRQHandler+0x2c0>)
 8006ef4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fc fd87 	bl	8003a10 <HAL_DMA_Abort_IT>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d019      	beq.n	8006f3c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006f16:	4610      	mov	r0, r2
 8006f18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1a:	e00f      	b.n	8006f3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f9f5 	bl	800730c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f22:	e00b      	b.n	8006f3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f9f1 	bl	800730c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f2a:	e007      	b.n	8006f3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f9ed 	bl	800730c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006f3a:	e1bf      	b.n	80072bc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f3c:	bf00      	nop
    return;
 8006f3e:	e1bd      	b.n	80072bc <HAL_UART_IRQHandler+0x634>
 8006f40:	10000001 	.word	0x10000001
 8006f44:	04000120 	.word	0x04000120
 8006f48:	080081df 	.word	0x080081df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	f040 8153 	bne.w	80071fc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f5a:	f003 0310 	and.w	r3, r3, #16
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 814c 	beq.w	80071fc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f68:	f003 0310 	and.w	r3, r3, #16
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 8145 	beq.w	80071fc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2210      	movs	r2, #16
 8006f78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b40      	cmp	r3, #64	; 0x40
 8006f86:	f040 80bb 	bne.w	8007100 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 818f 	beq.w	80072c0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fa8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fac:	429a      	cmp	r2, r3
 8006fae:	f080 8187 	bcs.w	80072c0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f040 8087 	bne.w	80070de <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006fe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ffa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ffe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007006:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1da      	bne.n	8006fd0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3308      	adds	r3, #8
 8007020:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800702a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800702c:	f023 0301 	bic.w	r3, r3, #1
 8007030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3308      	adds	r3, #8
 800703a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800703e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007042:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007046:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e1      	bne.n	800701a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3308      	adds	r3, #8
 800705c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800706c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3308      	adds	r3, #8
 8007076:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800707a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800707c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007080:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e3      	bne.n	8007056 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2220      	movs	r2, #32
 8007092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ac:	f023 0310 	bic.w	r3, r3, #16
 80070b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070be:	65bb      	str	r3, [r7, #88]	; 0x58
 80070c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e4      	bne.n	800709c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fc fc40 	bl	800395e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2202      	movs	r2, #2
 80070e2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f911 	bl	8007320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070fe:	e0df      	b.n	80072c0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800710c:	b29b      	uxth	r3, r3
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800711a:	b29b      	uxth	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 80d1 	beq.w	80072c4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007122:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 80cc 	beq.w	80072c4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007134:	e853 3f00 	ldrex	r3, [r3]
 8007138:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800713a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007140:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	461a      	mov	r2, r3
 800714a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800714e:	647b      	str	r3, [r7, #68]	; 0x44
 8007150:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007152:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007154:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800715c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1e4      	bne.n	800712c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3308      	adds	r3, #8
 8007168:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	623b      	str	r3, [r7, #32]
   return(result);
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007178:	f023 0301 	bic.w	r3, r3, #1
 800717c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3308      	adds	r3, #8
 8007186:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800718a:	633a      	str	r2, [r7, #48]	; 0x30
 800718c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e1      	bne.n	8007162 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	e853 3f00 	ldrex	r3, [r3]
 80071be:	60fb      	str	r3, [r7, #12]
   return(result);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0310 	bic.w	r3, r3, #16
 80071c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80071d4:	61fb      	str	r3, [r7, #28]
 80071d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d8:	69b9      	ldr	r1, [r7, #24]
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	e841 2300 	strex	r3, r2, [r1]
 80071e0:	617b      	str	r3, [r7, #20]
   return(result);
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1e4      	bne.n	80071b2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f893 	bl	8007320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071fa:	e063      	b.n	80072c4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00e      	beq.n	8007226 <HAL_UART_IRQHandler+0x59e>
 8007208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800720c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d008      	beq.n	8007226 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800721c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 f81e 	bl	8008260 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007224:	e051      	b.n	80072ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722e:	2b00      	cmp	r3, #0
 8007230:	d014      	beq.n	800725c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723a:	2b00      	cmp	r3, #0
 800723c:	d105      	bne.n	800724a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800723e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007242:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d008      	beq.n	800725c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800724e:	2b00      	cmp	r3, #0
 8007250:	d03a      	beq.n	80072c8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	4798      	blx	r3
    }
    return;
 800725a:	e035      	b.n	80072c8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800725c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007264:	2b00      	cmp	r3, #0
 8007266:	d009      	beq.n	800727c <HAL_UART_IRQHandler+0x5f4>
 8007268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800726c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 ffc8 	bl	800820a <UART_EndTransmit_IT>
    return;
 800727a:	e026      	b.n	80072ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800727c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007280:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d009      	beq.n	800729c <HAL_UART_IRQHandler+0x614>
 8007288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800728c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fff7 	bl	8008288 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800729a:	e016      	b.n	80072ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800729c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d010      	beq.n	80072ca <HAL_UART_IRQHandler+0x642>
 80072a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	da0c      	bge.n	80072ca <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 ffdf 	bl	8008274 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072b6:	e008      	b.n	80072ca <HAL_UART_IRQHandler+0x642>
      return;
 80072b8:	bf00      	nop
 80072ba:	e006      	b.n	80072ca <HAL_UART_IRQHandler+0x642>
    return;
 80072bc:	bf00      	nop
 80072be:	e004      	b.n	80072ca <HAL_UART_IRQHandler+0x642>
      return;
 80072c0:	bf00      	nop
 80072c2:	e002      	b.n	80072ca <HAL_UART_IRQHandler+0x642>
      return;
 80072c4:	bf00      	nop
 80072c6:	e000      	b.n	80072ca <HAL_UART_IRQHandler+0x642>
    return;
 80072c8:	bf00      	nop
  }
}
 80072ca:	37e8      	adds	r7, #232	; 0xe8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800733c:	b08c      	sub	sp, #48	; 0x30
 800733e:	af00      	add	r7, sp, #0
 8007340:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	431a      	orrs	r2, r3
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	431a      	orrs	r2, r3
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	4313      	orrs	r3, r2
 800735e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4baa      	ldr	r3, [pc, #680]	; (8007610 <UART_SetConfig+0x2d8>)
 8007368:	4013      	ands	r3, r2
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	6812      	ldr	r2, [r2, #0]
 800736e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007370:	430b      	orrs	r3, r1
 8007372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a9f      	ldr	r2, [pc, #636]	; (8007614 <UART_SetConfig+0x2dc>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d004      	beq.n	80073a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073a0:	4313      	orrs	r3, r2
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80073ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073b8:	430b      	orrs	r3, r1
 80073ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	f023 010f 	bic.w	r1, r3, #15
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a90      	ldr	r2, [pc, #576]	; (8007618 <UART_SetConfig+0x2e0>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d125      	bne.n	8007428 <UART_SetConfig+0xf0>
 80073dc:	4b8f      	ldr	r3, [pc, #572]	; (800761c <UART_SetConfig+0x2e4>)
 80073de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d81a      	bhi.n	8007420 <UART_SetConfig+0xe8>
 80073ea:	a201      	add	r2, pc, #4	; (adr r2, 80073f0 <UART_SetConfig+0xb8>)
 80073ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f0:	08007401 	.word	0x08007401
 80073f4:	08007411 	.word	0x08007411
 80073f8:	08007409 	.word	0x08007409
 80073fc:	08007419 	.word	0x08007419
 8007400:	2301      	movs	r3, #1
 8007402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007406:	e116      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007408:	2302      	movs	r3, #2
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800740e:	e112      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007410:	2304      	movs	r3, #4
 8007412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007416:	e10e      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007418:	2308      	movs	r3, #8
 800741a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800741e:	e10a      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007420:	2310      	movs	r3, #16
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007426:	e106      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a7c      	ldr	r2, [pc, #496]	; (8007620 <UART_SetConfig+0x2e8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d138      	bne.n	80074a4 <UART_SetConfig+0x16c>
 8007432:	4b7a      	ldr	r3, [pc, #488]	; (800761c <UART_SetConfig+0x2e4>)
 8007434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007438:	f003 030c 	and.w	r3, r3, #12
 800743c:	2b0c      	cmp	r3, #12
 800743e:	d82d      	bhi.n	800749c <UART_SetConfig+0x164>
 8007440:	a201      	add	r2, pc, #4	; (adr r2, 8007448 <UART_SetConfig+0x110>)
 8007442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007446:	bf00      	nop
 8007448:	0800747d 	.word	0x0800747d
 800744c:	0800749d 	.word	0x0800749d
 8007450:	0800749d 	.word	0x0800749d
 8007454:	0800749d 	.word	0x0800749d
 8007458:	0800748d 	.word	0x0800748d
 800745c:	0800749d 	.word	0x0800749d
 8007460:	0800749d 	.word	0x0800749d
 8007464:	0800749d 	.word	0x0800749d
 8007468:	08007485 	.word	0x08007485
 800746c:	0800749d 	.word	0x0800749d
 8007470:	0800749d 	.word	0x0800749d
 8007474:	0800749d 	.word	0x0800749d
 8007478:	08007495 	.word	0x08007495
 800747c:	2300      	movs	r3, #0
 800747e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007482:	e0d8      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007484:	2302      	movs	r3, #2
 8007486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800748a:	e0d4      	b.n	8007636 <UART_SetConfig+0x2fe>
 800748c:	2304      	movs	r3, #4
 800748e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007492:	e0d0      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007494:	2308      	movs	r3, #8
 8007496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800749a:	e0cc      	b.n	8007636 <UART_SetConfig+0x2fe>
 800749c:	2310      	movs	r3, #16
 800749e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074a2:	e0c8      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a5e      	ldr	r2, [pc, #376]	; (8007624 <UART_SetConfig+0x2ec>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d125      	bne.n	80074fa <UART_SetConfig+0x1c2>
 80074ae:	4b5b      	ldr	r3, [pc, #364]	; (800761c <UART_SetConfig+0x2e4>)
 80074b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074b8:	2b30      	cmp	r3, #48	; 0x30
 80074ba:	d016      	beq.n	80074ea <UART_SetConfig+0x1b2>
 80074bc:	2b30      	cmp	r3, #48	; 0x30
 80074be:	d818      	bhi.n	80074f2 <UART_SetConfig+0x1ba>
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	d00a      	beq.n	80074da <UART_SetConfig+0x1a2>
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	d814      	bhi.n	80074f2 <UART_SetConfig+0x1ba>
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <UART_SetConfig+0x19a>
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d008      	beq.n	80074e2 <UART_SetConfig+0x1aa>
 80074d0:	e00f      	b.n	80074f2 <UART_SetConfig+0x1ba>
 80074d2:	2300      	movs	r3, #0
 80074d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074d8:	e0ad      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074da:	2302      	movs	r3, #2
 80074dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074e0:	e0a9      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074e2:	2304      	movs	r3, #4
 80074e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074e8:	e0a5      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074ea:	2308      	movs	r3, #8
 80074ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074f0:	e0a1      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074f2:	2310      	movs	r3, #16
 80074f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074f8:	e09d      	b.n	8007636 <UART_SetConfig+0x2fe>
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a4a      	ldr	r2, [pc, #296]	; (8007628 <UART_SetConfig+0x2f0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d125      	bne.n	8007550 <UART_SetConfig+0x218>
 8007504:	4b45      	ldr	r3, [pc, #276]	; (800761c <UART_SetConfig+0x2e4>)
 8007506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800750a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800750e:	2bc0      	cmp	r3, #192	; 0xc0
 8007510:	d016      	beq.n	8007540 <UART_SetConfig+0x208>
 8007512:	2bc0      	cmp	r3, #192	; 0xc0
 8007514:	d818      	bhi.n	8007548 <UART_SetConfig+0x210>
 8007516:	2b80      	cmp	r3, #128	; 0x80
 8007518:	d00a      	beq.n	8007530 <UART_SetConfig+0x1f8>
 800751a:	2b80      	cmp	r3, #128	; 0x80
 800751c:	d814      	bhi.n	8007548 <UART_SetConfig+0x210>
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <UART_SetConfig+0x1f0>
 8007522:	2b40      	cmp	r3, #64	; 0x40
 8007524:	d008      	beq.n	8007538 <UART_SetConfig+0x200>
 8007526:	e00f      	b.n	8007548 <UART_SetConfig+0x210>
 8007528:	2300      	movs	r3, #0
 800752a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800752e:	e082      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007530:	2302      	movs	r3, #2
 8007532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007536:	e07e      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007538:	2304      	movs	r3, #4
 800753a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800753e:	e07a      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007540:	2308      	movs	r3, #8
 8007542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007546:	e076      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007548:	2310      	movs	r3, #16
 800754a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800754e:	e072      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a35      	ldr	r2, [pc, #212]	; (800762c <UART_SetConfig+0x2f4>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d12a      	bne.n	80075b0 <UART_SetConfig+0x278>
 800755a:	4b30      	ldr	r3, [pc, #192]	; (800761c <UART_SetConfig+0x2e4>)
 800755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007568:	d01a      	beq.n	80075a0 <UART_SetConfig+0x268>
 800756a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800756e:	d81b      	bhi.n	80075a8 <UART_SetConfig+0x270>
 8007570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007574:	d00c      	beq.n	8007590 <UART_SetConfig+0x258>
 8007576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800757a:	d815      	bhi.n	80075a8 <UART_SetConfig+0x270>
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <UART_SetConfig+0x250>
 8007580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007584:	d008      	beq.n	8007598 <UART_SetConfig+0x260>
 8007586:	e00f      	b.n	80075a8 <UART_SetConfig+0x270>
 8007588:	2300      	movs	r3, #0
 800758a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800758e:	e052      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007590:	2302      	movs	r3, #2
 8007592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007596:	e04e      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007598:	2304      	movs	r3, #4
 800759a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800759e:	e04a      	b.n	8007636 <UART_SetConfig+0x2fe>
 80075a0:	2308      	movs	r3, #8
 80075a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075a6:	e046      	b.n	8007636 <UART_SetConfig+0x2fe>
 80075a8:	2310      	movs	r3, #16
 80075aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ae:	e042      	b.n	8007636 <UART_SetConfig+0x2fe>
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a17      	ldr	r2, [pc, #92]	; (8007614 <UART_SetConfig+0x2dc>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d13a      	bne.n	8007630 <UART_SetConfig+0x2f8>
 80075ba:	4b18      	ldr	r3, [pc, #96]	; (800761c <UART_SetConfig+0x2e4>)
 80075bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075c8:	d01a      	beq.n	8007600 <UART_SetConfig+0x2c8>
 80075ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075ce:	d81b      	bhi.n	8007608 <UART_SetConfig+0x2d0>
 80075d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d4:	d00c      	beq.n	80075f0 <UART_SetConfig+0x2b8>
 80075d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075da:	d815      	bhi.n	8007608 <UART_SetConfig+0x2d0>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <UART_SetConfig+0x2b0>
 80075e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e4:	d008      	beq.n	80075f8 <UART_SetConfig+0x2c0>
 80075e6:	e00f      	b.n	8007608 <UART_SetConfig+0x2d0>
 80075e8:	2300      	movs	r3, #0
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ee:	e022      	b.n	8007636 <UART_SetConfig+0x2fe>
 80075f0:	2302      	movs	r3, #2
 80075f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075f6:	e01e      	b.n	8007636 <UART_SetConfig+0x2fe>
 80075f8:	2304      	movs	r3, #4
 80075fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075fe:	e01a      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007600:	2308      	movs	r3, #8
 8007602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007606:	e016      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007608:	2310      	movs	r3, #16
 800760a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800760e:	e012      	b.n	8007636 <UART_SetConfig+0x2fe>
 8007610:	cfff69f3 	.word	0xcfff69f3
 8007614:	40008000 	.word	0x40008000
 8007618:	40013800 	.word	0x40013800
 800761c:	40021000 	.word	0x40021000
 8007620:	40004400 	.word	0x40004400
 8007624:	40004800 	.word	0x40004800
 8007628:	40004c00 	.word	0x40004c00
 800762c:	40005000 	.word	0x40005000
 8007630:	2310      	movs	r3, #16
 8007632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4aae      	ldr	r2, [pc, #696]	; (80078f4 <UART_SetConfig+0x5bc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	f040 8097 	bne.w	8007770 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007642:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007646:	2b08      	cmp	r3, #8
 8007648:	d823      	bhi.n	8007692 <UART_SetConfig+0x35a>
 800764a:	a201      	add	r2, pc, #4	; (adr r2, 8007650 <UART_SetConfig+0x318>)
 800764c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007650:	08007675 	.word	0x08007675
 8007654:	08007693 	.word	0x08007693
 8007658:	0800767d 	.word	0x0800767d
 800765c:	08007693 	.word	0x08007693
 8007660:	08007683 	.word	0x08007683
 8007664:	08007693 	.word	0x08007693
 8007668:	08007693 	.word	0x08007693
 800766c:	08007693 	.word	0x08007693
 8007670:	0800768b 	.word	0x0800768b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007674:	f7fd fabe 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 8007678:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800767a:	e010      	b.n	800769e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800767c:	4b9e      	ldr	r3, [pc, #632]	; (80078f8 <UART_SetConfig+0x5c0>)
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007680:	e00d      	b.n	800769e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007682:	f7fd fa49 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 8007686:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007688:	e009      	b.n	800769e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800768a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007690:	e005      	b.n	800769e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800769c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 8130 	beq.w	8007906 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	4a94      	ldr	r2, [pc, #592]	; (80078fc <UART_SetConfig+0x5c4>)
 80076ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076b0:	461a      	mov	r2, r3
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	4613      	mov	r3, r2
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	4413      	add	r3, r2
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d305      	bcc.n	80076d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d903      	bls.n	80076de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076dc:	e113      	b.n	8007906 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	2200      	movs	r2, #0
 80076e2:	60bb      	str	r3, [r7, #8]
 80076e4:	60fa      	str	r2, [r7, #12]
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	4a84      	ldr	r2, [pc, #528]	; (80078fc <UART_SetConfig+0x5c4>)
 80076ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2200      	movs	r2, #0
 80076f4:	603b      	str	r3, [r7, #0]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007700:	f7f8 fd8a 	bl	8000218 <__aeabi_uldivmod>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4610      	mov	r0, r2
 800770a:	4619      	mov	r1, r3
 800770c:	f04f 0200 	mov.w	r2, #0
 8007710:	f04f 0300 	mov.w	r3, #0
 8007714:	020b      	lsls	r3, r1, #8
 8007716:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800771a:	0202      	lsls	r2, r0, #8
 800771c:	6979      	ldr	r1, [r7, #20]
 800771e:	6849      	ldr	r1, [r1, #4]
 8007720:	0849      	lsrs	r1, r1, #1
 8007722:	2000      	movs	r0, #0
 8007724:	460c      	mov	r4, r1
 8007726:	4605      	mov	r5, r0
 8007728:	eb12 0804 	adds.w	r8, r2, r4
 800772c:	eb43 0905 	adc.w	r9, r3, r5
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	469a      	mov	sl, r3
 8007738:	4693      	mov	fp, r2
 800773a:	4652      	mov	r2, sl
 800773c:	465b      	mov	r3, fp
 800773e:	4640      	mov	r0, r8
 8007740:	4649      	mov	r1, r9
 8007742:	f7f8 fd69 	bl	8000218 <__aeabi_uldivmod>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4613      	mov	r3, r2
 800774c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007754:	d308      	bcc.n	8007768 <UART_SetConfig+0x430>
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800775c:	d204      	bcs.n	8007768 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6a3a      	ldr	r2, [r7, #32]
 8007764:	60da      	str	r2, [r3, #12]
 8007766:	e0ce      	b.n	8007906 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800776e:	e0ca      	b.n	8007906 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007778:	d166      	bne.n	8007848 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800777a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800777e:	2b08      	cmp	r3, #8
 8007780:	d827      	bhi.n	80077d2 <UART_SetConfig+0x49a>
 8007782:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <UART_SetConfig+0x450>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	080077ad 	.word	0x080077ad
 800778c:	080077b5 	.word	0x080077b5
 8007790:	080077bd 	.word	0x080077bd
 8007794:	080077d3 	.word	0x080077d3
 8007798:	080077c3 	.word	0x080077c3
 800779c:	080077d3 	.word	0x080077d3
 80077a0:	080077d3 	.word	0x080077d3
 80077a4:	080077d3 	.word	0x080077d3
 80077a8:	080077cb 	.word	0x080077cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077ac:	f7fd fa22 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 80077b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077b2:	e014      	b.n	80077de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077b4:	f7fd fa34 	bl	8004c20 <HAL_RCC_GetPCLK2Freq>
 80077b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077ba:	e010      	b.n	80077de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077bc:	4b4e      	ldr	r3, [pc, #312]	; (80078f8 <UART_SetConfig+0x5c0>)
 80077be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077c0:	e00d      	b.n	80077de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077c2:	f7fd f9a9 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 80077c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077c8:	e009      	b.n	80077de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077d0:	e005      	b.n	80077de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80077dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 8090 	beq.w	8007906 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	4a44      	ldr	r2, [pc, #272]	; (80078fc <UART_SetConfig+0x5c4>)
 80077ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077f0:	461a      	mov	r2, r3
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80077f8:	005a      	lsls	r2, r3, #1
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	085b      	lsrs	r3, r3, #1
 8007800:	441a      	add	r2, r3
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	fbb2 f3f3 	udiv	r3, r2, r3
 800780a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	2b0f      	cmp	r3, #15
 8007810:	d916      	bls.n	8007840 <UART_SetConfig+0x508>
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007818:	d212      	bcs.n	8007840 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	b29b      	uxth	r3, r3
 800781e:	f023 030f 	bic.w	r3, r3, #15
 8007822:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	b29b      	uxth	r3, r3
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	b29a      	uxth	r2, r3
 8007830:	8bfb      	ldrh	r3, [r7, #30]
 8007832:	4313      	orrs	r3, r2
 8007834:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	8bfa      	ldrh	r2, [r7, #30]
 800783c:	60da      	str	r2, [r3, #12]
 800783e:	e062      	b.n	8007906 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007846:	e05e      	b.n	8007906 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800784c:	2b08      	cmp	r3, #8
 800784e:	d828      	bhi.n	80078a2 <UART_SetConfig+0x56a>
 8007850:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <UART_SetConfig+0x520>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	0800787d 	.word	0x0800787d
 800785c:	08007885 	.word	0x08007885
 8007860:	0800788d 	.word	0x0800788d
 8007864:	080078a3 	.word	0x080078a3
 8007868:	08007893 	.word	0x08007893
 800786c:	080078a3 	.word	0x080078a3
 8007870:	080078a3 	.word	0x080078a3
 8007874:	080078a3 	.word	0x080078a3
 8007878:	0800789b 	.word	0x0800789b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800787c:	f7fd f9ba 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 8007880:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007882:	e014      	b.n	80078ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007884:	f7fd f9cc 	bl	8004c20 <HAL_RCC_GetPCLK2Freq>
 8007888:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800788a:	e010      	b.n	80078ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800788c:	4b1a      	ldr	r3, [pc, #104]	; (80078f8 <UART_SetConfig+0x5c0>)
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007890:	e00d      	b.n	80078ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007892:	f7fd f941 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 8007896:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007898:	e009      	b.n	80078ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800789a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078a0:	e005      	b.n	80078ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80078ac:	bf00      	nop
    }

    if (pclk != 0U)
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d028      	beq.n	8007906 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	4a10      	ldr	r2, [pc, #64]	; (80078fc <UART_SetConfig+0x5c4>)
 80078ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078be:	461a      	mov	r2, r3
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	085b      	lsrs	r3, r3, #1
 80078cc:	441a      	add	r2, r3
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	2b0f      	cmp	r3, #15
 80078dc:	d910      	bls.n	8007900 <UART_SetConfig+0x5c8>
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078e4:	d20c      	bcs.n	8007900 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	60da      	str	r2, [r3, #12]
 80078f0:	e009      	b.n	8007906 <UART_SetConfig+0x5ce>
 80078f2:	bf00      	nop
 80078f4:	40008000 	.word	0x40008000
 80078f8:	00f42400 	.word	0x00f42400
 80078fc:	0800852c 	.word	0x0800852c
      }
      else
      {
        ret = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2201      	movs	r2, #1
 800790a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2201      	movs	r2, #1
 8007912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2200      	movs	r2, #0
 800791a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2200      	movs	r2, #0
 8007920:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007922:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007926:	4618      	mov	r0, r3
 8007928:	3730      	adds	r7, #48	; 0x30
 800792a:	46bd      	mov	sp, r7
 800792c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793c:	f003 0308 	and.w	r3, r3, #8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00a      	beq.n	800795a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00a      	beq.n	800799e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a2:	f003 0304 	and.w	r3, r3, #4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c4:	f003 0310 	and.w	r3, r3, #16
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00a      	beq.n	80079e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d01a      	beq.n	8007a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a2e:	d10a      	bne.n	8007a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	430a      	orrs	r2, r1
 8007a66:	605a      	str	r2, [r3, #4]
  }
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b098      	sub	sp, #96	; 0x60
 8007a78:	af02      	add	r7, sp, #8
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a84:	f7f9 ff0a 	bl	800189c <HAL_GetTick>
 8007a88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0308 	and.w	r3, r3, #8
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d12f      	bne.n	8007af8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f88e 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d022      	beq.n	8007af8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aba:	e853 3f00 	ldrex	r3, [r3]
 8007abe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ac6:	653b      	str	r3, [r7, #80]	; 0x50
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	461a      	mov	r2, r3
 8007ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ad2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ad8:	e841 2300 	strex	r3, r2, [r1]
 8007adc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e6      	bne.n	8007ab2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e063      	b.n	8007bc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	d149      	bne.n	8007b9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f857 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d03c      	beq.n	8007b9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8007b40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e6      	bne.n	8007b20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b72:	61fa      	str	r2, [r7, #28]
 8007b74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	69b9      	ldr	r1, [r7, #24]
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	617b      	str	r3, [r7, #20]
   return(result);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e5      	bne.n	8007b52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e012      	b.n	8007bc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3758      	adds	r7, #88	; 0x58
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bd8:	e04f      	b.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be0:	d04b      	beq.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007be2:	f7f9 fe5b 	bl	800189c <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d302      	bcc.n	8007bf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e04e      	b.n	8007c9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0304 	and.w	r3, r3, #4
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d037      	beq.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2b80      	cmp	r3, #128	; 0x80
 8007c0e:	d034      	beq.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2b40      	cmp	r3, #64	; 0x40
 8007c14:	d031      	beq.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	f003 0308 	and.w	r3, r3, #8
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d110      	bne.n	8007c46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2208      	movs	r2, #8
 8007c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 f920 	bl	8007e72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2208      	movs	r2, #8
 8007c36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e029      	b.n	8007c9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c54:	d111      	bne.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 f906 	bl	8007e72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2220      	movs	r2, #32
 8007c6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e00f      	b.n	8007c9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	69da      	ldr	r2, [r3, #28]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	4013      	ands	r3, r2
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	bf0c      	ite	eq
 8007c8a:	2301      	moveq	r3, #1
 8007c8c:	2300      	movne	r3, #0
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	461a      	mov	r2, r3
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d0a0      	beq.n	8007bda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b096      	sub	sp, #88	; 0x58
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	88fa      	ldrh	r2, [r7, #6]
 8007cbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2222      	movs	r2, #34	; 0x22
 8007ccc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d02d      	beq.n	8007d36 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ce0:	4a40      	ldr	r2, [pc, #256]	; (8007de4 <UART_Start_Receive_DMA+0x140>)
 8007ce2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cea:	4a3f      	ldr	r2, [pc, #252]	; (8007de8 <UART_Start_Receive_DMA+0x144>)
 8007cec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cf4:	4a3d      	ldr	r2, [pc, #244]	; (8007dec <UART_Start_Receive_DMA+0x148>)
 8007cf6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cfe:	2200      	movs	r2, #0
 8007d00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3324      	adds	r3, #36	; 0x24
 8007d0e:	4619      	mov	r1, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d14:	461a      	mov	r2, r3
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	f7fb fda6 	bl	8003868 <HAL_DMA_Start_IT>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d009      	beq.n	8007d36 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2210      	movs	r2, #16
 8007d26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e051      	b.n	8007dda <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d018      	beq.n	8007d70 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d52:	657b      	str	r3, [r7, #84]	; 0x54
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d5e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e6      	bne.n	8007d3e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3308      	adds	r3, #8
 8007d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	f043 0301 	orr.w	r3, r3, #1
 8007d86:	653b      	str	r3, [r7, #80]	; 0x50
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d90:	637a      	str	r2, [r7, #52]	; 0x34
 8007d92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e5      	bne.n	8007d70 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3308      	adds	r3, #8
 8007daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	613b      	str	r3, [r7, #16]
   return(result);
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3308      	adds	r3, #8
 8007dc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dc4:	623a      	str	r2, [r7, #32]
 8007dc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	69f9      	ldr	r1, [r7, #28]
 8007dca:	6a3a      	ldr	r2, [r7, #32]
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e5      	bne.n	8007da4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3758      	adds	r7, #88	; 0x58
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	08007ff5 	.word	0x08007ff5
 8007de8:	08008121 	.word	0x08008121
 8007dec:	0800815f 	.word	0x0800815f

08007df0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b08f      	sub	sp, #60	; 0x3c
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	461a      	mov	r2, r3
 8007e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e18:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e6      	bne.n	8007df8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3308      	adds	r3, #8
 8007e30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007e40:	633b      	str	r3, [r7, #48]	; 0x30
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3308      	adds	r3, #8
 8007e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e4a:	61ba      	str	r2, [r7, #24]
 8007e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6979      	ldr	r1, [r7, #20]
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	613b      	str	r3, [r7, #16]
   return(result);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e5      	bne.n	8007e2a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2220      	movs	r2, #32
 8007e62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007e66:	bf00      	nop
 8007e68:	373c      	adds	r7, #60	; 0x3c
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b095      	sub	sp, #84	; 0x54
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e82:	e853 3f00 	ldrex	r3, [r3]
 8007e86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	461a      	mov	r2, r3
 8007e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e98:	643b      	str	r3, [r7, #64]	; 0x40
 8007e9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ea0:	e841 2300 	strex	r3, r2, [r1]
 8007ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1e6      	bne.n	8007e7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	e853 3f00 	ldrex	r3, [r3]
 8007eba:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ec2:	f023 0301 	bic.w	r3, r3, #1
 8007ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3308      	adds	r3, #8
 8007ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ed0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ed8:	e841 2300 	strex	r3, r2, [r1]
 8007edc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1e3      	bne.n	8007eac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d118      	bne.n	8007f1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f023 0310 	bic.w	r3, r3, #16
 8007f00:	647b      	str	r3, [r7, #68]	; 0x44
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f0a:	61bb      	str	r3, [r7, #24]
 8007f0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	6979      	ldr	r1, [r7, #20]
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	613b      	str	r3, [r7, #16]
   return(result);
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e6      	bne.n	8007eec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007f32:	bf00      	nop
 8007f34:	3754      	adds	r7, #84	; 0x54
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b090      	sub	sp, #64	; 0x40
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d137      	bne.n	8007fca <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	623b      	str	r3, [r7, #32]
   return(result);
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f78:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3308      	adds	r3, #8
 8007f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f82:	633a      	str	r2, [r7, #48]	; 0x30
 8007f84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f8a:	e841 2300 	strex	r3, r2, [r1]
 8007f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1e5      	bne.n	8007f62 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007faa:	637b      	str	r3, [r7, #52]	; 0x34
 8007fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb4:	61fb      	str	r3, [r7, #28]
 8007fb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb8:	69b9      	ldr	r1, [r7, #24]
 8007fba:	69fa      	ldr	r2, [r7, #28]
 8007fbc:	e841 2300 	strex	r3, r2, [r1]
 8007fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e6      	bne.n	8007f96 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fc8:	e002      	b.n	8007fd0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007fca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007fcc:	f7ff f980 	bl	80072d0 <HAL_UART_TxCpltCallback>
}
 8007fd0:	bf00      	nop
 8007fd2:	3740      	adds	r7, #64	; 0x40
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f7ff f97c 	bl	80072e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fec:	bf00      	nop
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b09c      	sub	sp, #112	; 0x70
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008000:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0320 	and.w	r3, r3, #32
 800800c:	2b00      	cmp	r3, #0
 800800e:	d171      	bne.n	80080f4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008012:	2200      	movs	r2, #0
 8008014:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008020:	e853 3f00 	ldrex	r3, [r3]
 8008024:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800802c:	66bb      	str	r3, [r7, #104]	; 0x68
 800802e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008036:	65bb      	str	r3, [r7, #88]	; 0x58
 8008038:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800803c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800803e:	e841 2300 	strex	r3, r2, [r1]
 8008042:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1e6      	bne.n	8008018 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800804a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3308      	adds	r3, #8
 8008050:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008054:	e853 3f00 	ldrex	r3, [r3]
 8008058:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800805a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800805c:	f023 0301 	bic.w	r3, r3, #1
 8008060:	667b      	str	r3, [r7, #100]	; 0x64
 8008062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3308      	adds	r3, #8
 8008068:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800806a:	647a      	str	r2, [r7, #68]	; 0x44
 800806c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e5      	bne.n	800804a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800807e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3308      	adds	r3, #8
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	e853 3f00 	ldrex	r3, [r3]
 800808c:	623b      	str	r3, [r7, #32]
   return(result);
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008094:	663b      	str	r3, [r7, #96]	; 0x60
 8008096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3308      	adds	r3, #8
 800809c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800809e:	633a      	str	r2, [r7, #48]	; 0x30
 80080a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a6:	e841 2300 	strex	r3, r2, [r1]
 80080aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1e5      	bne.n	800807e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80080b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b4:	2220      	movs	r2, #32
 80080b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d118      	bne.n	80080f4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f023 0310 	bic.w	r3, r3, #16
 80080d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	461a      	mov	r2, r3
 80080de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080e0:	61fb      	str	r3, [r7, #28]
 80080e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	69b9      	ldr	r1, [r7, #24]
 80080e6:	69fa      	ldr	r2, [r7, #28]
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	617b      	str	r3, [r7, #20]
   return(result);
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e6      	bne.n	80080c2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f6:	2200      	movs	r2, #0
 80080f8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d107      	bne.n	8008112 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008104:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008108:	4619      	mov	r1, r3
 800810a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800810c:	f7ff f908 	bl	8007320 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008110:	e002      	b.n	8008118 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008112:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008114:	f7f8 ffee 	bl	80010f4 <HAL_UART_RxCpltCallback>
}
 8008118:	bf00      	nop
 800811a:	3770      	adds	r7, #112	; 0x70
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2201      	movs	r2, #1
 8008132:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008138:	2b01      	cmp	r3, #1
 800813a:	d109      	bne.n	8008150 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008142:	085b      	lsrs	r3, r3, #1
 8008144:	b29b      	uxth	r3, r3
 8008146:	4619      	mov	r1, r3
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f7ff f8e9 	bl	8007320 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800814e:	e002      	b.n	8008156 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f7ff f8d1 	bl	80072f8 <HAL_UART_RxHalfCpltCallback>
}
 8008156:	bf00      	nop
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b086      	sub	sp, #24
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008172:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800817a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008186:	2b80      	cmp	r3, #128	; 0x80
 8008188:	d109      	bne.n	800819e <UART_DMAError+0x40>
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	2b21      	cmp	r3, #33	; 0x21
 800818e:	d106      	bne.n	800819e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2200      	movs	r2, #0
 8008194:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008198:	6978      	ldr	r0, [r7, #20]
 800819a:	f7ff fe29 	bl	8007df0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a8:	2b40      	cmp	r3, #64	; 0x40
 80081aa:	d109      	bne.n	80081c0 <UART_DMAError+0x62>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b22      	cmp	r3, #34	; 0x22
 80081b0:	d106      	bne.n	80081c0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80081ba:	6978      	ldr	r0, [r7, #20]
 80081bc:	f7ff fe59 	bl	8007e72 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c6:	f043 0210 	orr.w	r2, r3, #16
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081d0:	6978      	ldr	r0, [r7, #20]
 80081d2:	f7ff f89b 	bl	800730c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081d6:	bf00      	nop
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f7ff f885 	bl	800730c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008202:	bf00      	nop
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b088      	sub	sp, #32
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	e853 3f00 	ldrex	r3, [r3]
 800821e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008226:	61fb      	str	r3, [r7, #28]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	461a      	mov	r2, r3
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	61bb      	str	r3, [r7, #24]
 8008232:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008234:	6979      	ldr	r1, [r7, #20]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	e841 2300 	strex	r3, r2, [r1]
 800823c:	613b      	str	r3, [r7, #16]
   return(result);
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e6      	bne.n	8008212 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2220      	movs	r2, #32
 8008248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7ff f83c 	bl	80072d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008258:	bf00      	nop
 800825a:	3720      	adds	r7, #32
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d101      	bne.n	80082b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80082ae:	2302      	movs	r3, #2
 80082b0:	e027      	b.n	8008302 <HAL_UARTEx_DisableFifoMode+0x66>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2224      	movs	r2, #36	; 0x24
 80082be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 0201 	bic.w	r2, r2, #1
 80082d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80082e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2220      	movs	r2, #32
 80082f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800831e:	2b01      	cmp	r3, #1
 8008320:	d101      	bne.n	8008326 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008322:	2302      	movs	r3, #2
 8008324:	e02d      	b.n	8008382 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2224      	movs	r2, #36	; 0x24
 8008332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 0201 	bic.w	r2, r2, #1
 800834c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	683a      	ldr	r2, [r7, #0]
 800835e:	430a      	orrs	r2, r1
 8008360:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f850 	bl	8008408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2220      	movs	r2, #32
 8008374:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b084      	sub	sp, #16
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800839a:	2b01      	cmp	r3, #1
 800839c:	d101      	bne.n	80083a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800839e:	2302      	movs	r3, #2
 80083a0:	e02d      	b.n	80083fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2224      	movs	r2, #36	; 0x24
 80083ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f022 0201 	bic.w	r2, r2, #1
 80083c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f812 	bl	8008408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2220      	movs	r2, #32
 80083f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
	...

08008408 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008414:	2b00      	cmp	r3, #0
 8008416:	d108      	bne.n	800842a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008428:	e031      	b.n	800848e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800842a:	2308      	movs	r3, #8
 800842c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800842e:	2308      	movs	r3, #8
 8008430:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	0e5b      	lsrs	r3, r3, #25
 800843a:	b2db      	uxtb	r3, r3
 800843c:	f003 0307 	and.w	r3, r3, #7
 8008440:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	0f5b      	lsrs	r3, r3, #29
 800844a:	b2db      	uxtb	r3, r3
 800844c:	f003 0307 	and.w	r3, r3, #7
 8008450:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	7b3a      	ldrb	r2, [r7, #12]
 8008456:	4911      	ldr	r1, [pc, #68]	; (800849c <UARTEx_SetNbDataToProcess+0x94>)
 8008458:	5c8a      	ldrb	r2, [r1, r2]
 800845a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800845e:	7b3a      	ldrb	r2, [r7, #12]
 8008460:	490f      	ldr	r1, [pc, #60]	; (80084a0 <UARTEx_SetNbDataToProcess+0x98>)
 8008462:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008464:	fb93 f3f2 	sdiv	r3, r3, r2
 8008468:	b29a      	uxth	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	7b7a      	ldrb	r2, [r7, #13]
 8008474:	4909      	ldr	r1, [pc, #36]	; (800849c <UARTEx_SetNbDataToProcess+0x94>)
 8008476:	5c8a      	ldrb	r2, [r1, r2]
 8008478:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800847c:	7b7a      	ldrb	r2, [r7, #13]
 800847e:	4908      	ldr	r1, [pc, #32]	; (80084a0 <UARTEx_SetNbDataToProcess+0x98>)
 8008480:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008482:	fb93 f3f2 	sdiv	r3, r3, r2
 8008486:	b29a      	uxth	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800848e:	bf00      	nop
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	08008544 	.word	0x08008544
 80084a0:	0800854c 	.word	0x0800854c

080084a4 <memset>:
 80084a4:	4402      	add	r2, r0
 80084a6:	4603      	mov	r3, r0
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d100      	bne.n	80084ae <memset+0xa>
 80084ac:	4770      	bx	lr
 80084ae:	f803 1b01 	strb.w	r1, [r3], #1
 80084b2:	e7f9      	b.n	80084a8 <memset+0x4>

080084b4 <__libc_init_array>:
 80084b4:	b570      	push	{r4, r5, r6, lr}
 80084b6:	4d0d      	ldr	r5, [pc, #52]	; (80084ec <__libc_init_array+0x38>)
 80084b8:	4c0d      	ldr	r4, [pc, #52]	; (80084f0 <__libc_init_array+0x3c>)
 80084ba:	1b64      	subs	r4, r4, r5
 80084bc:	10a4      	asrs	r4, r4, #2
 80084be:	2600      	movs	r6, #0
 80084c0:	42a6      	cmp	r6, r4
 80084c2:	d109      	bne.n	80084d8 <__libc_init_array+0x24>
 80084c4:	4d0b      	ldr	r5, [pc, #44]	; (80084f4 <__libc_init_array+0x40>)
 80084c6:	4c0c      	ldr	r4, [pc, #48]	; (80084f8 <__libc_init_array+0x44>)
 80084c8:	f000 f818 	bl	80084fc <_init>
 80084cc:	1b64      	subs	r4, r4, r5
 80084ce:	10a4      	asrs	r4, r4, #2
 80084d0:	2600      	movs	r6, #0
 80084d2:	42a6      	cmp	r6, r4
 80084d4:	d105      	bne.n	80084e2 <__libc_init_array+0x2e>
 80084d6:	bd70      	pop	{r4, r5, r6, pc}
 80084d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084dc:	4798      	blx	r3
 80084de:	3601      	adds	r6, #1
 80084e0:	e7ee      	b.n	80084c0 <__libc_init_array+0xc>
 80084e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084e6:	4798      	blx	r3
 80084e8:	3601      	adds	r6, #1
 80084ea:	e7f2      	b.n	80084d2 <__libc_init_array+0x1e>
 80084ec:	0800855c 	.word	0x0800855c
 80084f0:	0800855c 	.word	0x0800855c
 80084f4:	0800855c 	.word	0x0800855c
 80084f8:	08008560 	.word	0x08008560

080084fc <_init>:
 80084fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fe:	bf00      	nop
 8008500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008502:	bc08      	pop	{r3}
 8008504:	469e      	mov	lr, r3
 8008506:	4770      	bx	lr

08008508 <_fini>:
 8008508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850a:	bf00      	nop
 800850c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800850e:	bc08      	pop	{r3}
 8008510:	469e      	mov	lr, r3
 8008512:	4770      	bx	lr
