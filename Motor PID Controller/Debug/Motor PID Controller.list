
Motor PID Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008010  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080081e8  080081e8  000181e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008228  08008228  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008230  08008230  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008230  08008230  00018230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008234  08008234  00018234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  20000010  08008248  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08008248  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001811a  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002af4  00000000  00000000  0003819d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  0003ac98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001060  00000000  00000000  0003c188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b63  00000000  00000000  0003d1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d2e  00000000  00000000  00065d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00113986  00000000  00000000  0007da79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005af8  00000000  00000000  00191400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00196ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080081d0 	.word	0x080081d0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080081d0 	.word	0x080081d0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f001 f8f1 	bl	80016fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f87e 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fbbc 	bl	8000c9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fb80 	bl	8000c28 <MX_DMA_Init>
  MX_TIM8_Init();
 8000528:	f000 fa4c 	bl	80009c4 <MX_TIM8_Init>
  MX_TIM3_Init();
 800052c:	f000 f94c 	bl	80007c8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000530:	f000 f8c0 	bl	80006b4 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000534:	f000 fada 	bl	8000aec <MX_TIM15_Init>
  MX_TIM5_Init();
 8000538:	f000 f9f6 	bl	8000928 <MX_TIM5_Init>
  MX_TIM4_Init();
 800053c:	f000 f99a 	bl	8000874 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000540:	f000 fb26 	bl	8000b90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_ADC_Start_DMA(&hadc1,InputRead, 200); // DMA Read
 8000544:	22c8      	movs	r2, #200	; 0xc8
 8000546:	4928      	ldr	r1, [pc, #160]	; (80005e8 <main+0xd4>)
 8000548:	4828      	ldr	r0, [pc, #160]	; (80005ec <main+0xd8>)
 800054a:	f001 fd45 	bl	8001fd8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim15);
 800054e:	4828      	ldr	r0, [pc, #160]	; (80005f0 <main+0xdc>)
 8000550:	f004 fe60 	bl	8005214 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5); // system time clock
 8000554:	4827      	ldr	r0, [pc, #156]	; (80005f4 <main+0xe0>)
 8000556:	f004 fded 	bl	8005134 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim8); //motor A1
 800055a:	4827      	ldr	r0, [pc, #156]	; (80005f8 <main+0xe4>)
 800055c:	f004 fdea 	bl	8005134 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000560:	2104      	movs	r1, #4
 8000562:	4825      	ldr	r0, [pc, #148]	; (80005f8 <main+0xe4>)
 8000564:	f004 ff26 	bl	80053b4 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim4);  //motor A2
 8000568:	4824      	ldr	r0, [pc, #144]	; (80005fc <main+0xe8>)
 800056a:	f004 fde3 	bl	8005134 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800056e:	2100      	movs	r1, #0
 8000570:	4822      	ldr	r0, [pc, #136]	; (80005fc <main+0xe8>)
 8000572:	f004 ff1f 	bl	80053b4 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 10000); //for Check Timer
 8000576:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <main+0xe4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f242 7210 	movw	r2, #10000	; 0x2710
 800057e:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0); //for Check Timer
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <main+0xe8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2200      	movs	r2, #0
 8000586:	635a      	str	r2, [r3, #52]	; 0x34



  A0 = Kp + Ki + Kd;
 8000588:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <main+0xec>)
 800058a:	ed93 7a00 	vldr	s14, [r3]
 800058e:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <main+0xf0>)
 8000590:	edd3 7a00 	vldr	s15, [r3]
 8000594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <main+0xf4>)
 800059a:	edd3 7a00 	vldr	s15, [r3]
 800059e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005a2:	4b1a      	ldr	r3, [pc, #104]	; (800060c <main+0xf8>)
 80005a4:	edc3 7a00 	vstr	s15, [r3]
  A1 = -Kp - (2*Kd);
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <main+0xec>)
 80005aa:	edd3 7a00 	vldr	s15, [r3]
 80005ae:	eeb1 7a67 	vneg.f32	s14, s15
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <main+0xf4>)
 80005b4:	edd3 7a00 	vldr	s15, [r3]
 80005b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80005bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <main+0xfc>)
 80005c2:	edc3 7a00 	vstr	s15, [r3]
  A2 = Kd;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <main+0xf4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <main+0x100>)
 80005cc:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  test = __HAL_TIM_GET_COUNTER(&htim5);
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <main+0xe0>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <main+0x104>)
 80005d8:	801a      	strh	r2, [r3, #0]
	  updateInput();
 80005da:	f000 fbf9 	bl	8000dd0 <updateInput>
	  motorControl();
 80005de:	f000 fc63 	bl	8000ea8 <motorControl>
	  Communication();
 80005e2:	f000 fc99 	bl	8000f18 <Communication>
  {
 80005e6:	e7f2      	b.n	80005ce <main+0xba>
 80005e8:	200003d0 	.word	0x200003d0
 80005ec:	2000002c 	.word	0x2000002c
 80005f0:	20000228 	.word	0x20000228
 80005f4:	20000190 	.word	0x20000190
 80005f8:	200001dc 	.word	0x200001dc
 80005fc:	20000144 	.word	0x20000144
 8000600:	20000000 	.word	0x20000000
 8000604:	20000584 	.word	0x20000584
 8000608:	20000588 	.word	0x20000588
 800060c:	2000058c 	.word	0x2000058c
 8000610:	20000590 	.word	0x20000590
 8000614:	20000594 	.word	0x20000594
 8000618:	2000056e 	.word	0x2000056e

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	2238      	movs	r2, #56	; 0x38
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f007 fda4 	bl	8008178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800063e:	2000      	movs	r0, #0
 8000640:	f003 fcf0 	bl	8004024 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064e:	2340      	movs	r3, #64	; 0x40
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800065a:	2304      	movs	r3, #4
 800065c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800065e:	2355      	movs	r3, #85	; 0x55
 8000660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	4618      	mov	r0, r3
 8000674:	f003 fd8a 	bl	800418c <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800067e:	f000 fd17 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2303      	movs	r3, #3
 8000688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2104      	movs	r1, #4
 800069a:	4618      	mov	r0, r3
 800069c:	f004 f888 	bl	80047b0 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006a6:	f000 fd03 	bl	80010b0 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08c      	sub	sp, #48	; 0x30
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2220      	movs	r2, #32
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f007 fd53 	bl	8008178 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006d2:	4b3a      	ldr	r3, [pc, #232]	; (80007bc <MX_ADC1_Init+0x108>)
 80006d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006da:	4b38      	ldr	r3, [pc, #224]	; (80007bc <MX_ADC1_Init+0x108>)
 80006dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e2:	4b36      	ldr	r3, [pc, #216]	; (80007bc <MX_ADC1_Init+0x108>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e8:	4b34      	ldr	r3, [pc, #208]	; (80007bc <MX_ADC1_Init+0x108>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006ee:	4b33      	ldr	r3, [pc, #204]	; (80007bc <MX_ADC1_Init+0x108>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006f4:	4b31      	ldr	r3, [pc, #196]	; (80007bc <MX_ADC1_Init+0x108>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fa:	4b30      	ldr	r3, [pc, #192]	; (80007bc <MX_ADC1_Init+0x108>)
 80006fc:	2204      	movs	r2, #4
 80006fe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000700:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <MX_ADC1_Init+0x108>)
 8000702:	2200      	movs	r2, #0
 8000704:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000706:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <MX_ADC1_Init+0x108>)
 8000708:	2201      	movs	r2, #1
 800070a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800070c:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MX_ADC1_Init+0x108>)
 800070e:	2202      	movs	r2, #2
 8000710:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000712:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <MX_ADC1_Init+0x108>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <MX_ADC1_Init+0x108>)
 800071c:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000722:	4b26      	ldr	r3, [pc, #152]	; (80007bc <MX_ADC1_Init+0x108>)
 8000724:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800072a:	4b24      	ldr	r3, [pc, #144]	; (80007bc <MX_ADC1_Init+0x108>)
 800072c:	2201      	movs	r2, #1
 800072e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_ADC1_Init+0x108>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000738:	4b20      	ldr	r3, [pc, #128]	; (80007bc <MX_ADC1_Init+0x108>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000740:	481e      	ldr	r0, [pc, #120]	; (80007bc <MX_ADC1_Init+0x108>)
 8000742:	f001 fa8d 	bl	8001c60 <HAL_ADC_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800074c:	f000 fcb0 	bl	80010b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000750:	2300      	movs	r3, #0
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000758:	4619      	mov	r1, r3
 800075a:	4818      	ldr	r0, [pc, #96]	; (80007bc <MX_ADC1_Init+0x108>)
 800075c:	f002 fd5a 	bl	8003214 <HAL_ADCEx_MultiModeConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000766:	f000 fca3 	bl	80010b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_ADC1_Init+0x10c>)
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076e:	2306      	movs	r3, #6
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000772:	2307      	movs	r3, #7
 8000774:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000776:	237f      	movs	r3, #127	; 0x7f
 8000778:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800077a:	2304      	movs	r3, #4
 800077c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4619      	mov	r1, r3
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <MX_ADC1_Init+0x108>)
 8000788:	f001 ff82 	bl	8002690 <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000792:	f000 fc8d 	bl	80010b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_ADC1_Init+0x110>)
 8000798:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800079a:	230c      	movs	r3, #12
 800079c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4619      	mov	r1, r3
 80007a2:	4806      	ldr	r0, [pc, #24]	; (80007bc <MX_ADC1_Init+0x108>)
 80007a4:	f001 ff74 	bl	8002690 <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80007ae:	f000 fc7f 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	3730      	adds	r7, #48	; 0x30
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000002c 	.word	0x2000002c
 80007c0:	04300002 	.word	0x04300002
 80007c4:	08600004 	.word	0x08600004

080007c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	2224      	movs	r2, #36	; 0x24
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f007 fcce 	bl	8008178 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_TIM3_Init+0xa4>)
 80007e8:	4a21      	ldr	r2, [pc, #132]	; (8000870 <MX_TIM3_Init+0xa8>)
 80007ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_TIM3_Init+0xa4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_TIM3_Init+0xa4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_TIM3_Init+0xa4>)
 80007fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_TIM3_Init+0xa4>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_TIM3_Init+0xa4>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800080c:	2303      	movs	r3, #3
 800080e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000814:	2301      	movs	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000824:	2301      	movs	r3, #1
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4619      	mov	r1, r3
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_TIM3_Init+0xa4>)
 8000838:	f004 fece 	bl	80055d8 <HAL_TIM_Encoder_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000842:	f000 fc35 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800084e:	463b      	mov	r3, r7
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <MX_TIM3_Init+0xa4>)
 8000854:	f005 ffa8 	bl	80067a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800085e:	f000 fc27 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	3730      	adds	r7, #48	; 0x30
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000f8 	.word	0x200000f8
 8000870:	40000400 	.word	0x40000400

08000874 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000886:	463b      	mov	r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
 8000894:	615a      	str	r2, [r3, #20]
 8000896:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000898:	4b21      	ldr	r3, [pc, #132]	; (8000920 <MX_TIM4_Init+0xac>)
 800089a:	4a22      	ldr	r2, [pc, #136]	; (8000924 <MX_TIM4_Init+0xb0>)
 800089c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 800089e:	4b20      	ldr	r3, [pc, #128]	; (8000920 <MX_TIM4_Init+0xac>)
 80008a0:	22a9      	movs	r2, #169	; 0xa9
 80008a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <MX_TIM4_Init+0xac>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <MX_TIM4_Init+0xac>)
 80008ac:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80008b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_TIM4_Init+0xac>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <MX_TIM4_Init+0xac>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008be:	4818      	ldr	r0, [pc, #96]	; (8000920 <MX_TIM4_Init+0xac>)
 80008c0:	f004 fd20 	bl	8005304 <HAL_TIM_PWM_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80008ca:	f000 fbf1 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4810      	ldr	r0, [pc, #64]	; (8000920 <MX_TIM4_Init+0xac>)
 80008de:	f005 ff63 	bl	80067a8 <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80008e8:	f000 fbe2 	bl	80010b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ec:	2360      	movs	r3, #96	; 0x60
 80008ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008fc:	463b      	mov	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	4619      	mov	r1, r3
 8000902:	4807      	ldr	r0, [pc, #28]	; (8000920 <MX_TIM4_Init+0xac>)
 8000904:	f005 f85e 	bl	80059c4 <HAL_TIM_PWM_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800090e:	f000 fbcf 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000912:	4803      	ldr	r0, [pc, #12]	; (8000920 <MX_TIM4_Init+0xac>)
 8000914:	f000 fd30 	bl	8001378 <HAL_TIM_MspPostInit>

}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	; 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000144 	.word	0x20000144
 8000924:	40000800 	.word	0x40000800

08000928 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_TIM5_Init+0x94>)
 8000948:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <MX_TIM5_Init+0x98>)
 800094a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_TIM5_Init+0x94>)
 800094e:	22a9      	movs	r2, #169	; 0xa9
 8000950:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_TIM5_Init+0x94>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_TIM5_Init+0x94>)
 800095a:	f04f 32ff 	mov.w	r2, #4294967295
 800095e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_TIM5_Init+0x94>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_TIM5_Init+0x94>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800096c:	4813      	ldr	r0, [pc, #76]	; (80009bc <MX_TIM5_Init+0x94>)
 800096e:	f004 fb89 	bl	8005084 <HAL_TIM_Base_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000978:	f000 fb9a 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000980:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4619      	mov	r1, r3
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <MX_TIM5_Init+0x94>)
 800098a:	f005 f92f 	bl	8005bec <HAL_TIM_ConfigClockSource>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000994:	f000 fb8c 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_TIM5_Init+0x94>)
 80009a6:	f005 feff 	bl	80067a8 <HAL_TIMEx_MasterConfigSynchronization>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80009b0:	f000 fb7e 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000190 	.word	0x20000190
 80009c0:	40000c00 	.word	0x40000c00

080009c4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b098      	sub	sp, #96	; 0x60
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
 80009e6:	615a      	str	r2, [r3, #20]
 80009e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2234      	movs	r2, #52	; 0x34
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f007 fbc1 	bl	8008178 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009f6:	4b3b      	ldr	r3, [pc, #236]	; (8000ae4 <MX_TIM8_Init+0x120>)
 80009f8:	4a3b      	ldr	r2, [pc, #236]	; (8000ae8 <MX_TIM8_Init+0x124>)
 80009fa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 80009fc:	4b39      	ldr	r3, [pc, #228]	; (8000ae4 <MX_TIM8_Init+0x120>)
 80009fe:	22a9      	movs	r2, #169	; 0xa9
 8000a00:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <MX_TIM8_Init+0x120>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8000a08:	4b36      	ldr	r3, [pc, #216]	; (8000ae4 <MX_TIM8_Init+0x120>)
 8000a0a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000a0e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a10:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <MX_TIM8_Init+0x120>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a16:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <MX_TIM8_Init+0x120>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1c:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <MX_TIM8_Init+0x120>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a22:	4830      	ldr	r0, [pc, #192]	; (8000ae4 <MX_TIM8_Init+0x120>)
 8000a24:	f004 fc6e 	bl	8005304 <HAL_TIM_PWM_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000a2e:	f000 fb3f 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a42:	4619      	mov	r1, r3
 8000a44:	4827      	ldr	r0, [pc, #156]	; (8000ae4 <MX_TIM8_Init+0x120>)
 8000a46:	f005 feaf 	bl	80067a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000a50:	f000 fb2e 	bl	80010b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a54:	2360      	movs	r3, #96	; 0x60
 8000a56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a60:	2300      	movs	r3, #0
 8000a62:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a74:	2204      	movs	r2, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	481a      	ldr	r0, [pc, #104]	; (8000ae4 <MX_TIM8_Init+0x120>)
 8000a7a:	f004 ffa3 	bl	80059c4 <HAL_TIM_PWM_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000a84:	f000 fb14 	bl	80010b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <MX_TIM8_Init+0x120>)
 8000ac6:	f005 ff05 	bl	80068d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000ad0:	f000 faee 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <MX_TIM8_Init+0x120>)
 8000ad6:	f000 fc4f 	bl	8001378 <HAL_TIM_MspPostInit>

}
 8000ada:	bf00      	nop
 8000adc:	3760      	adds	r7, #96	; 0x60
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200001dc 	.word	0x200001dc
 8000ae8:	40013400 	.word	0x40013400

08000aec <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <MX_TIM15_Init+0x9c>)
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <MX_TIM15_Init+0xa0>)
 8000b0e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 169;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <MX_TIM15_Init+0x9c>)
 8000b12:	22a9      	movs	r2, #169	; 0xa9
 8000b14:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_TIM15_Init+0x9c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_TIM15_Init+0x9c>)
 8000b1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b22:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <MX_TIM15_Init+0x9c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_TIM15_Init+0x9c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_TIM15_Init+0x9c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000b36:	4814      	ldr	r0, [pc, #80]	; (8000b88 <MX_TIM15_Init+0x9c>)
 8000b38:	f004 faa4 	bl	8005084 <HAL_TIM_Base_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000b42:	f000 fab5 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	480d      	ldr	r0, [pc, #52]	; (8000b88 <MX_TIM15_Init+0x9c>)
 8000b54:	f005 f84a 	bl	8005bec <HAL_TIM_ConfigClockSource>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000b5e:	f000 faa7 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b62:	2320      	movs	r3, #32
 8000b64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <MX_TIM15_Init+0x9c>)
 8000b70:	f005 fe1a 	bl	80067a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000b7a:	f000 fa99 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000228 	.word	0x20000228
 8000b8c:	40014000 	.word	0x40014000

08000b90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000b96:	4a23      	ldr	r2, [pc, #140]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd2:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd8:	4811      	ldr	r0, [pc, #68]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bda:	f005 ff55 	bl	8006a88 <HAL_UART_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000be4:	f000 fa64 	bl	80010b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be8:	2100      	movs	r1, #0
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bec:	f007 f9f9 	bl	8007fe2 <HAL_UARTEx_SetTxFifoThreshold>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bf6:	f000 fa5b 	bl	80010b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4808      	ldr	r0, [pc, #32]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bfe:	f007 fa2e 	bl	800805e <HAL_UARTEx_SetRxFifoThreshold>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c08:	f000 fa52 	bl	80010b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000c0e:	f007 f9af 	bl	8007f70 <HAL_UARTEx_DisableFifoMode>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c18:	f000 fa4a 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000274 	.word	0x20000274
 8000c24:	40004400 	.word	0x40004400

08000c28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_DMA_Init+0x70>)
 8000c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c32:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <MX_DMA_Init+0x70>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6493      	str	r3, [r2, #72]	; 0x48
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_DMA_Init+0x70>)
 8000c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_DMA_Init+0x70>)
 8000c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c4a:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <MX_DMA_Init+0x70>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6493      	str	r3, [r2, #72]	; 0x48
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_DMA_Init+0x70>)
 8000c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	200b      	movs	r0, #11
 8000c64:	f002 fcb9 	bl	80035da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c68:	200b      	movs	r0, #11
 8000c6a:	f002 fcd0 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	200c      	movs	r0, #12
 8000c74:	f002 fcb1 	bl	80035da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c78:	200c      	movs	r0, #12
 8000c7a:	f002 fcc8 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	200d      	movs	r0, #13
 8000c84:	f002 fca9 	bl	80035da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c88:	200d      	movs	r0, #13
 8000c8a:	f002 fcc0 	bl	800360e <HAL_NVIC_EnableIRQ>

}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4b38      	ldr	r3, [pc, #224]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a37      	ldr	r2, [pc, #220]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cca:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a31      	ldr	r2, [pc, #196]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000cd0:	f043 0320 	orr.w	r3, r3, #32
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0320 	and.w	r3, r3, #32
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b2c      	ldr	r3, [pc, #176]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	4a25      	ldr	r2, [pc, #148]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d06:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2120      	movs	r1, #32
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1a:	f003 f947 	bl	8003fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4818      	ldr	r0, [pc, #96]	; (8000d98 <MX_GPIO_Init+0xfc>)
 8000d36:	f002 ffb7 	bl	8003ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d58:	f002 ffa6 	bl	8003ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d5c:	2320      	movs	r3, #32
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d76:	f002 ff97 	bl	8003ca8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2028      	movs	r0, #40	; 0x28
 8000d80:	f002 fc2b 	bl	80035da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d84:	2028      	movs	r0, #40	; 0x28
 8000d86:	f002 fc42 	bl	800360e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000
 8000d98:	48000800 	.word	0x48000800

08000d9c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d9c:	b4b0      	push	{r4, r5, r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d108      	bne.n	8000dbe <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db2:	1e54      	subs	r4, r2, #1
 8000db4:	f143 0500 	adc.w	r5, r3, #0
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000dba:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bcb0      	pop	{r4, r5, r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	20000190 	.word	0x20000190
 8000dcc:	200003c8 	.word	0x200003c8

08000dd0 <updateInput>:
{
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
}

void updateInput()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	sumEncode = 0;
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <updateInput+0xb8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
	sumTrimpot = 0;
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <updateInput+0xbc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i<100 ; i++ )
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	e019      	b.n	8000e1c <updateInput+0x4c>
	{
		sumEncode += InputRead[2*i];
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4a28      	ldr	r2, [pc, #160]	; (8000e90 <updateInput+0xc0>)
 8000dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <updateInput+0xb8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4413      	add	r3, r2
 8000dfa:	4a23      	ldr	r2, [pc, #140]	; (8000e88 <updateInput+0xb8>)
 8000dfc:	6013      	str	r3, [r2, #0]
		sumTrimpot += InputRead[1 + (2*i)];
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <updateInput+0xc0>)
 8000e06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <updateInput+0xbc>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <updateInput+0xbc>)
 8000e14:	6013      	str	r3, [r2, #0]
	for(int i = 0 ; i<100 ; i++ )
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b63      	cmp	r3, #99	; 0x63
 8000e20:	dde2      	ble.n	8000de8 <updateInput+0x18>
	}
	avgEncode = sumEncode/100;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <updateInput+0xb8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <updateInput+0xc4>)
 8000e28:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2c:	095b      	lsrs	r3, r3, #5
 8000e2e:	4a1a      	ldr	r2, [pc, #104]	; (8000e98 <updateInput+0xc8>)
 8000e30:	6013      	str	r3, [r2, #0]
	avgTrimpot = sumTrimpot/100;
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <updateInput+0xbc>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <updateInput+0xc4>)
 8000e38:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3c:	095b      	lsrs	r3, r3, #5
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <updateInput+0xcc>)
 8000e42:	801a      	strh	r2, [r3, #0]

	Error = avgTrimpot - avgEncode;
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <updateInput+0xcc>)
 8000e46:	881a      	ldrh	r2, [r3, #0]
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <updateInput+0xc8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	b21a      	sxth	r2, r3
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <updateInput+0xd0>)
 8000e56:	801a      	strh	r2, [r3, #0]

	if(Error < 0)
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <updateInput+0xd0>)
 8000e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	da03      	bge.n	8000e6a <updateInput+0x9a>
	{
		direction = 1;
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <updateInput+0xd4>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
 8000e68:	e007      	b.n	8000e7a <updateInput+0xaa>
	}
	else if(Error > 0)
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <updateInput+0xd0>)
 8000e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	dd02      	ble.n	8000e7a <updateInput+0xaa>
	{
		direction = 0;
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <updateInput+0xd4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
	}
	PIDcalculate();
 8000e7a:	f000 f88b 	bl	8000f94 <PIDcalculate>

//	PWM = arm_pid_f32(&PID, Error);
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000560 	.word	0x20000560
 8000e8c:	20000564 	.word	0x20000564
 8000e90:	200003d0 	.word	0x200003d0
 8000e94:	51eb851f 	.word	0x51eb851f
 8000e98:	20000568 	.word	0x20000568
 8000e9c:	2000056c 	.word	0x2000056c
 8000ea0:	20000578 	.word	0x20000578
 8000ea4:	20000580 	.word	0x20000580

08000ea8 <motorControl>:

void motorControl()
{
 8000ea8:	b598      	push	{r3, r4, r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	static uint16_t motorTime = 0;
	if(motorTime < HAL_GetTick())
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <motorControl+0x60>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	461c      	mov	r4, r3
 8000eb2:	f000 fc89 	bl	80017c8 <HAL_GetTick>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	429c      	cmp	r4, r3
 8000eba:	d222      	bcs.n	8000f02 <motorControl+0x5a>
	{
		motorTime = HAL_GetTick()+1;
 8000ebc:	f000 fc84 	bl	80017c8 <HAL_GetTick>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <motorControl+0x60>)
 8000eca:	801a      	strh	r2, [r3, #0]
		if(direction == 0) // Error +
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <motorControl+0x64>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d109      	bne.n	8000ee8 <motorControl+0x40>
		{
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <motorControl+0x68>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	639a      	str	r2, [r3, #56]	; 0x38
//			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 10000); //for Check Timer
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <motorControl+0x6c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ee4:	635a      	str	r2, [r3, #52]	; 0x34
//			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, PWM);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
		}

	}
}
 8000ee6:	e00c      	b.n	8000f02 <motorControl+0x5a>
		else if(direction == 1) // Error -
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <motorControl+0x64>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d108      	bne.n	8000f02 <motorControl+0x5a>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 10000); //for Check Timer
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <motorControl+0x68>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ef8:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <motorControl+0x6c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2200      	movs	r2, #0
 8000f00:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f02:	bf00      	nop
 8000f04:	bd98      	pop	{r3, r4, r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000059e 	.word	0x2000059e
 8000f0c:	20000580 	.word	0x20000580
 8000f10:	200001dc 	.word	0x200001dc
 8000f14:	20000144 	.word	0x20000144

08000f18 <Communication>:

void Communication()
{
 8000f18:	b598      	push	{r3, r4, r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	static uint16_t CommTime = 0;
		if(CommTime < HAL_GetTick())
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <Communication+0x64>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	461c      	mov	r4, r3
 8000f22:	f000 fc51 	bl	80017c8 <HAL_GetTick>
 8000f26:	4603      	mov	r3, r0
 8000f28:	429c      	cmp	r4, r3
 8000f2a:	d225      	bcs.n	8000f78 <Communication+0x60>
		{
			CommTime = HAL_GetTick()+5;
 8000f2c:	f000 fc4c 	bl	80017c8 <HAL_GetTick>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	3305      	adds	r3, #5
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <Communication+0x64>)
 8000f3a:	801a      	strh	r2, [r3, #0]
			HigherPos = (uint8_t)(avgEncode >> 8);
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <Communication+0x68>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <Communication+0x6c>)
 8000f46:	701a      	strb	r2, [r3, #0]
			LowerPos = (uint8_t)avgEncode;
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <Communication+0x68>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <Communication+0x70>)
 8000f50:	701a      	strb	r2, [r3, #0]

			TxBuffer[0] = 69;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <Communication+0x74>)
 8000f54:	2245      	movs	r2, #69	; 0x45
 8000f56:	701a      	strb	r2, [r3, #0]
			TxBuffer[1] = HigherPos;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <Communication+0x6c>)
 8000f5a:	781a      	ldrb	r2, [r3, #0]
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <Communication+0x74>)
 8000f5e:	705a      	strb	r2, [r3, #1]
			TxBuffer[2] = LowerPos;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <Communication+0x70>)
 8000f62:	781a      	ldrb	r2, [r3, #0]
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <Communication+0x74>)
 8000f66:	709a      	strb	r2, [r3, #2]
			TxBuffer[3] = 10;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <Communication+0x74>)
 8000f6a:	220a      	movs	r2, #10
 8000f6c:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, 4);
 8000f6e:	2204      	movs	r2, #4
 8000f70:	4906      	ldr	r1, [pc, #24]	; (8000f8c <Communication+0x74>)
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <Communication+0x78>)
 8000f74:	f005 fdd8 	bl	8006b28 <HAL_UART_Transmit_DMA>
		}
}
 8000f78:	bf00      	nop
 8000f7a:	bd98      	pop	{r3, r4, r7, pc}
 8000f7c:	200005a0 	.word	0x200005a0
 8000f80:	20000568 	.word	0x20000568
 8000f84:	2000059c 	.word	0x2000059c
 8000f88:	2000059d 	.word	0x2000059d
 8000f8c:	20000598 	.word	0x20000598
 8000f90:	20000274 	.word	0x20000274

08000f94 <PIDcalculate>:

void PIDcalculate()
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
	cmd = cmd_1 + A0*Error + A1*Error_1 + A2 * Error_2;
 8000f98:	4b37      	ldr	r3, [pc, #220]	; (8001078 <PIDcalculate+0xe4>)
 8000f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9e:	ee07 3a90 	vmov	s15, r3
 8000fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa6:	4b35      	ldr	r3, [pc, #212]	; (800107c <PIDcalculate+0xe8>)
 8000fa8:	edd3 7a00 	vldr	s15, [r3]
 8000fac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb0:	4b33      	ldr	r3, [pc, #204]	; (8001080 <PIDcalculate+0xec>)
 8000fb2:	edd3 7a00 	vldr	s15, [r3]
 8000fb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fba:	4b32      	ldr	r3, [pc, #200]	; (8001084 <PIDcalculate+0xf0>)
 8000fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc0:	ee07 3a90 	vmov	s15, r3
 8000fc4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fc8:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <PIDcalculate+0xf4>)
 8000fca:	edd3 7a00 	vldr	s15, [r3]
 8000fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <PIDcalculate+0xf8>)
 8000fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fdc:	ee07 3a90 	vmov	s15, r3
 8000fe0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <PIDcalculate+0xfc>)
 8000fe6:	edd3 7a00 	vldr	s15, [r3]
 8000fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff2:	4b28      	ldr	r3, [pc, #160]	; (8001094 <PIDcalculate+0x100>)
 8000ff4:	edc3 7a00 	vstr	s15, [r3]
	if (cmd > 20000) //Anti windup
 8000ff8:	4b26      	ldr	r3, [pc, #152]	; (8001094 <PIDcalculate+0x100>)
 8000ffa:	edd3 7a00 	vldr	s15, [r3]
 8000ffe:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001098 <PIDcalculate+0x104>
 8001002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	dd06      	ble.n	800101a <PIDcalculate+0x86>
	{
		cmd = 20000;
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <PIDcalculate+0x100>)
 800100e:	4a23      	ldr	r2, [pc, #140]	; (800109c <PIDcalculate+0x108>)
 8001010:	601a      	str	r2, [r3, #0]
		direction = 0;
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <PIDcalculate+0x10c>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
 8001018:	e00f      	b.n	800103a <PIDcalculate+0xa6>
	}
	else if (cmd < -20000)
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <PIDcalculate+0x100>)
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80010a4 <PIDcalculate+0x110>
 8001024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	d505      	bpl.n	800103a <PIDcalculate+0xa6>
	{
		cmd = -20000;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <PIDcalculate+0x100>)
 8001030:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <PIDcalculate+0x114>)
 8001032:	601a      	str	r2, [r3, #0]
		direction = 1;
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <PIDcalculate+0x10c>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
	}
	cmd_1 = cmd;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <PIDcalculate+0x100>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <PIDcalculate+0xec>)
 8001040:	6013      	str	r3, [r2, #0]
	Error_2 = Error_1;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <PIDcalculate+0xf0>)
 8001044:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001048:	4b10      	ldr	r3, [pc, #64]	; (800108c <PIDcalculate+0xf8>)
 800104a:	801a      	strh	r2, [r3, #0]
	Error_1 = Error;
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <PIDcalculate+0xe4>)
 800104e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <PIDcalculate+0xf0>)
 8001054:	801a      	strh	r2, [r3, #0]

	PWM = fabs(cmd);
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <PIDcalculate+0x100>)
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	eef0 7ae7 	vabs.f32	s15, s15
 8001060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001064:	ee17 3a90 	vmov	r3, s15
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <PIDcalculate+0x118>)
 800106c:	801a      	strh	r2, [r3, #0]
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	20000578 	.word	0x20000578
 800107c:	2000058c 	.word	0x2000058c
 8001080:	20000574 	.word	0x20000574
 8001084:	2000057a 	.word	0x2000057a
 8001088:	20000590 	.word	0x20000590
 800108c:	2000057c 	.word	0x2000057c
 8001090:	20000594 	.word	0x20000594
 8001094:	20000570 	.word	0x20000570
 8001098:	469c4000 	.word	0x469c4000
 800109c:	469c4000 	.word	0x469c4000
 80010a0:	20000580 	.word	0x20000580
 80010a4:	c69c4000 	.word	0xc69c4000
 80010a8:	c69c4000 	.word	0xc69c4000
 80010ac:	2000057e 	.word	0x2000057e

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <Error_Handler+0x8>
	...

080010bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_MspInit+0x44>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_MspInit+0x44>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6613      	str	r3, [r2, #96]	; 0x60
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_MspInit+0x44>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_MspInit+0x44>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_MspInit+0x44>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	6593      	str	r3, [r2, #88]	; 0x58
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_MspInit+0x44>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010f2:	f003 f83b 	bl	800416c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b09e      	sub	sp, #120	; 0x78
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2254      	movs	r2, #84	; 0x54
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f007 f827 	bl	8008178 <memset>
  if(hadc->Instance==ADC1)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001132:	d167      	bne.n	8001204 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001134:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001138:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800113a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800113e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4618      	mov	r0, r3
 8001146:	f003 fd4f 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001150:	f7ff ffae 	bl	80010b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <HAL_ADC_MspInit+0x108>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	4a2c      	ldr	r2, [pc, #176]	; (800120c <HAL_ADC_MspInit+0x108>)
 800115a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800115e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001160:	4b2a      	ldr	r3, [pc, #168]	; (800120c <HAL_ADC_MspInit+0x108>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <HAL_ADC_MspInit+0x108>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	4a26      	ldr	r2, [pc, #152]	; (800120c <HAL_ADC_MspInit+0x108>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <HAL_ADC_MspInit+0x108>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001184:	2303      	movs	r3, #3
 8001186:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001188:	2303      	movs	r3, #3
 800118a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001194:	4619      	mov	r1, r3
 8001196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119a:	f002 fd85 	bl	8003ca8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <HAL_ADC_MspInit+0x10c>)
 80011a0:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <HAL_ADC_MspInit+0x110>)
 80011a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <HAL_ADC_MspInit+0x10c>)
 80011a6:	2205      	movs	r2, #5
 80011a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_ADC_MspInit+0x10c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_ADC_MspInit+0x10c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_ADC_MspInit+0x10c>)
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_ADC_MspInit+0x10c>)
 80011be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_ADC_MspInit+0x10c>)
 80011c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ca:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_ADC_MspInit+0x10c>)
 80011ce:	2220      	movs	r2, #32
 80011d0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <HAL_ADC_MspInit+0x10c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <HAL_ADC_MspInit+0x10c>)
 80011da:	f002 fa33 	bl	8003644 <HAL_DMA_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80011e4:	f7ff ff64 	bl	80010b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <HAL_ADC_MspInit+0x10c>)
 80011ec:	655a      	str	r2, [r3, #84]	; 0x54
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <HAL_ADC_MspInit+0x10c>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	2012      	movs	r0, #18
 80011fa:	f002 f9ee 	bl	80035da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011fe:	2012      	movs	r0, #18
 8001200:	f002 fa05 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001204:	bf00      	nop
 8001206:	3778      	adds	r7, #120	; 0x78
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40021000 	.word	0x40021000
 8001210:	20000098 	.word	0x20000098
 8001214:	40020008 	.word	0x40020008

08001218 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a17      	ldr	r2, [pc, #92]	; (8001294 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d128      	bne.n	800128c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <HAL_TIM_Encoder_MspInit+0x80>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	4a16      	ldr	r2, [pc, #88]	; (8001298 <HAL_TIM_Encoder_MspInit+0x80>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	6593      	str	r3, [r2, #88]	; 0x58
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <HAL_TIM_Encoder_MspInit+0x80>)
 8001248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_TIM_Encoder_MspInit+0x80>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <HAL_TIM_Encoder_MspInit+0x80>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_TIM_Encoder_MspInit+0x80>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800126a:	23c0      	movs	r3, #192	; 0xc0
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800127a:	2302      	movs	r3, #2
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001288:	f002 fd0e 	bl	8003ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	; 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40000400 	.word	0x40000400
 8001298:	40021000 	.word	0x40021000

0800129c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10c      	bne.n	80012c8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HAL_TIM_PWM_MspInit+0x60>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <HAL_TIM_PWM_MspInit+0x60>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_TIM_PWM_MspInit+0x60>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80012c6:	e010      	b.n	80012ea <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <HAL_TIM_PWM_MspInit+0x64>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d10b      	bne.n	80012ea <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_TIM_PWM_MspInit+0x60>)
 80012d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <HAL_TIM_PWM_MspInit+0x60>)
 80012d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012dc:	6613      	str	r3, [r2, #96]	; 0x60
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <HAL_TIM_PWM_MspInit+0x60>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40000800 	.word	0x40000800
 80012fc:	40021000 	.word	0x40021000
 8001300:	40013400 	.word	0x40013400

08001304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a16      	ldr	r2, [pc, #88]	; (800136c <HAL_TIM_Base_MspInit+0x68>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d10c      	bne.n	8001330 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <HAL_TIM_Base_MspInit+0x6c>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	4a15      	ldr	r2, [pc, #84]	; (8001370 <HAL_TIM_Base_MspInit+0x6c>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6593      	str	r3, [r2, #88]	; 0x58
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <HAL_TIM_Base_MspInit+0x6c>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800132e:	e018      	b.n	8001362 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM15)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <HAL_TIM_Base_MspInit+0x70>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d113      	bne.n	8001362 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <HAL_TIM_Base_MspInit+0x6c>)
 800133c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133e:	4a0c      	ldr	r2, [pc, #48]	; (8001370 <HAL_TIM_Base_MspInit+0x6c>)
 8001340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001344:	6613      	str	r3, [r2, #96]	; 0x60
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_TIM_Base_MspInit+0x6c>)
 8001348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2018      	movs	r0, #24
 8001358:	f002 f93f 	bl	80035da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800135c:	2018      	movs	r0, #24
 800135e:	f002 f956 	bl	800360e <HAL_NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40000c00 	.word	0x40000c00
 8001370:	40021000 	.word	0x40021000
 8001374:	40014000 	.word	0x40014000

08001378 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a22      	ldr	r2, [pc, #136]	; (8001420 <HAL_TIM_MspPostInit+0xa8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d11c      	bne.n	80013d4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	4b22      	ldr	r3, [pc, #136]	; (8001424 <HAL_TIM_MspPostInit+0xac>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	4a21      	ldr	r2, [pc, #132]	; (8001424 <HAL_TIM_MspPostInit+0xac>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <HAL_TIM_MspPostInit+0xac>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013b2:	2340      	movs	r3, #64	; 0x40
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013c2:	2302      	movs	r3, #2
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	4816      	ldr	r0, [pc, #88]	; (8001428 <HAL_TIM_MspPostInit+0xb0>)
 80013ce:	f002 fc6b 	bl	8003ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80013d2:	e020      	b.n	8001416 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a14      	ldr	r2, [pc, #80]	; (800142c <HAL_TIM_MspPostInit+0xb4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d11b      	bne.n	8001416 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_TIM_MspPostInit+0xac>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <HAL_TIM_MspPostInit+0xac>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_TIM_MspPostInit+0xac>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001406:	2304      	movs	r3, #4
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4807      	ldr	r0, [pc, #28]	; (8001430 <HAL_TIM_MspPostInit+0xb8>)
 8001412:	f002 fc49 	bl	8003ca8 <HAL_GPIO_Init>
}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	; 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40000800 	.word	0x40000800
 8001424:	40021000 	.word	0x40021000
 8001428:	48000400 	.word	0x48000400
 800142c:	40013400 	.word	0x40013400
 8001430:	48000800 	.word	0x48000800

08001434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b09e      	sub	sp, #120	; 0x78
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	2254      	movs	r2, #84	; 0x54
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f006 fe8f 	bl	8008178 <memset>
  if(huart->Instance==USART2)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a4d      	ldr	r2, [pc, #308]	; (8001594 <HAL_UART_MspInit+0x160>)
 8001460:	4293      	cmp	r3, r2
 8001462:	f040 8093 	bne.w	800158c <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001466:	2302      	movs	r3, #2
 8001468:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	4618      	mov	r0, r3
 8001474:	f003 fbb8 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800147e:	f7ff fe17 	bl	80010b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001482:	4b45      	ldr	r3, [pc, #276]	; (8001598 <HAL_UART_MspInit+0x164>)
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	4a44      	ldr	r2, [pc, #272]	; (8001598 <HAL_UART_MspInit+0x164>)
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	6593      	str	r3, [r2, #88]	; 0x58
 800148e:	4b42      	ldr	r3, [pc, #264]	; (8001598 <HAL_UART_MspInit+0x164>)
 8001490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <HAL_UART_MspInit+0x164>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a3e      	ldr	r2, [pc, #248]	; (8001598 <HAL_UART_MspInit+0x164>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <HAL_UART_MspInit+0x164>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80014b2:	f248 0304 	movw	r3, #32772	; 0x8004
 80014b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c4:	2307      	movs	r3, #7
 80014c6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014cc:	4619      	mov	r1, r3
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f002 fbe9 	bl	8003ca8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <HAL_UART_MspInit+0x168>)
 80014d8:	4a31      	ldr	r2, [pc, #196]	; (80015a0 <HAL_UART_MspInit+0x16c>)
 80014da:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80014dc:	4b2f      	ldr	r3, [pc, #188]	; (800159c <HAL_UART_MspInit+0x168>)
 80014de:	221a      	movs	r2, #26
 80014e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e2:	4b2e      	ldr	r3, [pc, #184]	; (800159c <HAL_UART_MspInit+0x168>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e8:	4b2c      	ldr	r3, [pc, #176]	; (800159c <HAL_UART_MspInit+0x168>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_UART_MspInit+0x168>)
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014f4:	4b29      	ldr	r3, [pc, #164]	; (800159c <HAL_UART_MspInit+0x168>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014fa:	4b28      	ldr	r3, [pc, #160]	; (800159c <HAL_UART_MspInit+0x168>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <HAL_UART_MspInit+0x168>)
 8001502:	2220      	movs	r2, #32
 8001504:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <HAL_UART_MspInit+0x168>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800150c:	4823      	ldr	r0, [pc, #140]	; (800159c <HAL_UART_MspInit+0x168>)
 800150e:	f002 f899 	bl	8003644 <HAL_DMA_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001518:	f7ff fdca 	bl	80010b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a1f      	ldr	r2, [pc, #124]	; (800159c <HAL_UART_MspInit+0x168>)
 8001520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001524:	4a1d      	ldr	r2, [pc, #116]	; (800159c <HAL_UART_MspInit+0x168>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <HAL_UART_MspInit+0x170>)
 800152c:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <HAL_UART_MspInit+0x174>)
 800152e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_UART_MspInit+0x170>)
 8001532:	221b      	movs	r2, #27
 8001534:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_UART_MspInit+0x170>)
 8001538:	2210      	movs	r2, #16
 800153a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_UART_MspInit+0x170>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_UART_MspInit+0x170>)
 8001544:	2280      	movs	r2, #128	; 0x80
 8001546:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_UART_MspInit+0x170>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_UART_MspInit+0x170>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <HAL_UART_MspInit+0x170>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_UART_MspInit+0x170>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001560:	4810      	ldr	r0, [pc, #64]	; (80015a4 <HAL_UART_MspInit+0x170>)
 8001562:	f002 f86f 	bl	8003644 <HAL_DMA_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 800156c:	f7ff fda0 	bl	80010b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <HAL_UART_MspInit+0x170>)
 8001574:	67da      	str	r2, [r3, #124]	; 0x7c
 8001576:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <HAL_UART_MspInit+0x170>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	2026      	movs	r0, #38	; 0x26
 8001582:	f002 f82a 	bl	80035da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001586:	2026      	movs	r0, #38	; 0x26
 8001588:	f002 f841 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800158c:	bf00      	nop
 800158e:	3778      	adds	r7, #120	; 0x78
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40004400 	.word	0x40004400
 8001598:	40021000 	.word	0x40021000
 800159c:	20000308 	.word	0x20000308
 80015a0:	4002001c 	.word	0x4002001c
 80015a4:	20000368 	.word	0x20000368
 80015a8:	40020030 	.word	0x40020030

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b0:	e7fe      	b.n	80015b0 <NMI_Handler+0x4>

080015b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <MemManage_Handler+0x4>

080015be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <UsageFault_Handler+0x4>

080015ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f8:	f000 f8d4 	bl	80017a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <DMA1_Channel1_IRQHandler+0x10>)
 8001606:	f002 fa00 	bl	8003a0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000098 	.word	0x20000098

08001614 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <DMA1_Channel2_IRQHandler+0x10>)
 800161a:	f002 f9f6 	bl	8003a0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000308 	.word	0x20000308

08001628 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <DMA1_Channel3_IRQHandler+0x10>)
 800162e:	f002 f9ec 	bl	8003a0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000368 	.word	0x20000368

0800163c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <ADC1_2_IRQHandler+0x10>)
 8001642:	f000 fd9d 	bl	8002180 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000002c 	.word	0x2000002c

08001650 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001656:	f004 f865 	bl	8005724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000228 	.word	0x20000228

08001664 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <USART2_IRQHandler+0x10>)
 800166a:	f005 fadd 	bl	8006c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000274 	.word	0x20000274

08001678 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800167c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001680:	f002 fcac 	bl	8003fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <SystemInit+0x20>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <SystemInit+0x20>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016b0:	f7ff ffea 	bl	8001688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016b6:	490d      	ldr	r1, [pc, #52]	; (80016ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <LoopForever+0xe>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016cc:	4c0a      	ldr	r4, [pc, #40]	; (80016f8 <LoopForever+0x16>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016da:	f006 fd55 	bl	8008188 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016de:	f7fe ff19 	bl	8000514 <main>

080016e2 <LoopForever>:

LoopForever:
    b LoopForever
 80016e2:	e7fe      	b.n	80016e2 <LoopForever>
  ldr   r0, =_estack
 80016e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80016f0:	08008238 	.word	0x08008238
  ldr r2, =_sbss
 80016f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80016f8:	200005a8 	.word	0x200005a8

080016fc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC3_IRQHandler>

080016fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f001 ff5b 	bl	80035c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800170e:	2000      	movs	r0, #0
 8001710:	f000 f80e 	bl	8001730 <HAL_InitTick>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	e001      	b.n	8001724 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001720:	f7ff fccc 	bl	80010bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001724:	79fb      	ldrb	r3, [r7, #7]

}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_InitTick+0x68>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d022      	beq.n	800178a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_InitTick+0x6c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <HAL_InitTick+0x68>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001750:	fbb1 f3f3 	udiv	r3, r1, r3
 8001754:	fbb2 f3f3 	udiv	r3, r2, r3
 8001758:	4618      	mov	r0, r3
 800175a:	f001 ff66 	bl	800362a <HAL_SYSTICK_Config>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10f      	bne.n	8001784 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b0f      	cmp	r3, #15
 8001768:	d809      	bhi.n	800177e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800176a:	2200      	movs	r2, #0
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	f04f 30ff 	mov.w	r0, #4294967295
 8001772:	f001 ff32 	bl	80035da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <HAL_InitTick+0x70>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	e007      	b.n	800178e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	e004      	b.n	800178e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	e001      	b.n	800178e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2000000c 	.word	0x2000000c
 800179c:	20000004 	.word	0x20000004
 80017a0:	20000008 	.word	0x20000008

080017a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_IncTick+0x1c>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_IncTick+0x20>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a03      	ldr	r2, [pc, #12]	; (80017c0 <HAL_IncTick+0x1c>)
 80017b4:	6013      	str	r3, [r2, #0]
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	200005a4 	.word	0x200005a4
 80017c4:	2000000c 	.word	0x2000000c

080017c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return uwTick;
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <HAL_GetTick+0x14>)
 80017ce:	681b      	ldr	r3, [r3, #0]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	200005a4 	.word	0x200005a4

080017e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	609a      	str	r2, [r3, #8]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	609a      	str	r2, [r3, #8]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3360      	adds	r3, #96	; 0x60
 800185a:	461a      	mov	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <LL_ADC_SetOffset+0x44>)
 800186a:	4013      	ands	r3, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	4313      	orrs	r3, r2
 8001878:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001880:	bf00      	nop
 8001882:	371c      	adds	r7, #28
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	03fff000 	.word	0x03fff000

08001890 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3360      	adds	r3, #96	; 0x60
 800189e:	461a      	mov	r2, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	3360      	adds	r3, #96	; 0x60
 80018cc:	461a      	mov	r2, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	431a      	orrs	r2, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b087      	sub	sp, #28
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3360      	adds	r3, #96	; 0x60
 8001902:	461a      	mov	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	431a      	orrs	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800191c:	bf00      	nop
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	3360      	adds	r3, #96	; 0x60
 8001938:	461a      	mov	r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	431a      	orrs	r2, r3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001952:	bf00      	nop
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	615a      	str	r2, [r3, #20]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b087      	sub	sp, #28
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3330      	adds	r3, #48	; 0x30
 80019ba:	461a      	mov	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	4413      	add	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	211f      	movs	r1, #31
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	401a      	ands	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	0e9b      	lsrs	r3, r3, #26
 80019e2:	f003 011f 	and.w	r1, r3, #31
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	431a      	orrs	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019f6:	bf00      	nop
 80019f8:	371c      	adds	r7, #28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3314      	adds	r3, #20
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	0e5b      	lsrs	r3, r3, #25
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	4413      	add	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	0d1b      	lsrs	r3, r3, #20
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	2107      	movs	r1, #7
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	401a      	ands	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	0d1b      	lsrs	r3, r3, #20
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0318 	and.w	r3, r3, #24
 8001aa2:	4908      	ldr	r1, [pc, #32]	; (8001ac4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001aa4:	40d9      	lsrs	r1, r3
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	400b      	ands	r3, r1
 8001aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	0007ffff 	.word	0x0007ffff

08001ac8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 031f 	and.w	r3, r3, #31
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6093      	str	r3, [r2, #8]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b38:	d101      	bne.n	8001b3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b88:	d101      	bne.n	8001b8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <LL_ADC_IsEnabled+0x18>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <LL_ADC_IsEnabled+0x1a>
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bfa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bfe:	f043 0204 	orr.w	r2, r3, #4
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d101      	bne.n	8001c2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d101      	bne.n	8001c50 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e1a9      	b.n	8001fce <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d109      	bne.n	8001c9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff fa3b 	bl	8001104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff3f 	bl	8001b24 <LL_ADC_IsDeepPowerDownEnabled>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d004      	beq.n	8001cb6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff25 	bl	8001b00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ff5a 	bl	8001b74 <LL_ADC_IsInternalRegulatorEnabled>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d115      	bne.n	8001cf2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff3e 	bl	8001b4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cd0:	4b9c      	ldr	r3, [pc, #624]	; (8001f44 <HAL_ADC_Init+0x2e4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	099b      	lsrs	r3, r3, #6
 8001cd6:	4a9c      	ldr	r2, [pc, #624]	; (8001f48 <HAL_ADC_Init+0x2e8>)
 8001cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cdc:	099b      	lsrs	r3, r3, #6
 8001cde:	3301      	adds	r3, #1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ce4:	e002      	b.n	8001cec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f9      	bne.n	8001ce6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff3c 	bl	8001b74 <LL_ADC_IsInternalRegulatorEnabled>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10d      	bne.n	8001d1e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d06:	f043 0210 	orr.w	r2, r3, #16
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ff75 	bl	8001c12 <LL_ADC_REG_IsConversionOngoing>
 8001d28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 8142 	bne.w	8001fbc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 813e 	bne.w	8001fbc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d48:	f043 0202 	orr.w	r2, r3, #2
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff35 	bl	8001bc4 <LL_ADC_IsEnabled>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d141      	bne.n	8001de4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d68:	d004      	beq.n	8001d74 <HAL_ADC_Init+0x114>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a77      	ldr	r2, [pc, #476]	; (8001f4c <HAL_ADC_Init+0x2ec>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d10f      	bne.n	8001d94 <HAL_ADC_Init+0x134>
 8001d74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d78:	f7ff ff24 	bl	8001bc4 <LL_ADC_IsEnabled>
 8001d7c:	4604      	mov	r4, r0
 8001d7e:	4873      	ldr	r0, [pc, #460]	; (8001f4c <HAL_ADC_Init+0x2ec>)
 8001d80:	f7ff ff20 	bl	8001bc4 <LL_ADC_IsEnabled>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4323      	orrs	r3, r4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2301      	moveq	r3, #1
 8001d8e:	2300      	movne	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	e012      	b.n	8001dba <HAL_ADC_Init+0x15a>
 8001d94:	486e      	ldr	r0, [pc, #440]	; (8001f50 <HAL_ADC_Init+0x2f0>)
 8001d96:	f7ff ff15 	bl	8001bc4 <LL_ADC_IsEnabled>
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	486d      	ldr	r0, [pc, #436]	; (8001f54 <HAL_ADC_Init+0x2f4>)
 8001d9e:	f7ff ff11 	bl	8001bc4 <LL_ADC_IsEnabled>
 8001da2:	4603      	mov	r3, r0
 8001da4:	431c      	orrs	r4, r3
 8001da6:	486c      	ldr	r0, [pc, #432]	; (8001f58 <HAL_ADC_Init+0x2f8>)
 8001da8:	f7ff ff0c 	bl	8001bc4 <LL_ADC_IsEnabled>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4323      	orrs	r3, r4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d012      	beq.n	8001de4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dc6:	d004      	beq.n	8001dd2 <HAL_ADC_Init+0x172>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a5f      	ldr	r2, [pc, #380]	; (8001f4c <HAL_ADC_Init+0x2ec>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Init+0x176>
 8001dd2:	4a62      	ldr	r2, [pc, #392]	; (8001f5c <HAL_ADC_Init+0x2fc>)
 8001dd4:	e000      	b.n	8001dd8 <HAL_ADC_Init+0x178>
 8001dd6:	4a62      	ldr	r2, [pc, #392]	; (8001f60 <HAL_ADC_Init+0x300>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4610      	mov	r0, r2
 8001de0:	f7ff fcfe 	bl	80017e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7f5b      	ldrb	r3, [r3, #29]
 8001de8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001df4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001dfa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e02:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d106      	bne.n	8001e20 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	3b01      	subs	r3, #1
 8001e18:	045b      	lsls	r3, r3, #17
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d009      	beq.n	8001e3c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <HAL_ADC_Init+0x304>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	69b9      	ldr	r1, [r7, #24]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fee4 	bl	8001c38 <LL_ADC_INJ_IsConversionOngoing>
 8001e70:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d17f      	bne.n	8001f78 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d17c      	bne.n	8001f78 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e82:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e8a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e9a:	f023 0302 	bic.w	r3, r3, #2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	69b9      	ldr	r1, [r7, #24]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d017      	beq.n	8001ee0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ebe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ec8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ecc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6911      	ldr	r1, [r2, #16]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001ede:	e013      	b.n	8001f08 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f04:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d12a      	bne.n	8001f68 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f28:	4311      	orrs	r1, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f2e:	4311      	orrs	r1, r2
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f34:	430a      	orrs	r2, r1
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0201 	orr.w	r2, r2, #1
 8001f40:	611a      	str	r2, [r3, #16]
 8001f42:	e019      	b.n	8001f78 <HAL_ADC_Init+0x318>
 8001f44:	20000004 	.word	0x20000004
 8001f48:	053e2d63 	.word	0x053e2d63
 8001f4c:	50000100 	.word	0x50000100
 8001f50:	50000400 	.word	0x50000400
 8001f54:	50000500 	.word	0x50000500
 8001f58:	50000600 	.word	0x50000600
 8001f5c:	50000300 	.word	0x50000300
 8001f60:	50000700 	.word	0x50000700
 8001f64:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d10c      	bne.n	8001f9a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f023 010f 	bic.w	r1, r3, #15
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	1e5a      	subs	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
 8001f98:	e007      	b.n	8001faa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 020f 	bic.w	r2, r2, #15
 8001fa8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fae:	f023 0303 	bic.w	r3, r3, #3
 8001fb2:	f043 0201 	orr.w	r2, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fba:	e007      	b.n	8001fcc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	f043 0210 	orr.w	r2, r3, #16
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd90      	pop	{r4, r7, pc}
 8001fd6:	bf00      	nop

08001fd8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fec:	d004      	beq.n	8001ff8 <HAL_ADC_Start_DMA+0x20>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a5a      	ldr	r2, [pc, #360]	; (800215c <HAL_ADC_Start_DMA+0x184>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_ADC_Start_DMA+0x24>
 8001ff8:	4b59      	ldr	r3, [pc, #356]	; (8002160 <HAL_ADC_Start_DMA+0x188>)
 8001ffa:	e000      	b.n	8001ffe <HAL_ADC_Start_DMA+0x26>
 8001ffc:	4b59      	ldr	r3, [pc, #356]	; (8002164 <HAL_ADC_Start_DMA+0x18c>)
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fd62 	bl	8001ac8 <LL_ADC_GetMultimode>
 8002004:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fe01 	bl	8001c12 <LL_ADC_REG_IsConversionOngoing>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	f040 809b 	bne.w	800214e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_ADC_Start_DMA+0x4e>
 8002022:	2302      	movs	r3, #2
 8002024:	e096      	b.n	8002154 <HAL_ADC_Start_DMA+0x17c>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a4d      	ldr	r2, [pc, #308]	; (8002168 <HAL_ADC_Start_DMA+0x190>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d008      	beq.n	800204a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b05      	cmp	r3, #5
 8002042:	d002      	beq.n	800204a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2b09      	cmp	r3, #9
 8002048:	d17a      	bne.n	8002140 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 ff60 	bl	8002f10 <ADC_Enable>
 8002050:	4603      	mov	r3, r0
 8002052:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d16d      	bne.n	8002136 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a3a      	ldr	r2, [pc, #232]	; (800215c <HAL_ADC_Start_DMA+0x184>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d009      	beq.n	800208c <HAL_ADC_Start_DMA+0xb4>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a3b      	ldr	r2, [pc, #236]	; (800216c <HAL_ADC_Start_DMA+0x194>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d002      	beq.n	8002088 <HAL_ADC_Start_DMA+0xb0>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	e003      	b.n	8002090 <HAL_ADC_Start_DMA+0xb8>
 8002088:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_ADC_Start_DMA+0x198>)
 800208a:	e001      	b.n	8002090 <HAL_ADC_Start_DMA+0xb8>
 800208c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	4293      	cmp	r3, r2
 8002096:	d002      	beq.n	800209e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d105      	bne.n	80020aa <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ba:	f023 0206 	bic.w	r2, r3, #6
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	661a      	str	r2, [r3, #96]	; 0x60
 80020c2:	e002      	b.n	80020ca <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	4a29      	ldr	r2, [pc, #164]	; (8002174 <HAL_ADC_Start_DMA+0x19c>)
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d6:	4a28      	ldr	r2, [pc, #160]	; (8002178 <HAL_ADC_Start_DMA+0x1a0>)
 80020d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	4a27      	ldr	r2, [pc, #156]	; (800217c <HAL_ADC_Start_DMA+0x1a4>)
 80020e0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	221c      	movs	r2, #28
 80020e8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0210 	orr.w	r2, r2, #16
 8002100:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0201 	orr.w	r2, r2, #1
 8002110:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3340      	adds	r3, #64	; 0x40
 800211c:	4619      	mov	r1, r3
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f001 fb37 	bl	8003794 <HAL_DMA_Start_IT>
 8002126:	4603      	mov	r3, r0
 8002128:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fd5b 	bl	8001bea <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002134:	e00d      	b.n	8002152 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800213e:	e008      	b.n	8002152 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800214c:	e001      	b.n	8002152 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800214e:	2302      	movs	r3, #2
 8002150:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002152:	7dfb      	ldrb	r3, [r7, #23]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	50000100 	.word	0x50000100
 8002160:	50000300 	.word	0x50000300
 8002164:	50000700 	.word	0x50000700
 8002168:	50000600 	.word	0x50000600
 800216c:	50000500 	.word	0x50000500
 8002170:	50000400 	.word	0x50000400
 8002174:	0800303d 	.word	0x0800303d
 8002178:	08003115 	.word	0x08003115
 800217c:	08003131 	.word	0x08003131

08002180 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002188:	2300      	movs	r3, #0
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021a4:	d004      	beq.n	80021b0 <HAL_ADC_IRQHandler+0x30>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a8e      	ldr	r2, [pc, #568]	; (80023e4 <HAL_ADC_IRQHandler+0x264>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_IRQHandler+0x34>
 80021b0:	4b8d      	ldr	r3, [pc, #564]	; (80023e8 <HAL_ADC_IRQHandler+0x268>)
 80021b2:	e000      	b.n	80021b6 <HAL_ADC_IRQHandler+0x36>
 80021b4:	4b8d      	ldr	r3, [pc, #564]	; (80023ec <HAL_ADC_IRQHandler+0x26c>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fc86 	bl	8001ac8 <LL_ADC_GetMultimode>
 80021bc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d017      	beq.n	80021f8 <HAL_ADC_IRQHandler+0x78>
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d012      	beq.n	80021f8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f001 f808 	bl	8003200 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2202      	movs	r2, #2
 80021f6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d004      	beq.n	800220c <HAL_ADC_IRQHandler+0x8c>
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10b      	bne.n	8002224 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8094 	beq.w	8002340 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 808e 	beq.w	8002340 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b00      	cmp	r3, #0
 800222e:	d105      	bne.n	800223c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002234:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fb9f 	bl	8001984 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d072      	beq.n	8002332 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a64      	ldr	r2, [pc, #400]	; (80023e4 <HAL_ADC_IRQHandler+0x264>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d009      	beq.n	800226a <HAL_ADC_IRQHandler+0xea>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a65      	ldr	r2, [pc, #404]	; (80023f0 <HAL_ADC_IRQHandler+0x270>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d002      	beq.n	8002266 <HAL_ADC_IRQHandler+0xe6>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	e003      	b.n	800226e <HAL_ADC_IRQHandler+0xee>
 8002266:	4b63      	ldr	r3, [pc, #396]	; (80023f4 <HAL_ADC_IRQHandler+0x274>)
 8002268:	e001      	b.n	800226e <HAL_ADC_IRQHandler+0xee>
 800226a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	4293      	cmp	r3, r2
 8002274:	d008      	beq.n	8002288 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b05      	cmp	r3, #5
 8002280:	d002      	beq.n	8002288 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b09      	cmp	r3, #9
 8002286:	d104      	bne.n	8002292 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	623b      	str	r3, [r7, #32]
 8002290:	e014      	b.n	80022bc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a53      	ldr	r2, [pc, #332]	; (80023e4 <HAL_ADC_IRQHandler+0x264>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d009      	beq.n	80022b0 <HAL_ADC_IRQHandler+0x130>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a53      	ldr	r2, [pc, #332]	; (80023f0 <HAL_ADC_IRQHandler+0x270>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d002      	beq.n	80022ac <HAL_ADC_IRQHandler+0x12c>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	e003      	b.n	80022b4 <HAL_ADC_IRQHandler+0x134>
 80022ac:	4b51      	ldr	r3, [pc, #324]	; (80023f4 <HAL_ADC_IRQHandler+0x274>)
 80022ae:	e001      	b.n	80022b4 <HAL_ADC_IRQHandler+0x134>
 80022b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022b4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d135      	bne.n	8002332 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d12e      	bne.n	8002332 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fc9a 	bl	8001c12 <LL_ADC_REG_IsConversionOngoing>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d11a      	bne.n	800231a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 020c 	bic.w	r2, r2, #12
 80022f2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d112      	bne.n	8002332 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	65da      	str	r2, [r3, #92]	; 0x5c
 8002318:	e00b      	b.n	8002332 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231e:	f043 0210 	orr.w	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232a:	f043 0201 	orr.w	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f984 	bl	8002640 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	220c      	movs	r2, #12
 800233e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b00      	cmp	r3, #0
 8002348:	d004      	beq.n	8002354 <HAL_ADC_IRQHandler+0x1d4>
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10b      	bne.n	800236c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80b3 	beq.w	80024c6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 80ad 	beq.w	80024c6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fb3a 	bl	8001a02 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800238e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff faf5 	bl	8001984 <LL_ADC_REG_IsTriggerSourceSWStart>
 800239a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a10      	ldr	r2, [pc, #64]	; (80023e4 <HAL_ADC_IRQHandler+0x264>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d009      	beq.n	80023ba <HAL_ADC_IRQHandler+0x23a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a11      	ldr	r2, [pc, #68]	; (80023f0 <HAL_ADC_IRQHandler+0x270>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d002      	beq.n	80023b6 <HAL_ADC_IRQHandler+0x236>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	e003      	b.n	80023be <HAL_ADC_IRQHandler+0x23e>
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_ADC_IRQHandler+0x274>)
 80023b8:	e001      	b.n	80023be <HAL_ADC_IRQHandler+0x23e>
 80023ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d008      	beq.n	80023d8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b06      	cmp	r3, #6
 80023d0:	d002      	beq.n	80023d8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b07      	cmp	r3, #7
 80023d6:	d10f      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	623b      	str	r3, [r7, #32]
 80023e0:	e01f      	b.n	8002422 <HAL_ADC_IRQHandler+0x2a2>
 80023e2:	bf00      	nop
 80023e4:	50000100 	.word	0x50000100
 80023e8:	50000300 	.word	0x50000300
 80023ec:	50000700 	.word	0x50000700
 80023f0:	50000500 	.word	0x50000500
 80023f4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a8b      	ldr	r2, [pc, #556]	; (800262c <HAL_ADC_IRQHandler+0x4ac>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d009      	beq.n	8002416 <HAL_ADC_IRQHandler+0x296>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a8a      	ldr	r2, [pc, #552]	; (8002630 <HAL_ADC_IRQHandler+0x4b0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d002      	beq.n	8002412 <HAL_ADC_IRQHandler+0x292>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	e003      	b.n	800241a <HAL_ADC_IRQHandler+0x29a>
 8002412:	4b88      	ldr	r3, [pc, #544]	; (8002634 <HAL_ADC_IRQHandler+0x4b4>)
 8002414:	e001      	b.n	800241a <HAL_ADC_IRQHandler+0x29a>
 8002416:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800241a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d047      	beq.n	80024b8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_ADC_IRQHandler+0x2c2>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d03f      	beq.n	80024b8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800243e:	2b00      	cmp	r3, #0
 8002440:	d13a      	bne.n	80024b8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244c:	2b40      	cmp	r3, #64	; 0x40
 800244e:	d133      	bne.n	80024b8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d12e      	bne.n	80024b8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fbea 	bl	8001c38 <LL_ADC_INJ_IsConversionOngoing>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d11a      	bne.n	80024a0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002478:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d112      	bne.n	80024b8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	f043 0201 	orr.w	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	65da      	str	r2, [r3, #92]	; 0x5c
 800249e:	e00b      	b.n	80024b8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a4:	f043 0210 	orr.w	r2, r3, #16
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 fe79 	bl	80031b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2260      	movs	r2, #96	; 0x60
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d011      	beq.n	80024f4 <HAL_ADC_IRQHandler+0x374>
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00c      	beq.n	80024f4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f8be 	bl	8002668 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2280      	movs	r2, #128	; 0x80
 80024f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d012      	beq.n	8002524 <HAL_ADC_IRQHandler+0x3a4>
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00d      	beq.n	8002524 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fe5f 	bl	80031d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002522:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800252a:	2b00      	cmp	r3, #0
 800252c:	d012      	beq.n	8002554 <HAL_ADC_IRQHandler+0x3d4>
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00d      	beq.n	8002554 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fe51 	bl	80031ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002552:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	d043      	beq.n	80025e6 <HAL_ADC_IRQHandler+0x466>
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b00      	cmp	r3, #0
 8002566:	d03e      	beq.n	80025e6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002570:	2301      	movs	r3, #1
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
 8002574:	e021      	b.n	80025ba <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d015      	beq.n	80025a8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002584:	d004      	beq.n	8002590 <HAL_ADC_IRQHandler+0x410>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a28      	ldr	r2, [pc, #160]	; (800262c <HAL_ADC_IRQHandler+0x4ac>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d101      	bne.n	8002594 <HAL_ADC_IRQHandler+0x414>
 8002590:	4b29      	ldr	r3, [pc, #164]	; (8002638 <HAL_ADC_IRQHandler+0x4b8>)
 8002592:	e000      	b.n	8002596 <HAL_ADC_IRQHandler+0x416>
 8002594:	4b29      	ldr	r3, [pc, #164]	; (800263c <HAL_ADC_IRQHandler+0x4bc>)
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff faa4 	bl	8001ae4 <LL_ADC_GetMultiDMATransfer>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80025a2:	2301      	movs	r3, #1
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
 80025a6:	e008      	b.n	80025ba <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80025b6:	2301      	movs	r3, #1
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d10e      	bne.n	80025de <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d0:	f043 0202 	orr.w	r2, r3, #2
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f84f 	bl	800267c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2210      	movs	r2, #16
 80025e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d018      	beq.n	8002622 <HAL_ADC_IRQHandler+0x4a2>
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d013      	beq.n	8002622 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260a:	f043 0208 	orr.w	r2, r3, #8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800261a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fdd1 	bl	80031c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002622:	bf00      	nop
 8002624:	3728      	adds	r7, #40	; 0x28
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	50000100 	.word	0x50000100
 8002630:	50000500 	.word	0x50000500
 8002634:	50000400 	.word	0x50000400
 8002638:	50000300 	.word	0x50000300
 800263c:	50000700 	.word	0x50000700

08002640 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b0b6      	sub	sp, #216	; 0xd8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d102      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x24>
 80026ae:	2302      	movs	r3, #2
 80026b0:	f000 bc13 	b.w	8002eda <HAL_ADC_ConfigChannel+0x84a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff faa6 	bl	8001c12 <LL_ADC_REG_IsConversionOngoing>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f040 83f3 	bne.w	8002eb4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6859      	ldr	r1, [r3, #4]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	f7ff f965 	bl	80019aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fa94 	bl	8001c12 <LL_ADC_REG_IsConversionOngoing>
 80026ea:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff faa0 	bl	8001c38 <LL_ADC_INJ_IsConversionOngoing>
 80026f8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002700:	2b00      	cmp	r3, #0
 8002702:	f040 81d9 	bne.w	8002ab8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002706:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 81d4 	bne.w	8002ab8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002718:	d10f      	bne.n	800273a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2200      	movs	r2, #0
 8002724:	4619      	mov	r1, r3
 8002726:	f7ff f97f 	bl	8001a28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff f913 	bl	800195e <LL_ADC_SetSamplingTimeCommonConfig>
 8002738:	e00e      	b.n	8002758 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6819      	ldr	r1, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	461a      	mov	r2, r3
 8002748:	f7ff f96e 	bl	8001a28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff f903 	bl	800195e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	08db      	lsrs	r3, r3, #3
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	2b04      	cmp	r3, #4
 8002778:	d022      	beq.n	80027c0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6919      	ldr	r1, [r3, #16]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800278a:	f7ff f85d 	bl	8001848 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6919      	ldr	r1, [r3, #16]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	461a      	mov	r2, r3
 800279c:	f7ff f8a9 	bl	80018f2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d102      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x126>
 80027b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b4:	e000      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x128>
 80027b6:	2300      	movs	r3, #0
 80027b8:	461a      	mov	r2, r3
 80027ba:	f7ff f8b5 	bl	8001928 <LL_ADC_SetOffsetSaturation>
 80027be:	e17b      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff f862 	bl	8001890 <LL_ADC_GetOffsetChannel>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10a      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x15c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff f857 	bl	8001890 <LL_ADC_GetOffsetChannel>
 80027e2:	4603      	mov	r3, r0
 80027e4:	0e9b      	lsrs	r3, r3, #26
 80027e6:	f003 021f 	and.w	r2, r3, #31
 80027ea:	e01e      	b.n	800282a <HAL_ADC_ConfigChannel+0x19a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff f84c 	bl	8001890 <LL_ADC_GetOffsetChannel>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800280a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800280e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800281a:	2320      	movs	r3, #32
 800281c:	e004      	b.n	8002828 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800281e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002832:	2b00      	cmp	r3, #0
 8002834:	d105      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x1b2>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	0e9b      	lsrs	r3, r3, #26
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	e018      	b.n	8002874 <HAL_ADC_ConfigChannel+0x1e4>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800285a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800285e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002866:	2320      	movs	r3, #32
 8002868:	e004      	b.n	8002874 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800286a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002874:	429a      	cmp	r2, r3
 8002876:	d106      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2200      	movs	r2, #0
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff f81b 	bl	80018bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2101      	movs	r1, #1
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe ffff 	bl	8001890 <LL_ADC_GetOffsetChannel>
 8002892:	4603      	mov	r3, r0
 8002894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x222>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2101      	movs	r1, #1
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fff4 	bl	8001890 <LL_ADC_GetOffsetChannel>
 80028a8:	4603      	mov	r3, r0
 80028aa:	0e9b      	lsrs	r3, r3, #26
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	e01e      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x260>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2101      	movs	r1, #1
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe ffe9 	bl	8001890 <LL_ADC_GetOffsetChannel>
 80028be:	4603      	mov	r3, r0
 80028c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80028d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80028d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80028e0:	2320      	movs	r3, #32
 80028e2:	e004      	b.n	80028ee <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80028e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028e8:	fab3 f383 	clz	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d105      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x278>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	0e9b      	lsrs	r3, r3, #26
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	e018      	b.n	800293a <HAL_ADC_ConfigChannel+0x2aa>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002914:	fa93 f3a3 	rbit	r3, r3
 8002918:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800291c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002920:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002924:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800292c:	2320      	movs	r3, #32
 800292e:	e004      	b.n	800293a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002930:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800293a:	429a      	cmp	r2, r3
 800293c:	d106      	bne.n	800294c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2200      	movs	r2, #0
 8002944:	2101      	movs	r1, #1
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe ffb8 	bl	80018bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2102      	movs	r1, #2
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe ff9c 	bl	8001890 <LL_ADC_GetOffsetChannel>
 8002958:	4603      	mov	r3, r0
 800295a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x2e8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2102      	movs	r1, #2
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe ff91 	bl	8001890 <LL_ADC_GetOffsetChannel>
 800296e:	4603      	mov	r3, r0
 8002970:	0e9b      	lsrs	r3, r3, #26
 8002972:	f003 021f 	and.w	r2, r3, #31
 8002976:	e01e      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x326>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2102      	movs	r1, #2
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe ff86 	bl	8001890 <LL_ADC_GetOffsetChannel>
 8002984:	4603      	mov	r3, r0
 8002986:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002996:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800299a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800299e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e004      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80029aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x33e>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	e016      	b.n	80029fc <HAL_ADC_ConfigChannel+0x36c>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80029e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80029e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80029ee:	2320      	movs	r3, #32
 80029f0:	e004      	b.n	80029fc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80029f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d106      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2200      	movs	r2, #0
 8002a06:	2102      	movs	r1, #2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe ff57 	bl	80018bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2103      	movs	r1, #3
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fe ff3b 	bl	8001890 <LL_ADC_GetOffsetChannel>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x3aa>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2103      	movs	r1, #3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe ff30 	bl	8001890 <LL_ADC_GetOffsetChannel>
 8002a30:	4603      	mov	r3, r0
 8002a32:	0e9b      	lsrs	r3, r3, #26
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	e017      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x3da>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2103      	movs	r1, #3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe ff25 	bl	8001890 <LL_ADC_GetOffsetChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a54:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002a5c:	2320      	movs	r3, #32
 8002a5e:	e003      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x3f2>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	0e9b      	lsrs	r3, r3, #26
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	e011      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x416>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a92:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002a9a:	2320      	movs	r3, #32
 8002a9c:	e003      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d106      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2103      	movs	r1, #3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe ff02 	bl	80018bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff f881 	bl	8001bc4 <LL_ADC_IsEnabled>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f040 813d 	bne.w	8002d44 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6819      	ldr	r1, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f7fe ffd2 	bl	8001a80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4aa2      	ldr	r2, [pc, #648]	; (8002d6c <HAL_ADC_ConfigChannel+0x6dc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	f040 812e 	bne.w	8002d44 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x480>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	3301      	adds	r3, #1
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	2b09      	cmp	r3, #9
 8002b06:	bf94      	ite	ls
 8002b08:	2301      	movls	r3, #1
 8002b0a:	2300      	movhi	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	e019      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x4b4>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b20:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002b28:	2320      	movs	r3, #32
 8002b2a:	e003      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002b2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	3301      	adds	r3, #1
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	2b09      	cmp	r3, #9
 8002b3c:	bf94      	ite	ls
 8002b3e:	2301      	movls	r3, #1
 8002b40:	2300      	movhi	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d079      	beq.n	8002c3c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x4d4>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	069b      	lsls	r3, r3, #26
 8002b5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b62:	e015      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x500>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b74:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	e003      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	069b      	lsls	r3, r3, #26
 8002b8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x520>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0e9b      	lsrs	r3, r3, #26
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2101      	movs	r1, #1
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	e017      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x550>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002bc8:	2320      	movs	r3, #32
 8002bca:	e003      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	ea42 0103 	orr.w	r1, r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x576>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0e9b      	lsrs	r3, r3, #26
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	051b      	lsls	r3, r3, #20
 8002c04:	e018      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x5a8>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	e003      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	f003 021f 	and.w	r2, r3, #31
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	e07e      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x5c8>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	0e9b      	lsrs	r3, r3, #26
 8002c4e:	3301      	adds	r3, #1
 8002c50:	069b      	lsls	r3, r3, #26
 8002c52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c56:	e015      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x5f4>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002c70:	2320      	movs	r3, #32
 8002c72:	e003      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	069b      	lsls	r3, r3, #26
 8002c80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x614>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	0e9b      	lsrs	r3, r3, #26
 8002c96:	3301      	adds	r3, #1
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca2:	e017      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x644>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	61fb      	str	r3, [r7, #28]
  return result;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	e003      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f003 031f 	and.w	r3, r3, #31
 8002cce:	2101      	movs	r1, #1
 8002cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd4:	ea42 0103 	orr.w	r1, r2, r3
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10d      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x670>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	0e9b      	lsrs	r3, r3, #26
 8002cea:	3301      	adds	r3, #1
 8002cec:	f003 021f 	and.w	r2, r3, #31
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3b1e      	subs	r3, #30
 8002cf8:	051b      	lsls	r3, r3, #20
 8002cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	e01b      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x6a8>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	613b      	str	r3, [r7, #16]
  return result;
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002d18:	2320      	movs	r3, #32
 8002d1a:	e003      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	3301      	adds	r3, #1
 8002d26:	f003 021f 	and.w	r2, r3, #31
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	3b1e      	subs	r3, #30
 8002d32:	051b      	lsls	r3, r3, #20
 8002d34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d38:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f7fe fe72 	bl	8001a28 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_ADC_ConfigChannel+0x6e0>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80be 	beq.w	8002ece <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d5a:	d004      	beq.n	8002d66 <HAL_ADC_ConfigChannel+0x6d6>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <HAL_ADC_ConfigChannel+0x6e4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10a      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x6ec>
 8002d66:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <HAL_ADC_ConfigChannel+0x6e8>)
 8002d68:	e009      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x6ee>
 8002d6a:	bf00      	nop
 8002d6c:	407f0000 	.word	0x407f0000
 8002d70:	80080000 	.word	0x80080000
 8002d74:	50000100 	.word	0x50000100
 8002d78:	50000300 	.word	0x50000300
 8002d7c:	4b59      	ldr	r3, [pc, #356]	; (8002ee4 <HAL_ADC_ConfigChannel+0x854>)
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe fd54 	bl	800182c <LL_ADC_GetCommonPathInternalCh>
 8002d84:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a56      	ldr	r2, [pc, #344]	; (8002ee8 <HAL_ADC_ConfigChannel+0x858>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d004      	beq.n	8002d9c <HAL_ADC_ConfigChannel+0x70c>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a55      	ldr	r2, [pc, #340]	; (8002eec <HAL_ADC_ConfigChannel+0x85c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d13a      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002da0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d134      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db0:	d005      	beq.n	8002dbe <HAL_ADC_ConfigChannel+0x72e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a4e      	ldr	r2, [pc, #312]	; (8002ef0 <HAL_ADC_ConfigChannel+0x860>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	f040 8085 	bne.w	8002ec8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc6:	d004      	beq.n	8002dd2 <HAL_ADC_ConfigChannel+0x742>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a49      	ldr	r2, [pc, #292]	; (8002ef4 <HAL_ADC_ConfigChannel+0x864>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x746>
 8002dd2:	4a49      	ldr	r2, [pc, #292]	; (8002ef8 <HAL_ADC_ConfigChannel+0x868>)
 8002dd4:	e000      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x748>
 8002dd6:	4a43      	ldr	r2, [pc, #268]	; (8002ee4 <HAL_ADC_ConfigChannel+0x854>)
 8002dd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ddc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002de0:	4619      	mov	r1, r3
 8002de2:	4610      	mov	r0, r2
 8002de4:	f7fe fd0f 	bl	8001806 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002de8:	4b44      	ldr	r3, [pc, #272]	; (8002efc <HAL_ADC_ConfigChannel+0x86c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	4a44      	ldr	r2, [pc, #272]	; (8002f00 <HAL_ADC_ConfigChannel+0x870>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e02:	e002      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f9      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e10:	e05a      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a3b      	ldr	r2, [pc, #236]	; (8002f04 <HAL_ADC_ConfigChannel+0x874>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d125      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d11f      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a31      	ldr	r2, [pc, #196]	; (8002ef4 <HAL_ADC_ConfigChannel+0x864>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d104      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x7ac>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a34      	ldr	r2, [pc, #208]	; (8002f08 <HAL_ADC_ConfigChannel+0x878>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d047      	beq.n	8002ecc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e44:	d004      	beq.n	8002e50 <HAL_ADC_ConfigChannel+0x7c0>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a2a      	ldr	r2, [pc, #168]	; (8002ef4 <HAL_ADC_ConfigChannel+0x864>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x7c4>
 8002e50:	4a29      	ldr	r2, [pc, #164]	; (8002ef8 <HAL_ADC_ConfigChannel+0x868>)
 8002e52:	e000      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x7c6>
 8002e54:	4a23      	ldr	r2, [pc, #140]	; (8002ee4 <HAL_ADC_ConfigChannel+0x854>)
 8002e56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4610      	mov	r0, r2
 8002e62:	f7fe fcd0 	bl	8001806 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e66:	e031      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a27      	ldr	r2, [pc, #156]	; (8002f0c <HAL_ADC_ConfigChannel+0x87c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d12d      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d127      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1c      	ldr	r2, [pc, #112]	; (8002ef4 <HAL_ADC_ConfigChannel+0x864>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d022      	beq.n	8002ece <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e90:	d004      	beq.n	8002e9c <HAL_ADC_ConfigChannel+0x80c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a17      	ldr	r2, [pc, #92]	; (8002ef4 <HAL_ADC_ConfigChannel+0x864>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d101      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x810>
 8002e9c:	4a16      	ldr	r2, [pc, #88]	; (8002ef8 <HAL_ADC_ConfigChannel+0x868>)
 8002e9e:	e000      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x812>
 8002ea0:	4a10      	ldr	r2, [pc, #64]	; (8002ee4 <HAL_ADC_ConfigChannel+0x854>)
 8002ea2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ea6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f7fe fcaa 	bl	8001806 <LL_ADC_SetCommonPathInternalCh>
 8002eb2:	e00c      	b.n	8002ece <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	f043 0220 	orr.w	r2, r3, #32
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ec6:	e002      	b.n	8002ece <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ec8:	bf00      	nop
 8002eca:	e000      	b.n	8002ece <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ecc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ed6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	37d8      	adds	r7, #216	; 0xd8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	50000700 	.word	0x50000700
 8002ee8:	c3210000 	.word	0xc3210000
 8002eec:	90c00010 	.word	0x90c00010
 8002ef0:	50000600 	.word	0x50000600
 8002ef4:	50000100 	.word	0x50000100
 8002ef8:	50000300 	.word	0x50000300
 8002efc:	20000004 	.word	0x20000004
 8002f00:	053e2d63 	.word	0x053e2d63
 8002f04:	c7520000 	.word	0xc7520000
 8002f08:	50000500 	.word	0x50000500
 8002f0c:	cb840000 	.word	0xcb840000

08002f10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fe fe4f 	bl	8001bc4 <LL_ADC_IsEnabled>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d176      	bne.n	800301a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	4b3c      	ldr	r3, [pc, #240]	; (8003024 <ADC_Enable+0x114>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00d      	beq.n	8002f56 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	f043 0210 	orr.w	r2, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4a:	f043 0201 	orr.w	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e062      	b.n	800301c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe fe1e 	bl	8001b9c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f68:	d004      	beq.n	8002f74 <ADC_Enable+0x64>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a2e      	ldr	r2, [pc, #184]	; (8003028 <ADC_Enable+0x118>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d101      	bne.n	8002f78 <ADC_Enable+0x68>
 8002f74:	4b2d      	ldr	r3, [pc, #180]	; (800302c <ADC_Enable+0x11c>)
 8002f76:	e000      	b.n	8002f7a <ADC_Enable+0x6a>
 8002f78:	4b2d      	ldr	r3, [pc, #180]	; (8003030 <ADC_Enable+0x120>)
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe fc56 	bl	800182c <LL_ADC_GetCommonPathInternalCh>
 8002f80:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d013      	beq.n	8002fb2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	; (8003034 <ADC_Enable+0x124>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	4a29      	ldr	r2, [pc, #164]	; (8003038 <ADC_Enable+0x128>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	099b      	lsrs	r3, r3, #6
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fa4:	e002      	b.n	8002fac <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f9      	bne.n	8002fa6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fb2:	f7fe fc09 	bl	80017c8 <HAL_GetTick>
 8002fb6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fb8:	e028      	b.n	800300c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe fe00 	bl	8001bc4 <LL_ADC_IsEnabled>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d104      	bne.n	8002fd4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fde4 	bl	8001b9c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fd4:	f7fe fbf8 	bl	80017c8 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d914      	bls.n	800300c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d00d      	beq.n	800300c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff4:	f043 0210 	orr.w	r2, r3, #16
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e007      	b.n	800301c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d1cf      	bne.n	8002fba <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	8000003f 	.word	0x8000003f
 8003028:	50000100 	.word	0x50000100
 800302c:	50000300 	.word	0x50000300
 8003030:	50000700 	.word	0x50000700
 8003034:	20000004 	.word	0x20000004
 8003038:	053e2d63 	.word	0x053e2d63

0800303c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003052:	2b00      	cmp	r3, #0
 8003054:	d14b      	bne.n	80030ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d021      	beq.n	80030b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe fc85 	bl	8001984 <LL_ADC_REG_IsTriggerSourceSWStart>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d032      	beq.n	80030e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d12b      	bne.n	80030e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d11f      	bne.n	80030e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	f043 0201 	orr.w	r2, r3, #1
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80030b2:	e018      	b.n	80030e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d111      	bne.n	80030e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d105      	bne.n	80030e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f7ff faaa 	bl	8002640 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030ec:	e00e      	b.n	800310c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f7ff fabe 	bl	800267c <HAL_ADC_ErrorCallback>
}
 8003100:	e004      	b.n	800310c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4798      	blx	r3
}
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7ff fa96 	bl	8002654 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003142:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314e:	f043 0204 	orr.w	r2, r3, #4
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff fa90 	bl	800267c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <LL_ADC_IsEnabled>:
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <LL_ADC_IsEnabled+0x18>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <LL_ADC_IsEnabled+0x1a>
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <LL_ADC_REG_IsConversionOngoing>:
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b04      	cmp	r3, #4
 800319c:	d101      	bne.n	80031a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b0a1      	sub	sp, #132	; 0x84
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800322e:	2302      	movs	r3, #2
 8003230:	e0e7      	b.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800323a:	2300      	movs	r3, #0
 800323c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800323e:	2300      	movs	r3, #0
 8003240:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800324a:	d102      	bne.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800324c:	4b6f      	ldr	r3, [pc, #444]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	e009      	b.n	8003266 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6e      	ldr	r2, [pc, #440]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d102      	bne.n	8003262 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800325c:	4b6d      	ldr	r3, [pc, #436]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	e001      	b.n	8003266 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10b      	bne.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003270:	f043 0220 	orr.w	r2, r3, #32
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0be      	b.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ff7f 	bl	800318a <LL_ADC_REG_IsConversionOngoing>
 800328c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff ff79 	bl	800318a <LL_ADC_REG_IsConversionOngoing>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 80a0 	bne.w	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80032a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 809c 	bne.w	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032b0:	d004      	beq.n	80032bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a55      	ldr	r2, [pc, #340]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d101      	bne.n	80032c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80032bc:	4b56      	ldr	r3, [pc, #344]	; (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80032be:	e000      	b.n	80032c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80032c0:	4b56      	ldr	r3, [pc, #344]	; (800341c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80032c2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d04b      	beq.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032de:	035b      	lsls	r3, r3, #13
 80032e0:	430b      	orrs	r3, r1
 80032e2:	431a      	orrs	r2, r3
 80032e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032f0:	d004      	beq.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a45      	ldr	r2, [pc, #276]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d10f      	bne.n	800331c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80032fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003300:	f7ff ff30 	bl	8003164 <LL_ADC_IsEnabled>
 8003304:	4604      	mov	r4, r0
 8003306:	4841      	ldr	r0, [pc, #260]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003308:	f7ff ff2c 	bl	8003164 <LL_ADC_IsEnabled>
 800330c:	4603      	mov	r3, r0
 800330e:	4323      	orrs	r3, r4
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	e012      	b.n	8003342 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800331c:	483c      	ldr	r0, [pc, #240]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800331e:	f7ff ff21 	bl	8003164 <LL_ADC_IsEnabled>
 8003322:	4604      	mov	r4, r0
 8003324:	483b      	ldr	r0, [pc, #236]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003326:	f7ff ff1d 	bl	8003164 <LL_ADC_IsEnabled>
 800332a:	4603      	mov	r3, r0
 800332c:	431c      	orrs	r4, r3
 800332e:	483c      	ldr	r0, [pc, #240]	; (8003420 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003330:	f7ff ff18 	bl	8003164 <LL_ADC_IsEnabled>
 8003334:	4603      	mov	r3, r0
 8003336:	4323      	orrs	r3, r4
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d056      	beq.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800334e:	f023 030f 	bic.w	r3, r3, #15
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	6811      	ldr	r1, [r2, #0]
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	6892      	ldr	r2, [r2, #8]
 800335a:	430a      	orrs	r2, r1
 800335c:	431a      	orrs	r2, r3
 800335e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003360:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003362:	e047      	b.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800336c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800336e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003378:	d004      	beq.n	8003384 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a23      	ldr	r2, [pc, #140]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d10f      	bne.n	80033a4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003384:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003388:	f7ff feec 	bl	8003164 <LL_ADC_IsEnabled>
 800338c:	4604      	mov	r4, r0
 800338e:	481f      	ldr	r0, [pc, #124]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003390:	f7ff fee8 	bl	8003164 <LL_ADC_IsEnabled>
 8003394:	4603      	mov	r3, r0
 8003396:	4323      	orrs	r3, r4
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	e012      	b.n	80033ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80033a4:	481a      	ldr	r0, [pc, #104]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033a6:	f7ff fedd 	bl	8003164 <LL_ADC_IsEnabled>
 80033aa:	4604      	mov	r4, r0
 80033ac:	4819      	ldr	r0, [pc, #100]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033ae:	f7ff fed9 	bl	8003164 <LL_ADC_IsEnabled>
 80033b2:	4603      	mov	r3, r0
 80033b4:	431c      	orrs	r4, r3
 80033b6:	481a      	ldr	r0, [pc, #104]	; (8003420 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80033b8:	f7ff fed4 	bl	8003164 <LL_ADC_IsEnabled>
 80033bc:	4603      	mov	r3, r0
 80033be:	4323      	orrs	r3, r4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d012      	beq.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033d6:	f023 030f 	bic.w	r3, r3, #15
 80033da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80033dc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033de:	e009      	b.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	f043 0220 	orr.w	r2, r3, #32
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80033f2:	e000      	b.n	80033f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80033fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003402:	4618      	mov	r0, r3
 8003404:	3784      	adds	r7, #132	; 0x84
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}
 800340a:	bf00      	nop
 800340c:	50000100 	.word	0x50000100
 8003410:	50000400 	.word	0x50000400
 8003414:	50000500 	.word	0x50000500
 8003418:	50000300 	.word	0x50000300
 800341c:	50000700 	.word	0x50000700
 8003420:	50000600 	.word	0x50000600

08003424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003434:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <__NVIC_SetPriorityGrouping+0x44>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003440:	4013      	ands	r3, r2
 8003442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800344c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003456:	4a04      	ldr	r2, [pc, #16]	; (8003468 <__NVIC_SetPriorityGrouping+0x44>)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	60d3      	str	r3, [r2, #12]
}
 800345c:	bf00      	nop
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <__NVIC_GetPriorityGrouping+0x18>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	0a1b      	lsrs	r3, r3, #8
 8003476:	f003 0307 	and.w	r3, r3, #7
}
 800347a:	4618      	mov	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	2b00      	cmp	r3, #0
 8003498:	db0b      	blt.n	80034b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	f003 021f 	and.w	r2, r3, #31
 80034a0:	4907      	ldr	r1, [pc, #28]	; (80034c0 <__NVIC_EnableIRQ+0x38>)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	2001      	movs	r0, #1
 80034aa:	fa00 f202 	lsl.w	r2, r0, r2
 80034ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	e000e100 	.word	0xe000e100

080034c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	6039      	str	r1, [r7, #0]
 80034ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	db0a      	blt.n	80034ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	490c      	ldr	r1, [pc, #48]	; (8003510 <__NVIC_SetPriority+0x4c>)
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	0112      	lsls	r2, r2, #4
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	440b      	add	r3, r1
 80034e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034ec:	e00a      	b.n	8003504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4908      	ldr	r1, [pc, #32]	; (8003514 <__NVIC_SetPriority+0x50>)
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	3b04      	subs	r3, #4
 80034fc:	0112      	lsls	r2, r2, #4
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	440b      	add	r3, r1
 8003502:	761a      	strb	r2, [r3, #24]
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000e100 	.word	0xe000e100
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f1c3 0307 	rsb	r3, r3, #7
 8003532:	2b04      	cmp	r3, #4
 8003534:	bf28      	it	cs
 8003536:	2304      	movcs	r3, #4
 8003538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3304      	adds	r3, #4
 800353e:	2b06      	cmp	r3, #6
 8003540:	d902      	bls.n	8003548 <NVIC_EncodePriority+0x30>
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3b03      	subs	r3, #3
 8003546:	e000      	b.n	800354a <NVIC_EncodePriority+0x32>
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800354c:	f04f 32ff 	mov.w	r2, #4294967295
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43da      	mvns	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	401a      	ands	r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003560:	f04f 31ff 	mov.w	r1, #4294967295
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	43d9      	mvns	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003570:	4313      	orrs	r3, r2
         );
}
 8003572:	4618      	mov	r0, r3
 8003574:	3724      	adds	r7, #36	; 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003590:	d301      	bcc.n	8003596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003592:	2301      	movs	r3, #1
 8003594:	e00f      	b.n	80035b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003596:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <SysTick_Config+0x40>)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359e:	210f      	movs	r1, #15
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	f7ff ff8e 	bl	80034c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <SysTick_Config+0x40>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <SysTick_Config+0x40>)
 80035b0:	2207      	movs	r2, #7
 80035b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	e000e010 	.word	0xe000e010

080035c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ff29 	bl	8003424 <__NVIC_SetPriorityGrouping>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	4603      	mov	r3, r0
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035e8:	f7ff ff40 	bl	800346c <__NVIC_GetPriorityGrouping>
 80035ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7ff ff90 	bl	8003518 <NVIC_EncodePriority>
 80035f8:	4602      	mov	r2, r0
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff5f 	bl	80034c4 <__NVIC_SetPriority>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff33 	bl	8003488 <__NVIC_EnableIRQ>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ffa4 	bl	8003580 <SysTick_Config>
 8003638:	4603      	mov	r3, r0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e08d      	b.n	8003772 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_DMA_Init+0x138>)
 800365e:	429a      	cmp	r2, r3
 8003660:	d80f      	bhi.n	8003682 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	4b45      	ldr	r3, [pc, #276]	; (8003780 <HAL_DMA_Init+0x13c>)
 800366a:	4413      	add	r3, r2
 800366c:	4a45      	ldr	r2, [pc, #276]	; (8003784 <HAL_DMA_Init+0x140>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	009a      	lsls	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a42      	ldr	r2, [pc, #264]	; (8003788 <HAL_DMA_Init+0x144>)
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
 8003680:	e00e      	b.n	80036a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	4b40      	ldr	r3, [pc, #256]	; (800378c <HAL_DMA_Init+0x148>)
 800368a:	4413      	add	r3, r2
 800368c:	4a3d      	ldr	r2, [pc, #244]	; (8003784 <HAL_DMA_Init+0x140>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	009a      	lsls	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a3c      	ldr	r2, [pc, #240]	; (8003790 <HAL_DMA_Init+0x14c>)
 800369e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa76 	bl	8003be4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003700:	d102      	bne.n	8003708 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800371c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d010      	beq.n	8003748 <HAL_DMA_Init+0x104>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b04      	cmp	r3, #4
 800372c:	d80c      	bhi.n	8003748 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fa96 	bl	8003c60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	e008      	b.n	800375a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40020407 	.word	0x40020407
 8003780:	bffdfff8 	.word	0xbffdfff8
 8003784:	cccccccd 	.word	0xcccccccd
 8003788:	40020000 	.word	0x40020000
 800378c:	bffdfbf8 	.word	0xbffdfbf8
 8003790:	40020400 	.word	0x40020400

08003794 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_DMA_Start_IT+0x20>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e066      	b.n	8003882 <HAL_DMA_Start_IT+0xee>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d155      	bne.n	8003874 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f9bb 	bl	8003b68 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 020e 	orr.w	r2, r2, #14
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e00f      	b.n	800382c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 020a 	orr.w	r2, r2, #10
 800382a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003848:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003860:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	e005      	b.n	8003880 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800387c:	2302      	movs	r3, #2
 800387e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003880:	7dfb      	ldrb	r3, [r7, #23]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800388a:	b480      	push	{r7}
 800388c:	b085      	sub	sp, #20
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d005      	beq.n	80038ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2204      	movs	r2, #4
 80038a6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
 80038ac:	e037      	b.n	800391e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 020e 	bic.w	r2, r2, #14
 80038bc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038cc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f003 021f 	and.w	r2, r3, #31
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038fa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00c      	beq.n	800391e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003912:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800391c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d00d      	beq.n	8003970 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2204      	movs	r2, #4
 8003958:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
 800396e:	e047      	b.n	8003a00 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 020e 	bic.w	r2, r2, #14
 800397e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800399e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a4:	f003 021f 	and.w	r2, r3, #31
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	2101      	movs	r1, #1
 80039ae:	fa01 f202 	lsl.w	r2, r1, r2
 80039b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00c      	beq.n	80039e0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3
    }
  }
  return status;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d026      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x7a>
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d021      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d107      	bne.n	8003a5e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0204 	bic.w	r2, r2, #4
 8003a5c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f003 021f 	and.w	r2, r3, #31
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2104      	movs	r1, #4
 8003a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a70:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d071      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a82:	e06c      	b.n	8003b5e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d02e      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d029      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10b      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 020a 	bic.w	r2, r2, #10
 8003abe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003acc:	f003 021f 	and.w	r2, r3, #31
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	2102      	movs	r1, #2
 8003ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8003ada:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d038      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003af4:	e033      	b.n	8003b5e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	f003 031f 	and.w	r3, r3, #31
 8003afe:	2208      	movs	r2, #8
 8003b00:	409a      	lsls	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d02a      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d025      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 020e 	bic.w	r2, r2, #14
 8003b22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b28:	f003 021f 	and.w	r2, r3, #31
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	2101      	movs	r1, #1
 8003b32:	fa01 f202 	lsl.w	r2, r1, r2
 8003b36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d004      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b5e:	bf00      	nop
 8003b60:	bf00      	nop
}
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b7e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d004      	beq.n	8003b92 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b90:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	f003 021f 	and.w	r2, r3, #31
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	d108      	bne.n	8003bc8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bc6:	e007      	b.n	8003bd8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	60da      	str	r2, [r3, #12]
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d802      	bhi.n	8003bfe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003bf8:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	e001      	b.n	8003c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003bfe:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c00:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	3b08      	subs	r3, #8
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c10:	fba2 2303 	umull	r2, r3, r2, r3
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	089b      	lsrs	r3, r3, #2
 8003c1e:	009a      	lsls	r2, r3, #2
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	461a      	mov	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a0b      	ldr	r2, [pc, #44]	; (8003c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 031f 	and.w	r3, r3, #31
 8003c36:	2201      	movs	r2, #1
 8003c38:	409a      	lsls	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40020407 	.word	0x40020407
 8003c50:	40020800 	.word	0x40020800
 8003c54:	40020820 	.word	0x40020820
 8003c58:	cccccccd 	.word	0xcccccccd
 8003c5c:	40020880 	.word	0x40020880

08003c60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	461a      	mov	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c82:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	1000823f 	.word	0x1000823f
 8003ca4:	40020940 	.word	0x40020940

08003ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cb6:	e15a      	b.n	8003f6e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 814c 	beq.w	8003f68 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d005      	beq.n	8003ce8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d130      	bne.n	8003d4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d1e:	2201      	movs	r2, #1
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	091b      	lsrs	r3, r3, #4
 8003d34:	f003 0201 	and.w	r2, r3, #1
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d017      	beq.n	8003d86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	2203      	movs	r2, #3
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d123      	bne.n	8003dda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	08da      	lsrs	r2, r3, #3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3208      	adds	r2, #8
 8003d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	220f      	movs	r2, #15
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	43db      	mvns	r3, r3
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4013      	ands	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	08da      	lsrs	r2, r3, #3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3208      	adds	r2, #8
 8003dd4:	6939      	ldr	r1, [r7, #16]
 8003dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	2203      	movs	r2, #3
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43db      	mvns	r3, r3
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4013      	ands	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0203 	and.w	r2, r3, #3
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80a6 	beq.w	8003f68 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e1c:	4b5b      	ldr	r3, [pc, #364]	; (8003f8c <HAL_GPIO_Init+0x2e4>)
 8003e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e20:	4a5a      	ldr	r2, [pc, #360]	; (8003f8c <HAL_GPIO_Init+0x2e4>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	6613      	str	r3, [r2, #96]	; 0x60
 8003e28:	4b58      	ldr	r3, [pc, #352]	; (8003f8c <HAL_GPIO_Init+0x2e4>)
 8003e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e34:	4a56      	ldr	r2, [pc, #344]	; (8003f90 <HAL_GPIO_Init+0x2e8>)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	089b      	lsrs	r3, r3, #2
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	220f      	movs	r2, #15
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4013      	ands	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e5e:	d01f      	beq.n	8003ea0 <HAL_GPIO_Init+0x1f8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a4c      	ldr	r2, [pc, #304]	; (8003f94 <HAL_GPIO_Init+0x2ec>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d019      	beq.n	8003e9c <HAL_GPIO_Init+0x1f4>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a4b      	ldr	r2, [pc, #300]	; (8003f98 <HAL_GPIO_Init+0x2f0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d013      	beq.n	8003e98 <HAL_GPIO_Init+0x1f0>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a4a      	ldr	r2, [pc, #296]	; (8003f9c <HAL_GPIO_Init+0x2f4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00d      	beq.n	8003e94 <HAL_GPIO_Init+0x1ec>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a49      	ldr	r2, [pc, #292]	; (8003fa0 <HAL_GPIO_Init+0x2f8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d007      	beq.n	8003e90 <HAL_GPIO_Init+0x1e8>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a48      	ldr	r2, [pc, #288]	; (8003fa4 <HAL_GPIO_Init+0x2fc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d101      	bne.n	8003e8c <HAL_GPIO_Init+0x1e4>
 8003e88:	2305      	movs	r3, #5
 8003e8a:	e00a      	b.n	8003ea2 <HAL_GPIO_Init+0x1fa>
 8003e8c:	2306      	movs	r3, #6
 8003e8e:	e008      	b.n	8003ea2 <HAL_GPIO_Init+0x1fa>
 8003e90:	2304      	movs	r3, #4
 8003e92:	e006      	b.n	8003ea2 <HAL_GPIO_Init+0x1fa>
 8003e94:	2303      	movs	r3, #3
 8003e96:	e004      	b.n	8003ea2 <HAL_GPIO_Init+0x1fa>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e002      	b.n	8003ea2 <HAL_GPIO_Init+0x1fa>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <HAL_GPIO_Init+0x1fa>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	f002 0203 	and.w	r2, r2, #3
 8003ea8:	0092      	lsls	r2, r2, #2
 8003eaa:	4093      	lsls	r3, r2
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003eb2:	4937      	ldr	r1, [pc, #220]	; (8003f90 <HAL_GPIO_Init+0x2e8>)
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	089b      	lsrs	r3, r3, #2
 8003eb8:	3302      	adds	r3, #2
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ec0:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <HAL_GPIO_Init+0x300>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ee4:	4a30      	ldr	r2, [pc, #192]	; (8003fa8 <HAL_GPIO_Init+0x300>)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003eea:	4b2f      	ldr	r3, [pc, #188]	; (8003fa8 <HAL_GPIO_Init+0x300>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f0e:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <HAL_GPIO_Init+0x300>)
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f14:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_GPIO_Init+0x300>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4013      	ands	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f38:	4a1b      	ldr	r2, [pc, #108]	; (8003fa8 <HAL_GPIO_Init+0x300>)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f3e:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <HAL_GPIO_Init+0x300>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f62:	4a11      	ldr	r2, [pc, #68]	; (8003fa8 <HAL_GPIO_Init+0x300>)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f47f ae9d 	bne.w	8003cb8 <HAL_GPIO_Init+0x10>
  }
}
 8003f7e:	bf00      	nop
 8003f80:	bf00      	nop
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40010000 	.word	0x40010000
 8003f94:	48000400 	.word	0x48000400
 8003f98:	48000800 	.word	0x48000800
 8003f9c:	48000c00 	.word	0x48000c00
 8003fa0:	48001000 	.word	0x48001000
 8003fa4:	48001400 	.word	0x48001400
 8003fa8:	40010400 	.word	0x40010400

08003fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	807b      	strh	r3, [r7, #2]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fbc:	787b      	ldrb	r3, [r7, #1]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fc2:	887a      	ldrh	r2, [r7, #2]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fc8:	e002      	b.n	8003fd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fca:	887a      	ldrh	r2, [r7, #2]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fe6:	4b08      	ldr	r3, [pc, #32]	; (8004008 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d006      	beq.n	8004000 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ff2:	4a05      	ldr	r2, [pc, #20]	; (8004008 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ff4:	88fb      	ldrh	r3, [r7, #6]
 8003ff6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 f806 	bl	800400c <HAL_GPIO_EXTI_Callback>
  }
}
 8004000:	bf00      	nop
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40010400 	.word	0x40010400

0800400c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d141      	bne.n	80040b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004032:	4b4b      	ldr	r3, [pc, #300]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800403a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403e:	d131      	bne.n	80040a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004040:	4b47      	ldr	r3, [pc, #284]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004046:	4a46      	ldr	r2, [pc, #280]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800404c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004050:	4b43      	ldr	r3, [pc, #268]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004058:	4a41      	ldr	r2, [pc, #260]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800405e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004060:	4b40      	ldr	r3, [pc, #256]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2232      	movs	r2, #50	; 0x32
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	4a3f      	ldr	r2, [pc, #252]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	0c9b      	lsrs	r3, r3, #18
 8004072:	3301      	adds	r3, #1
 8004074:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004076:	e002      	b.n	800407e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	3b01      	subs	r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800407e:	4b38      	ldr	r3, [pc, #224]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408a:	d102      	bne.n	8004092 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f2      	bne.n	8004078 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004092:	4b33      	ldr	r3, [pc, #204]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409e:	d158      	bne.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e057      	b.n	8004154 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040a4:	4b2e      	ldr	r3, [pc, #184]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040aa:	4a2d      	ldr	r2, [pc, #180]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040b4:	e04d      	b.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040bc:	d141      	bne.n	8004142 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040be:	4b28      	ldr	r3, [pc, #160]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ca:	d131      	bne.n	8004130 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040cc:	4b24      	ldr	r3, [pc, #144]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d2:	4a23      	ldr	r2, [pc, #140]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040dc:	4b20      	ldr	r3, [pc, #128]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040e4:	4a1e      	ldr	r2, [pc, #120]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040ec:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2232      	movs	r2, #50	; 0x32
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	4a1c      	ldr	r2, [pc, #112]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040f8:	fba2 2303 	umull	r2, r3, r2, r3
 80040fc:	0c9b      	lsrs	r3, r3, #18
 80040fe:	3301      	adds	r3, #1
 8004100:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004102:	e002      	b.n	800410a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3b01      	subs	r3, #1
 8004108:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800410a:	4b15      	ldr	r3, [pc, #84]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004116:	d102      	bne.n	800411e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f2      	bne.n	8004104 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800411e:	4b10      	ldr	r3, [pc, #64]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412a:	d112      	bne.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e011      	b.n	8004154 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004136:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004140:	e007      	b.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004142:	4b07      	ldr	r3, [pc, #28]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800414a:	4a05      	ldr	r2, [pc, #20]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004150:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	40007000 	.word	0x40007000
 8004164:	20000004 	.word	0x20000004
 8004168:	431bde83 	.word	0x431bde83

0800416c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	4a04      	ldr	r2, [pc, #16]	; (8004188 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800417a:	6093      	str	r3, [r2, #8]
}
 800417c:	bf00      	nop
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40007000 	.word	0x40007000

0800418c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e2fe      	b.n	800479c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d075      	beq.n	8004296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041aa:	4b97      	ldr	r3, [pc, #604]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041b4:	4b94      	ldr	r3, [pc, #592]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0303 	and.w	r3, r3, #3
 80041bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	2b0c      	cmp	r3, #12
 80041c2:	d102      	bne.n	80041ca <HAL_RCC_OscConfig+0x3e>
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d002      	beq.n	80041d0 <HAL_RCC_OscConfig+0x44>
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d10b      	bne.n	80041e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d0:	4b8d      	ldr	r3, [pc, #564]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d05b      	beq.n	8004294 <HAL_RCC_OscConfig+0x108>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d157      	bne.n	8004294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e2d9      	b.n	800479c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f0:	d106      	bne.n	8004200 <HAL_RCC_OscConfig+0x74>
 80041f2:	4b85      	ldr	r3, [pc, #532]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a84      	ldr	r2, [pc, #528]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80041f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	e01d      	b.n	800423c <HAL_RCC_OscConfig+0xb0>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004208:	d10c      	bne.n	8004224 <HAL_RCC_OscConfig+0x98>
 800420a:	4b7f      	ldr	r3, [pc, #508]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a7e      	ldr	r2, [pc, #504]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 8004210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	4b7c      	ldr	r3, [pc, #496]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a7b      	ldr	r2, [pc, #492]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 800421c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e00b      	b.n	800423c <HAL_RCC_OscConfig+0xb0>
 8004224:	4b78      	ldr	r3, [pc, #480]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a77      	ldr	r2, [pc, #476]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 800422a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	4b75      	ldr	r3, [pc, #468]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a74      	ldr	r2, [pc, #464]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 8004236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800423a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d013      	beq.n	800426c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fd fac0 	bl	80017c8 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800424c:	f7fd fabc 	bl	80017c8 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b64      	cmp	r3, #100	; 0x64
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e29e      	b.n	800479c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800425e:	4b6a      	ldr	r3, [pc, #424]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0xc0>
 800426a:	e014      	b.n	8004296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fd faac 	bl	80017c8 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004274:	f7fd faa8 	bl	80017c8 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	; 0x64
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e28a      	b.n	800479c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004286:	4b60      	ldr	r3, [pc, #384]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0xe8>
 8004292:	e000      	b.n	8004296 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d075      	beq.n	800438e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042a2:	4b59      	ldr	r3, [pc, #356]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042ac:	4b56      	ldr	r3, [pc, #344]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2b0c      	cmp	r3, #12
 80042ba:	d102      	bne.n	80042c2 <HAL_RCC_OscConfig+0x136>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d002      	beq.n	80042c8 <HAL_RCC_OscConfig+0x13c>
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d11f      	bne.n	8004308 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042c8:	4b4f      	ldr	r3, [pc, #316]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_OscConfig+0x154>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e25d      	b.n	800479c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e0:	4b49      	ldr	r3, [pc, #292]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	061b      	lsls	r3, r3, #24
 80042ee:	4946      	ldr	r1, [pc, #280]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042f4:	4b45      	ldr	r3, [pc, #276]	; (800440c <HAL_RCC_OscConfig+0x280>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fd fa19 	bl	8001730 <HAL_InitTick>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d043      	beq.n	800438c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e249      	b.n	800479c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d023      	beq.n	8004358 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004310:	4b3d      	ldr	r3, [pc, #244]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a3c      	ldr	r2, [pc, #240]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 8004316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fd fa54 	bl	80017c8 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004324:	f7fd fa50 	bl	80017c8 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e232      	b.n	800479c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004336:	4b34      	ldr	r3, [pc, #208]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004342:	4b31      	ldr	r3, [pc, #196]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	061b      	lsls	r3, r3, #24
 8004350:	492d      	ldr	r1, [pc, #180]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 8004352:	4313      	orrs	r3, r2
 8004354:	604b      	str	r3, [r1, #4]
 8004356:	e01a      	b.n	800438e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004358:	4b2b      	ldr	r3, [pc, #172]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a2a      	ldr	r2, [pc, #168]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 800435e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004364:	f7fd fa30 	bl	80017c8 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800436c:	f7fd fa2c 	bl	80017c8 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e20e      	b.n	800479c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800437e:	4b22      	ldr	r3, [pc, #136]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x1e0>
 800438a:	e000      	b.n	800438e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800438c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d041      	beq.n	800441e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d01c      	beq.n	80043dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043a2:	4b19      	ldr	r3, [pc, #100]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80043a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043a8:	4a17      	ldr	r2, [pc, #92]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b2:	f7fd fa09 	bl	80017c8 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ba:	f7fd fa05 	bl	80017c8 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e1e7      	b.n	800479c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043cc:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80043ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0ef      	beq.n	80043ba <HAL_RCC_OscConfig+0x22e>
 80043da:	e020      	b.n	800441e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80043de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e2:	4a09      	ldr	r2, [pc, #36]	; (8004408 <HAL_RCC_OscConfig+0x27c>)
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ec:	f7fd f9ec 	bl	80017c8 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043f2:	e00d      	b.n	8004410 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f4:	f7fd f9e8 	bl	80017c8 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d906      	bls.n	8004410 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e1ca      	b.n	800479c <HAL_RCC_OscConfig+0x610>
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000
 800440c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004410:	4b8c      	ldr	r3, [pc, #560]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 8004412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1ea      	bne.n	80043f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 80a6 	beq.w	8004578 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442c:	2300      	movs	r3, #0
 800442e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004430:	4b84      	ldr	r3, [pc, #528]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 8004432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_RCC_OscConfig+0x2b4>
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <HAL_RCC_OscConfig+0x2b6>
 8004440:	2300      	movs	r3, #0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00d      	beq.n	8004462 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004446:	4b7f      	ldr	r3, [pc, #508]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 8004448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444a:	4a7e      	ldr	r2, [pc, #504]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004450:	6593      	str	r3, [r2, #88]	; 0x58
 8004452:	4b7c      	ldr	r3, [pc, #496]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 8004454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800445e:	2301      	movs	r3, #1
 8004460:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004462:	4b79      	ldr	r3, [pc, #484]	; (8004648 <HAL_RCC_OscConfig+0x4bc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d118      	bne.n	80044a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800446e:	4b76      	ldr	r3, [pc, #472]	; (8004648 <HAL_RCC_OscConfig+0x4bc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a75      	ldr	r2, [pc, #468]	; (8004648 <HAL_RCC_OscConfig+0x4bc>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447a:	f7fd f9a5 	bl	80017c8 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004482:	f7fd f9a1 	bl	80017c8 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e183      	b.n	800479c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004494:	4b6c      	ldr	r3, [pc, #432]	; (8004648 <HAL_RCC_OscConfig+0x4bc>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d108      	bne.n	80044ba <HAL_RCC_OscConfig+0x32e>
 80044a8:	4b66      	ldr	r3, [pc, #408]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ae:	4a65      	ldr	r2, [pc, #404]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044b8:	e024      	b.n	8004504 <HAL_RCC_OscConfig+0x378>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b05      	cmp	r3, #5
 80044c0:	d110      	bne.n	80044e4 <HAL_RCC_OscConfig+0x358>
 80044c2:	4b60      	ldr	r3, [pc, #384]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c8:	4a5e      	ldr	r2, [pc, #376]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 80044ca:	f043 0304 	orr.w	r3, r3, #4
 80044ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044d2:	4b5c      	ldr	r3, [pc, #368]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d8:	4a5a      	ldr	r2, [pc, #360]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044e2:	e00f      	b.n	8004504 <HAL_RCC_OscConfig+0x378>
 80044e4:	4b57      	ldr	r3, [pc, #348]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	4a56      	ldr	r2, [pc, #344]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 80044ec:	f023 0301 	bic.w	r3, r3, #1
 80044f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044f4:	4b53      	ldr	r3, [pc, #332]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	4a52      	ldr	r2, [pc, #328]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 80044fc:	f023 0304 	bic.w	r3, r3, #4
 8004500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d016      	beq.n	800453a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450c:	f7fd f95c 	bl	80017c8 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004512:	e00a      	b.n	800452a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004514:	f7fd f958 	bl	80017c8 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e138      	b.n	800479c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800452a:	4b46      	ldr	r3, [pc, #280]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 800452c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0ed      	beq.n	8004514 <HAL_RCC_OscConfig+0x388>
 8004538:	e015      	b.n	8004566 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453a:	f7fd f945 	bl	80017c8 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004540:	e00a      	b.n	8004558 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004542:	f7fd f941 	bl	80017c8 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004550:	4293      	cmp	r3, r2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e121      	b.n	800479c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004558:	4b3a      	ldr	r3, [pc, #232]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1ed      	bne.n	8004542 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004566:	7ffb      	ldrb	r3, [r7, #31]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d105      	bne.n	8004578 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800456c:	4b35      	ldr	r3, [pc, #212]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 800456e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004570:	4a34      	ldr	r2, [pc, #208]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 8004572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004576:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0320 	and.w	r3, r3, #32
 8004580:	2b00      	cmp	r3, #0
 8004582:	d03c      	beq.n	80045fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01c      	beq.n	80045c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800458c:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 800458e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004592:	4a2c      	ldr	r2, [pc, #176]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459c:	f7fd f914 	bl	80017c8 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045a4:	f7fd f910 	bl	80017c8 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e0f2      	b.n	800479c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045b6:	4b23      	ldr	r3, [pc, #140]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 80045b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0ef      	beq.n	80045a4 <HAL_RCC_OscConfig+0x418>
 80045c4:	e01b      	b.n	80045fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045c6:	4b1f      	ldr	r3, [pc, #124]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 80045c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045cc:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 80045ce:	f023 0301 	bic.w	r3, r3, #1
 80045d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d6:	f7fd f8f7 	bl	80017c8 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045de:	f7fd f8f3 	bl	80017c8 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e0d5      	b.n	800479c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045f0:	4b14      	ldr	r3, [pc, #80]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 80045f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1ef      	bne.n	80045de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 80c9 	beq.w	800479a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004608:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 030c 	and.w	r3, r3, #12
 8004610:	2b0c      	cmp	r3, #12
 8004612:	f000 8083 	beq.w	800471c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d15e      	bne.n	80046dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461e:	4b09      	ldr	r3, [pc, #36]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a08      	ldr	r2, [pc, #32]	; (8004644 <HAL_RCC_OscConfig+0x4b8>)
 8004624:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462a:	f7fd f8cd 	bl	80017c8 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004630:	e00c      	b.n	800464c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004632:	f7fd f8c9 	bl	80017c8 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d905      	bls.n	800464c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e0ab      	b.n	800479c <HAL_RCC_OscConfig+0x610>
 8004644:	40021000 	.word	0x40021000
 8004648:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800464c:	4b55      	ldr	r3, [pc, #340]	; (80047a4 <HAL_RCC_OscConfig+0x618>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1ec      	bne.n	8004632 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004658:	4b52      	ldr	r3, [pc, #328]	; (80047a4 <HAL_RCC_OscConfig+0x618>)
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	4b52      	ldr	r3, [pc, #328]	; (80047a8 <HAL_RCC_OscConfig+0x61c>)
 800465e:	4013      	ands	r3, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6a11      	ldr	r1, [r2, #32]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004668:	3a01      	subs	r2, #1
 800466a:	0112      	lsls	r2, r2, #4
 800466c:	4311      	orrs	r1, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004672:	0212      	lsls	r2, r2, #8
 8004674:	4311      	orrs	r1, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800467a:	0852      	lsrs	r2, r2, #1
 800467c:	3a01      	subs	r2, #1
 800467e:	0552      	lsls	r2, r2, #21
 8004680:	4311      	orrs	r1, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004686:	0852      	lsrs	r2, r2, #1
 8004688:	3a01      	subs	r2, #1
 800468a:	0652      	lsls	r2, r2, #25
 800468c:	4311      	orrs	r1, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004692:	06d2      	lsls	r2, r2, #27
 8004694:	430a      	orrs	r2, r1
 8004696:	4943      	ldr	r1, [pc, #268]	; (80047a4 <HAL_RCC_OscConfig+0x618>)
 8004698:	4313      	orrs	r3, r2
 800469a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800469c:	4b41      	ldr	r3, [pc, #260]	; (80047a4 <HAL_RCC_OscConfig+0x618>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a40      	ldr	r2, [pc, #256]	; (80047a4 <HAL_RCC_OscConfig+0x618>)
 80046a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046a8:	4b3e      	ldr	r3, [pc, #248]	; (80047a4 <HAL_RCC_OscConfig+0x618>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a3d      	ldr	r2, [pc, #244]	; (80047a4 <HAL_RCC_OscConfig+0x618>)
 80046ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b4:	f7fd f888 	bl	80017c8 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046bc:	f7fd f884 	bl	80017c8 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e066      	b.n	800479c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ce:	4b35      	ldr	r3, [pc, #212]	; (80047a4 <HAL_RCC_OscConfig+0x618>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0f0      	beq.n	80046bc <HAL_RCC_OscConfig+0x530>
 80046da:	e05e      	b.n	800479a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046dc:	4b31      	ldr	r3, [pc, #196]	; (80047a4 <HAL_RCC_OscConfig+0x618>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a30      	ldr	r2, [pc, #192]	; (80047a4 <HAL_RCC_OscConfig+0x618>)
 80046e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fd f86e 	bl	80017c8 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f0:	f7fd f86a 	bl	80017c8 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e04c      	b.n	800479c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004702:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <HAL_RCC_OscConfig+0x618>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f0      	bne.n	80046f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800470e:	4b25      	ldr	r3, [pc, #148]	; (80047a4 <HAL_RCC_OscConfig+0x618>)
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	4924      	ldr	r1, [pc, #144]	; (80047a4 <HAL_RCC_OscConfig+0x618>)
 8004714:	4b25      	ldr	r3, [pc, #148]	; (80047ac <HAL_RCC_OscConfig+0x620>)
 8004716:	4013      	ands	r3, r2
 8004718:	60cb      	str	r3, [r1, #12]
 800471a:	e03e      	b.n	800479a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e039      	b.n	800479c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004728:	4b1e      	ldr	r3, [pc, #120]	; (80047a4 <HAL_RCC_OscConfig+0x618>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f003 0203 	and.w	r2, r3, #3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	429a      	cmp	r2, r3
 800473a:	d12c      	bne.n	8004796 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	3b01      	subs	r3, #1
 8004748:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d123      	bne.n	8004796 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800475a:	429a      	cmp	r2, r3
 800475c:	d11b      	bne.n	8004796 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800476a:	429a      	cmp	r2, r3
 800476c:	d113      	bne.n	8004796 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	085b      	lsrs	r3, r3, #1
 800477a:	3b01      	subs	r3, #1
 800477c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800477e:	429a      	cmp	r2, r3
 8004780:	d109      	bne.n	8004796 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	085b      	lsrs	r3, r3, #1
 800478e:	3b01      	subs	r3, #1
 8004790:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d001      	beq.n	800479a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3720      	adds	r7, #32
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40021000 	.word	0x40021000
 80047a8:	019f800c 	.word	0x019f800c
 80047ac:	feeefffc 	.word	0xfeeefffc

080047b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e11e      	b.n	8004a06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047c8:	4b91      	ldr	r3, [pc, #580]	; (8004a10 <HAL_RCC_ClockConfig+0x260>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d910      	bls.n	80047f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d6:	4b8e      	ldr	r3, [pc, #568]	; (8004a10 <HAL_RCC_ClockConfig+0x260>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f023 020f 	bic.w	r2, r3, #15
 80047de:	498c      	ldr	r1, [pc, #560]	; (8004a10 <HAL_RCC_ClockConfig+0x260>)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e6:	4b8a      	ldr	r3, [pc, #552]	; (8004a10 <HAL_RCC_ClockConfig+0x260>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e106      	b.n	8004a06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d073      	beq.n	80048ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b03      	cmp	r3, #3
 800480a:	d129      	bne.n	8004860 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800480c:	4b81      	ldr	r3, [pc, #516]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0f4      	b.n	8004a06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800481c:	f000 f99e 	bl	8004b5c <RCC_GetSysClockFreqFromPLLSource>
 8004820:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4a7c      	ldr	r2, [pc, #496]	; (8004a18 <HAL_RCC_ClockConfig+0x268>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d93f      	bls.n	80048aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800482a:	4b7a      	ldr	r3, [pc, #488]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800483e:	2b00      	cmp	r3, #0
 8004840:	d033      	beq.n	80048aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004846:	2b00      	cmp	r3, #0
 8004848:	d12f      	bne.n	80048aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800484a:	4b72      	ldr	r3, [pc, #456]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004852:	4a70      	ldr	r2, [pc, #448]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 8004854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004858:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800485a:	2380      	movs	r3, #128	; 0x80
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	e024      	b.n	80048aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d107      	bne.n	8004878 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004868:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d109      	bne.n	8004888 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0c6      	b.n	8004a06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004878:	4b66      	ldr	r3, [pc, #408]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0be      	b.n	8004a06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004888:	f000 f8ce 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 800488c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	4a61      	ldr	r2, [pc, #388]	; (8004a18 <HAL_RCC_ClockConfig+0x268>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d909      	bls.n	80048aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004896:	4b5f      	ldr	r3, [pc, #380]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800489e:	4a5d      	ldr	r2, [pc, #372]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 80048a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048aa:	4b5a      	ldr	r3, [pc, #360]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f023 0203 	bic.w	r2, r3, #3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	4957      	ldr	r1, [pc, #348]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048bc:	f7fc ff84 	bl	80017c8 <HAL_GetTick>
 80048c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c2:	e00a      	b.n	80048da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c4:	f7fc ff80 	bl	80017c8 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e095      	b.n	8004a06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048da:	4b4e      	ldr	r3, [pc, #312]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 020c 	and.w	r2, r3, #12
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d1eb      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d023      	beq.n	8004940 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004904:	4b43      	ldr	r3, [pc, #268]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4a42      	ldr	r2, [pc, #264]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 800490a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800490e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b00      	cmp	r3, #0
 800491a:	d007      	beq.n	800492c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800491c:	4b3d      	ldr	r3, [pc, #244]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004924:	4a3b      	ldr	r2, [pc, #236]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 8004926:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800492a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800492c:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	4936      	ldr	r1, [pc, #216]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 800493a:	4313      	orrs	r3, r2
 800493c:	608b      	str	r3, [r1, #8]
 800493e:	e008      	b.n	8004952 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2b80      	cmp	r3, #128	; 0x80
 8004944:	d105      	bne.n	8004952 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004946:	4b33      	ldr	r3, [pc, #204]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	4a32      	ldr	r2, [pc, #200]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 800494c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004950:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004952:	4b2f      	ldr	r3, [pc, #188]	; (8004a10 <HAL_RCC_ClockConfig+0x260>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	d21d      	bcs.n	800499c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004960:	4b2b      	ldr	r3, [pc, #172]	; (8004a10 <HAL_RCC_ClockConfig+0x260>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f023 020f 	bic.w	r2, r3, #15
 8004968:	4929      	ldr	r1, [pc, #164]	; (8004a10 <HAL_RCC_ClockConfig+0x260>)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	4313      	orrs	r3, r2
 800496e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004970:	f7fc ff2a 	bl	80017c8 <HAL_GetTick>
 8004974:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004976:	e00a      	b.n	800498e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004978:	f7fc ff26 	bl	80017c8 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	; 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e03b      	b.n	8004a06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800498e:	4b20      	ldr	r3, [pc, #128]	; (8004a10 <HAL_RCC_ClockConfig+0x260>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d1ed      	bne.n	8004978 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d008      	beq.n	80049ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a8:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	4917      	ldr	r1, [pc, #92]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d009      	beq.n	80049da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049c6:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	490f      	ldr	r1, [pc, #60]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049da:	f000 f825 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 80049de:	4602      	mov	r2, r0
 80049e0:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <HAL_RCC_ClockConfig+0x264>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	091b      	lsrs	r3, r3, #4
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	490c      	ldr	r1, [pc, #48]	; (8004a1c <HAL_RCC_ClockConfig+0x26c>)
 80049ec:	5ccb      	ldrb	r3, [r1, r3]
 80049ee:	f003 031f 	and.w	r3, r3, #31
 80049f2:	fa22 f303 	lsr.w	r3, r2, r3
 80049f6:	4a0a      	ldr	r2, [pc, #40]	; (8004a20 <HAL_RCC_ClockConfig+0x270>)
 80049f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049fa:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <HAL_RCC_ClockConfig+0x274>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fc fe96 	bl	8001730 <HAL_InitTick>
 8004a04:	4603      	mov	r3, r0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40022000 	.word	0x40022000
 8004a14:	40021000 	.word	0x40021000
 8004a18:	04c4b400 	.word	0x04c4b400
 8004a1c:	080081e8 	.word	0x080081e8
 8004a20:	20000004 	.word	0x20000004
 8004a24:	20000008 	.word	0x20000008

08004a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a2e:	4b2c      	ldr	r3, [pc, #176]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d102      	bne.n	8004a40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	e047      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a40:	4b27      	ldr	r3, [pc, #156]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d102      	bne.n	8004a52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a4c:	4b26      	ldr	r3, [pc, #152]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	e03e      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a52:	4b23      	ldr	r3, [pc, #140]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b0c      	cmp	r3, #12
 8004a5c:	d136      	bne.n	8004acc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a5e:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a68:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	3301      	adds	r3, #1
 8004a74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d10c      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a7c:	4a1a      	ldr	r2, [pc, #104]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a84:	4a16      	ldr	r2, [pc, #88]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a86:	68d2      	ldr	r2, [r2, #12]
 8004a88:	0a12      	lsrs	r2, r2, #8
 8004a8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	617b      	str	r3, [r7, #20]
      break;
 8004a94:	e00c      	b.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a96:	4a13      	ldr	r2, [pc, #76]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9e:	4a10      	ldr	r2, [pc, #64]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aa0:	68d2      	ldr	r2, [r2, #12]
 8004aa2:	0a12      	lsrs	r2, r2, #8
 8004aa4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004aa8:	fb02 f303 	mul.w	r3, r2, r3
 8004aac:	617b      	str	r3, [r7, #20]
      break;
 8004aae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	0e5b      	lsrs	r3, r3, #25
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	3301      	adds	r3, #1
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	e001      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ad0:	693b      	ldr	r3, [r7, #16]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	00f42400 	.word	0x00f42400
 8004ae8:	016e3600 	.word	0x016e3600

08004aec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004af0:	4b03      	ldr	r3, [pc, #12]	; (8004b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004af2:	681b      	ldr	r3, [r3, #0]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000004 	.word	0x20000004

08004b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b08:	f7ff fff0 	bl	8004aec <HAL_RCC_GetHCLKFreq>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	0a1b      	lsrs	r3, r3, #8
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	4904      	ldr	r1, [pc, #16]	; (8004b2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b1a:	5ccb      	ldrb	r3, [r1, r3]
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	080081f8 	.word	0x080081f8

08004b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b34:	f7ff ffda 	bl	8004aec <HAL_RCC_GetHCLKFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	0adb      	lsrs	r3, r3, #11
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	4904      	ldr	r1, [pc, #16]	; (8004b58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b46:	5ccb      	ldrb	r3, [r1, r3]
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40021000 	.word	0x40021000
 8004b58:	080081f8 	.word	0x080081f8

08004b5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b62:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b6c:	4b1b      	ldr	r3, [pc, #108]	; (8004bdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	3301      	adds	r3, #1
 8004b78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d10c      	bne.n	8004b9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b80:	4a17      	ldr	r2, [pc, #92]	; (8004be0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b88:	4a14      	ldr	r2, [pc, #80]	; (8004bdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b8a:	68d2      	ldr	r2, [r2, #12]
 8004b8c:	0a12      	lsrs	r2, r2, #8
 8004b8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	617b      	str	r3, [r7, #20]
    break;
 8004b98:	e00c      	b.n	8004bb4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b9a:	4a12      	ldr	r2, [pc, #72]	; (8004be4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	4a0e      	ldr	r2, [pc, #56]	; (8004bdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ba4:	68d2      	ldr	r2, [r2, #12]
 8004ba6:	0a12      	lsrs	r2, r2, #8
 8004ba8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bac:	fb02 f303 	mul.w	r3, r2, r3
 8004bb0:	617b      	str	r3, [r7, #20]
    break;
 8004bb2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bb4:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	0e5b      	lsrs	r3, r3, #25
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004bce:	687b      	ldr	r3, [r7, #4]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	016e3600 	.word	0x016e3600
 8004be4:	00f42400 	.word	0x00f42400

08004be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8098 	beq.w	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c06:	2300      	movs	r3, #0
 8004c08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c0a:	4b43      	ldr	r3, [pc, #268]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10d      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c16:	4b40      	ldr	r3, [pc, #256]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1a:	4a3f      	ldr	r2, [pc, #252]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c20:	6593      	str	r3, [r2, #88]	; 0x58
 8004c22:	4b3d      	ldr	r3, [pc, #244]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	60bb      	str	r3, [r7, #8]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c32:	4b3a      	ldr	r3, [pc, #232]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a39      	ldr	r2, [pc, #228]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c3e:	f7fc fdc3 	bl	80017c8 <HAL_GetTick>
 8004c42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c44:	e009      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c46:	f7fc fdbf 	bl	80017c8 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d902      	bls.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	74fb      	strb	r3, [r7, #19]
        break;
 8004c58:	e005      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c5a:	4b30      	ldr	r3, [pc, #192]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0ef      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c66:	7cfb      	ldrb	r3, [r7, #19]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d159      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c6c:	4b2a      	ldr	r3, [pc, #168]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01e      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d019      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c88:	4b23      	ldr	r3, [pc, #140]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c94:	4b20      	ldr	r3, [pc, #128]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9a:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca4:	4b1c      	ldr	r3, [pc, #112]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004caa:	4a1b      	ldr	r2, [pc, #108]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cb4:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d016      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc6:	f7fc fd7f 	bl	80017c8 <HAL_GetTick>
 8004cca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ccc:	e00b      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cce:	f7fc fd7b 	bl	80017c8 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d902      	bls.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ce4:	e006      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ce6:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0ec      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004cf4:	7cfb      	ldrb	r3, [r7, #19]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10b      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cfa:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d08:	4903      	ldr	r1, [pc, #12]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d10:	e008      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d12:	7cfb      	ldrb	r3, [r7, #19]
 8004d14:	74bb      	strb	r3, [r7, #18]
 8004d16:	e005      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d24:	7c7b      	ldrb	r3, [r7, #17]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d105      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d2a:	4ba7      	ldr	r3, [pc, #668]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	4aa6      	ldr	r2, [pc, #664]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d42:	4ba1      	ldr	r3, [pc, #644]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d48:	f023 0203 	bic.w	r2, r3, #3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	499d      	ldr	r1, [pc, #628]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d64:	4b98      	ldr	r3, [pc, #608]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f023 020c 	bic.w	r2, r3, #12
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	4995      	ldr	r1, [pc, #596]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d86:	4b90      	ldr	r3, [pc, #576]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	498c      	ldr	r1, [pc, #560]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004da8:	4b87      	ldr	r3, [pc, #540]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	4984      	ldr	r1, [pc, #528]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0310 	and.w	r3, r3, #16
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dca:	4b7f      	ldr	r3, [pc, #508]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	497b      	ldr	r1, [pc, #492]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dec:	4b76      	ldr	r3, [pc, #472]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	4973      	ldr	r1, [pc, #460]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e0e:	4b6e      	ldr	r3, [pc, #440]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	496a      	ldr	r1, [pc, #424]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e30:	4b65      	ldr	r3, [pc, #404]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	4962      	ldr	r1, [pc, #392]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e52:	4b5d      	ldr	r3, [pc, #372]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	4959      	ldr	r1, [pc, #356]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e74:	4b54      	ldr	r3, [pc, #336]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e7a:	f023 0203 	bic.w	r2, r3, #3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e82:	4951      	ldr	r1, [pc, #324]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e96:	4b4c      	ldr	r3, [pc, #304]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	4948      	ldr	r1, [pc, #288]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d015      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eb8:	4b43      	ldr	r3, [pc, #268]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	4940      	ldr	r1, [pc, #256]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ed6:	d105      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed8:	4b3b      	ldr	r3, [pc, #236]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4a3a      	ldr	r2, [pc, #232]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ee2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d015      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ef0:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	4932      	ldr	r1, [pc, #200]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f0e:	d105      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f10:	4b2d      	ldr	r3, [pc, #180]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	4a2c      	ldr	r2, [pc, #176]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f1a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d015      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f28:	4b27      	ldr	r3, [pc, #156]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	4924      	ldr	r1, [pc, #144]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f46:	d105      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f48:	4b1f      	ldr	r3, [pc, #124]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4a1e      	ldr	r2, [pc, #120]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d015      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f60:	4b19      	ldr	r3, [pc, #100]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6e:	4916      	ldr	r1, [pc, #88]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f7e:	d105      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f80:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4a10      	ldr	r2, [pc, #64]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d019      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f98:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	4908      	ldr	r1, [pc, #32]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fb6:	d109      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fb8:	4b03      	ldr	r3, [pc, #12]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	4a02      	ldr	r2, [pc, #8]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fc2:	60d3      	str	r3, [r2, #12]
 8004fc4:	e002      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004fc6:	bf00      	nop
 8004fc8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d015      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fd8:	4b29      	ldr	r3, [pc, #164]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe6:	4926      	ldr	r1, [pc, #152]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ff6:	d105      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ff8:	4b21      	ldr	r3, [pc, #132]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	4a20      	ldr	r2, [pc, #128]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005002:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d015      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005010:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005016:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800501e:	4918      	ldr	r1, [pc, #96]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800502a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502e:	d105      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005030:	4b13      	ldr	r3, [pc, #76]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4a12      	ldr	r2, [pc, #72]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d015      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005048:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800504a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800504e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005056:	490a      	ldr	r1, [pc, #40]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005066:	d105      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005068:	4b05      	ldr	r3, [pc, #20]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	4a04      	ldr	r2, [pc, #16]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800506e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005072:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005074:	7cbb      	ldrb	r3, [r7, #18]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40021000 	.word	0x40021000

08005084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e049      	b.n	800512a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fc f92a 	bl	8001304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f000 fed0 	bl	8005e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	d001      	beq.n	800514c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e04c      	b.n	80051e6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a26      	ldr	r2, [pc, #152]	; (80051f4 <HAL_TIM_Base_Start+0xc0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d022      	beq.n	80051a4 <HAL_TIM_Base_Start+0x70>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005166:	d01d      	beq.n	80051a4 <HAL_TIM_Base_Start+0x70>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a22      	ldr	r2, [pc, #136]	; (80051f8 <HAL_TIM_Base_Start+0xc4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d018      	beq.n	80051a4 <HAL_TIM_Base_Start+0x70>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a21      	ldr	r2, [pc, #132]	; (80051fc <HAL_TIM_Base_Start+0xc8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d013      	beq.n	80051a4 <HAL_TIM_Base_Start+0x70>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a1f      	ldr	r2, [pc, #124]	; (8005200 <HAL_TIM_Base_Start+0xcc>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00e      	beq.n	80051a4 <HAL_TIM_Base_Start+0x70>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a1e      	ldr	r2, [pc, #120]	; (8005204 <HAL_TIM_Base_Start+0xd0>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d009      	beq.n	80051a4 <HAL_TIM_Base_Start+0x70>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a1c      	ldr	r2, [pc, #112]	; (8005208 <HAL_TIM_Base_Start+0xd4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d004      	beq.n	80051a4 <HAL_TIM_Base_Start+0x70>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1b      	ldr	r2, [pc, #108]	; (800520c <HAL_TIM_Base_Start+0xd8>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d115      	bne.n	80051d0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	4b19      	ldr	r3, [pc, #100]	; (8005210 <HAL_TIM_Base_Start+0xdc>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b06      	cmp	r3, #6
 80051b4:	d015      	beq.n	80051e2 <HAL_TIM_Base_Start+0xae>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051bc:	d011      	beq.n	80051e2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0201 	orr.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ce:	e008      	b.n	80051e2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0201 	orr.w	r2, r2, #1
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	e000      	b.n	80051e4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40012c00 	.word	0x40012c00
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800
 8005200:	40000c00 	.word	0x40000c00
 8005204:	40013400 	.word	0x40013400
 8005208:	40014000 	.word	0x40014000
 800520c:	40015000 	.word	0x40015000
 8005210:	00010007 	.word	0x00010007

08005214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	d001      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e054      	b.n	80052d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a26      	ldr	r2, [pc, #152]	; (80052e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d022      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x80>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005256:	d01d      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x80>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a22      	ldr	r2, [pc, #136]	; (80052e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d018      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x80>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a21      	ldr	r2, [pc, #132]	; (80052ec <HAL_TIM_Base_Start_IT+0xd8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d013      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x80>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1f      	ldr	r2, [pc, #124]	; (80052f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00e      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x80>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d009      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x80>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1c      	ldr	r2, [pc, #112]	; (80052f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d004      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x80>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1b      	ldr	r2, [pc, #108]	; (80052fc <HAL_TIM_Base_Start_IT+0xe8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d115      	bne.n	80052c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	4b19      	ldr	r3, [pc, #100]	; (8005300 <HAL_TIM_Base_Start_IT+0xec>)
 800529c:	4013      	ands	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b06      	cmp	r3, #6
 80052a4:	d015      	beq.n	80052d2 <HAL_TIM_Base_Start_IT+0xbe>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ac:	d011      	beq.n	80052d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052be:	e008      	b.n	80052d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	e000      	b.n	80052d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00
 80052f4:	40013400 	.word	0x40013400
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40015000 	.word	0x40015000
 8005300:	00010007 	.word	0x00010007

08005304 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e049      	b.n	80053aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fb ffb6 	bl	800129c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f000 fd90 	bl	8005e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d109      	bne.n	80053d8 <HAL_TIM_PWM_Start+0x24>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	bf14      	ite	ne
 80053d0:	2301      	movne	r3, #1
 80053d2:	2300      	moveq	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	e03c      	b.n	8005452 <HAL_TIM_PWM_Start+0x9e>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d109      	bne.n	80053f2 <HAL_TIM_PWM_Start+0x3e>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	bf14      	ite	ne
 80053ea:	2301      	movne	r3, #1
 80053ec:	2300      	moveq	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	e02f      	b.n	8005452 <HAL_TIM_PWM_Start+0x9e>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d109      	bne.n	800540c <HAL_TIM_PWM_Start+0x58>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	bf14      	ite	ne
 8005404:	2301      	movne	r3, #1
 8005406:	2300      	moveq	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	e022      	b.n	8005452 <HAL_TIM_PWM_Start+0x9e>
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2b0c      	cmp	r3, #12
 8005410:	d109      	bne.n	8005426 <HAL_TIM_PWM_Start+0x72>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b01      	cmp	r3, #1
 800541c:	bf14      	ite	ne
 800541e:	2301      	movne	r3, #1
 8005420:	2300      	moveq	r3, #0
 8005422:	b2db      	uxtb	r3, r3
 8005424:	e015      	b.n	8005452 <HAL_TIM_PWM_Start+0x9e>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b10      	cmp	r3, #16
 800542a:	d109      	bne.n	8005440 <HAL_TIM_PWM_Start+0x8c>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b01      	cmp	r3, #1
 8005436:	bf14      	ite	ne
 8005438:	2301      	movne	r3, #1
 800543a:	2300      	moveq	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	e008      	b.n	8005452 <HAL_TIM_PWM_Start+0x9e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b01      	cmp	r3, #1
 800544a:	bf14      	ite	ne
 800544c:	2301      	movne	r3, #1
 800544e:	2300      	moveq	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e0a6      	b.n	80055a8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d104      	bne.n	800546a <HAL_TIM_PWM_Start+0xb6>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005468:	e023      	b.n	80054b2 <HAL_TIM_PWM_Start+0xfe>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b04      	cmp	r3, #4
 800546e:	d104      	bne.n	800547a <HAL_TIM_PWM_Start+0xc6>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005478:	e01b      	b.n	80054b2 <HAL_TIM_PWM_Start+0xfe>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b08      	cmp	r3, #8
 800547e:	d104      	bne.n	800548a <HAL_TIM_PWM_Start+0xd6>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005488:	e013      	b.n	80054b2 <HAL_TIM_PWM_Start+0xfe>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b0c      	cmp	r3, #12
 800548e:	d104      	bne.n	800549a <HAL_TIM_PWM_Start+0xe6>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005498:	e00b      	b.n	80054b2 <HAL_TIM_PWM_Start+0xfe>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b10      	cmp	r3, #16
 800549e:	d104      	bne.n	80054aa <HAL_TIM_PWM_Start+0xf6>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a8:	e003      	b.n	80054b2 <HAL_TIM_PWM_Start+0xfe>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2201      	movs	r2, #1
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f001 f94e 	bl	800675c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a3a      	ldr	r2, [pc, #232]	; (80055b0 <HAL_TIM_PWM_Start+0x1fc>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d018      	beq.n	80054fc <HAL_TIM_PWM_Start+0x148>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a39      	ldr	r2, [pc, #228]	; (80055b4 <HAL_TIM_PWM_Start+0x200>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d013      	beq.n	80054fc <HAL_TIM_PWM_Start+0x148>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a37      	ldr	r2, [pc, #220]	; (80055b8 <HAL_TIM_PWM_Start+0x204>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00e      	beq.n	80054fc <HAL_TIM_PWM_Start+0x148>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a36      	ldr	r2, [pc, #216]	; (80055bc <HAL_TIM_PWM_Start+0x208>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d009      	beq.n	80054fc <HAL_TIM_PWM_Start+0x148>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a34      	ldr	r2, [pc, #208]	; (80055c0 <HAL_TIM_PWM_Start+0x20c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d004      	beq.n	80054fc <HAL_TIM_PWM_Start+0x148>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a33      	ldr	r2, [pc, #204]	; (80055c4 <HAL_TIM_PWM_Start+0x210>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d101      	bne.n	8005500 <HAL_TIM_PWM_Start+0x14c>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e000      	b.n	8005502 <HAL_TIM_PWM_Start+0x14e>
 8005500:	2300      	movs	r3, #0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005514:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a25      	ldr	r2, [pc, #148]	; (80055b0 <HAL_TIM_PWM_Start+0x1fc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d022      	beq.n	8005566 <HAL_TIM_PWM_Start+0x1b2>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005528:	d01d      	beq.n	8005566 <HAL_TIM_PWM_Start+0x1b2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a26      	ldr	r2, [pc, #152]	; (80055c8 <HAL_TIM_PWM_Start+0x214>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d018      	beq.n	8005566 <HAL_TIM_PWM_Start+0x1b2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a24      	ldr	r2, [pc, #144]	; (80055cc <HAL_TIM_PWM_Start+0x218>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d013      	beq.n	8005566 <HAL_TIM_PWM_Start+0x1b2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a23      	ldr	r2, [pc, #140]	; (80055d0 <HAL_TIM_PWM_Start+0x21c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00e      	beq.n	8005566 <HAL_TIM_PWM_Start+0x1b2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a19      	ldr	r2, [pc, #100]	; (80055b4 <HAL_TIM_PWM_Start+0x200>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d009      	beq.n	8005566 <HAL_TIM_PWM_Start+0x1b2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <HAL_TIM_PWM_Start+0x204>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d004      	beq.n	8005566 <HAL_TIM_PWM_Start+0x1b2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a18      	ldr	r2, [pc, #96]	; (80055c4 <HAL_TIM_PWM_Start+0x210>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d115      	bne.n	8005592 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	4b19      	ldr	r3, [pc, #100]	; (80055d4 <HAL_TIM_PWM_Start+0x220>)
 800556e:	4013      	ands	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b06      	cmp	r3, #6
 8005576:	d015      	beq.n	80055a4 <HAL_TIM_PWM_Start+0x1f0>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800557e:	d011      	beq.n	80055a4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005590:	e008      	b.n	80055a4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0201 	orr.w	r2, r2, #1
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	e000      	b.n	80055a6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40012c00 	.word	0x40012c00
 80055b4:	40013400 	.word	0x40013400
 80055b8:	40014000 	.word	0x40014000
 80055bc:	40014400 	.word	0x40014400
 80055c0:	40014800 	.word	0x40014800
 80055c4:	40015000 	.word	0x40015000
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40000800 	.word	0x40000800
 80055d0:	40000c00 	.word	0x40000c00
 80055d4:	00010007 	.word	0x00010007

080055d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e097      	b.n	800571c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7fb fe09 	bl	8001218 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2202      	movs	r2, #2
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800561c:	f023 0307 	bic.w	r3, r3, #7
 8005620:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3304      	adds	r3, #4
 800562a:	4619      	mov	r1, r3
 800562c:	4610      	mov	r0, r2
 800562e:	f000 fc1b 	bl	8005e68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800565a:	f023 0303 	bic.w	r3, r3, #3
 800565e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	021b      	lsls	r3, r3, #8
 800566a:	4313      	orrs	r3, r2
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005678:	f023 030c 	bic.w	r3, r3, #12
 800567c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	021b      	lsls	r3, r3, #8
 8005694:	4313      	orrs	r3, r2
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	011a      	lsls	r2, r3, #4
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	031b      	lsls	r3, r3, #12
 80056a8:	4313      	orrs	r3, r2
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80056b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80056be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	4313      	orrs	r3, r2
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d020      	beq.n	8005788 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01b      	beq.n	8005788 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f06f 0202 	mvn.w	r2, #2
 8005758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fb5c 	bl	8005e2c <HAL_TIM_IC_CaptureCallback>
 8005774:	e005      	b.n	8005782 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fb4e 	bl	8005e18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fb5f 	bl	8005e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f003 0304 	and.w	r3, r3, #4
 800578e:	2b00      	cmp	r3, #0
 8005790:	d020      	beq.n	80057d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01b      	beq.n	80057d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0204 	mvn.w	r2, #4
 80057a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2202      	movs	r2, #2
 80057aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fb36 	bl	8005e2c <HAL_TIM_IC_CaptureCallback>
 80057c0:	e005      	b.n	80057ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fb28 	bl	8005e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fb39 	bl	8005e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d020      	beq.n	8005820 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01b      	beq.n	8005820 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0208 	mvn.w	r2, #8
 80057f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2204      	movs	r2, #4
 80057f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fb10 	bl	8005e2c <HAL_TIM_IC_CaptureCallback>
 800580c:	e005      	b.n	800581a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fb02 	bl	8005e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fb13 	bl	8005e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 0310 	and.w	r3, r3, #16
 8005826:	2b00      	cmp	r3, #0
 8005828:	d020      	beq.n	800586c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f003 0310 	and.w	r3, r3, #16
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01b      	beq.n	800586c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0210 	mvn.w	r2, #16
 800583c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2208      	movs	r2, #8
 8005842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 faea 	bl	8005e2c <HAL_TIM_IC_CaptureCallback>
 8005858:	e005      	b.n	8005866 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fadc 	bl	8005e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 faed 	bl	8005e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00c      	beq.n	8005890 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d007      	beq.n	8005890 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f06f 0201 	mvn.w	r2, #1
 8005888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fb fa86 	bl	8000d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005896:	2b00      	cmp	r3, #0
 8005898:	d104      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00c      	beq.n	80058be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d007      	beq.n	80058be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80058b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f001 f8a9 	bl	8006a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00c      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d007      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80058da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f001 f8a1 	bl	8006a24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00c      	beq.n	8005906 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 faa7 	bl	8005e54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00c      	beq.n	800592a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f06f 0220 	mvn.w	r2, #32
 8005922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f001 f869 	bl	80069fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00c      	beq.n	800594e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d007      	beq.n	800594e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f001 f875 	bl	8006a38 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00c      	beq.n	8005972 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800596a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 f86d 	bl	8006a4c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00c      	beq.n	8005996 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800598e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 f865 	bl	8006a60 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00c      	beq.n	80059ba <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d007      	beq.n	80059ba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80059b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f001 f85d 	bl	8006a74 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059de:	2302      	movs	r3, #2
 80059e0:	e0ff      	b.n	8005be2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b14      	cmp	r3, #20
 80059ee:	f200 80f0 	bhi.w	8005bd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059f2:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a4d 	.word	0x08005a4d
 80059fc:	08005bd3 	.word	0x08005bd3
 8005a00:	08005bd3 	.word	0x08005bd3
 8005a04:	08005bd3 	.word	0x08005bd3
 8005a08:	08005a8d 	.word	0x08005a8d
 8005a0c:	08005bd3 	.word	0x08005bd3
 8005a10:	08005bd3 	.word	0x08005bd3
 8005a14:	08005bd3 	.word	0x08005bd3
 8005a18:	08005acf 	.word	0x08005acf
 8005a1c:	08005bd3 	.word	0x08005bd3
 8005a20:	08005bd3 	.word	0x08005bd3
 8005a24:	08005bd3 	.word	0x08005bd3
 8005a28:	08005b0f 	.word	0x08005b0f
 8005a2c:	08005bd3 	.word	0x08005bd3
 8005a30:	08005bd3 	.word	0x08005bd3
 8005a34:	08005bd3 	.word	0x08005bd3
 8005a38:	08005b51 	.word	0x08005b51
 8005a3c:	08005bd3 	.word	0x08005bd3
 8005a40:	08005bd3 	.word	0x08005bd3
 8005a44:	08005bd3 	.word	0x08005bd3
 8005a48:	08005b91 	.word	0x08005b91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fabc 	bl	8005fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0208 	orr.w	r2, r2, #8
 8005a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0204 	bic.w	r2, r2, #4
 8005a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6999      	ldr	r1, [r3, #24]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	691a      	ldr	r2, [r3, #16]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	619a      	str	r2, [r3, #24]
      break;
 8005a8a:	e0a5      	b.n	8005bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 fb36 	bl	8006104 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699a      	ldr	r2, [r3, #24]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6999      	ldr	r1, [r3, #24]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	021a      	lsls	r2, r3, #8
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	619a      	str	r2, [r3, #24]
      break;
 8005acc:	e084      	b.n	8005bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 fba9 	bl	800622c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0208 	orr.w	r2, r2, #8
 8005ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0204 	bic.w	r2, r2, #4
 8005af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69d9      	ldr	r1, [r3, #28]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	61da      	str	r2, [r3, #28]
      break;
 8005b0c:	e064      	b.n	8005bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fc1b 	bl	8006350 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69da      	ldr	r2, [r3, #28]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69d9      	ldr	r1, [r3, #28]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	021a      	lsls	r2, r3, #8
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	61da      	str	r2, [r3, #28]
      break;
 8005b4e:	e043      	b.n	8005bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68b9      	ldr	r1, [r7, #8]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fc8e 	bl	8006478 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0208 	orr.w	r2, r2, #8
 8005b6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0204 	bic.w	r2, r2, #4
 8005b7a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005b8e:	e023      	b.n	8005bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fcd8 	bl	800654c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005baa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	021a      	lsls	r2, r3, #8
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005bd0:	e002      	b.n	8005bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop

08005bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_TIM_ConfigClockSource+0x1c>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e0f6      	b.n	8005df6 <HAL_TIM_ConfigClockSource+0x20a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005c26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a6f      	ldr	r2, [pc, #444]	; (8005e00 <HAL_TIM_ConfigClockSource+0x214>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	f000 80c1 	beq.w	8005dca <HAL_TIM_ConfigClockSource+0x1de>
 8005c48:	4a6d      	ldr	r2, [pc, #436]	; (8005e00 <HAL_TIM_ConfigClockSource+0x214>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	f200 80c6 	bhi.w	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
 8005c50:	4a6c      	ldr	r2, [pc, #432]	; (8005e04 <HAL_TIM_ConfigClockSource+0x218>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	f000 80b9 	beq.w	8005dca <HAL_TIM_ConfigClockSource+0x1de>
 8005c58:	4a6a      	ldr	r2, [pc, #424]	; (8005e04 <HAL_TIM_ConfigClockSource+0x218>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	f200 80be 	bhi.w	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
 8005c60:	4a69      	ldr	r2, [pc, #420]	; (8005e08 <HAL_TIM_ConfigClockSource+0x21c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	f000 80b1 	beq.w	8005dca <HAL_TIM_ConfigClockSource+0x1de>
 8005c68:	4a67      	ldr	r2, [pc, #412]	; (8005e08 <HAL_TIM_ConfigClockSource+0x21c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	f200 80b6 	bhi.w	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
 8005c70:	4a66      	ldr	r2, [pc, #408]	; (8005e0c <HAL_TIM_ConfigClockSource+0x220>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	f000 80a9 	beq.w	8005dca <HAL_TIM_ConfigClockSource+0x1de>
 8005c78:	4a64      	ldr	r2, [pc, #400]	; (8005e0c <HAL_TIM_ConfigClockSource+0x220>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	f200 80ae 	bhi.w	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
 8005c80:	4a63      	ldr	r2, [pc, #396]	; (8005e10 <HAL_TIM_ConfigClockSource+0x224>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	f000 80a1 	beq.w	8005dca <HAL_TIM_ConfigClockSource+0x1de>
 8005c88:	4a61      	ldr	r2, [pc, #388]	; (8005e10 <HAL_TIM_ConfigClockSource+0x224>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	f200 80a6 	bhi.w	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
 8005c90:	4a60      	ldr	r2, [pc, #384]	; (8005e14 <HAL_TIM_ConfigClockSource+0x228>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	f000 8099 	beq.w	8005dca <HAL_TIM_ConfigClockSource+0x1de>
 8005c98:	4a5e      	ldr	r2, [pc, #376]	; (8005e14 <HAL_TIM_ConfigClockSource+0x228>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	f200 809e 	bhi.w	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
 8005ca0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005ca4:	f000 8091 	beq.w	8005dca <HAL_TIM_ConfigClockSource+0x1de>
 8005ca8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005cac:	f200 8096 	bhi.w	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
 8005cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cb4:	f000 8089 	beq.w	8005dca <HAL_TIM_ConfigClockSource+0x1de>
 8005cb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cbc:	f200 808e 	bhi.w	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
 8005cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cc4:	d03e      	beq.n	8005d44 <HAL_TIM_ConfigClockSource+0x158>
 8005cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cca:	f200 8087 	bhi.w	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
 8005cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd2:	f000 8086 	beq.w	8005de2 <HAL_TIM_ConfigClockSource+0x1f6>
 8005cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cda:	d87f      	bhi.n	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
 8005cdc:	2b70      	cmp	r3, #112	; 0x70
 8005cde:	d01a      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x12a>
 8005ce0:	2b70      	cmp	r3, #112	; 0x70
 8005ce2:	d87b      	bhi.n	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
 8005ce4:	2b60      	cmp	r3, #96	; 0x60
 8005ce6:	d050      	beq.n	8005d8a <HAL_TIM_ConfigClockSource+0x19e>
 8005ce8:	2b60      	cmp	r3, #96	; 0x60
 8005cea:	d877      	bhi.n	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
 8005cec:	2b50      	cmp	r3, #80	; 0x50
 8005cee:	d03c      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x17e>
 8005cf0:	2b50      	cmp	r3, #80	; 0x50
 8005cf2:	d873      	bhi.n	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
 8005cf4:	2b40      	cmp	r3, #64	; 0x40
 8005cf6:	d058      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x1be>
 8005cf8:	2b40      	cmp	r3, #64	; 0x40
 8005cfa:	d86f      	bhi.n	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
 8005cfc:	2b30      	cmp	r3, #48	; 0x30
 8005cfe:	d064      	beq.n	8005dca <HAL_TIM_ConfigClockSource+0x1de>
 8005d00:	2b30      	cmp	r3, #48	; 0x30
 8005d02:	d86b      	bhi.n	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	d060      	beq.n	8005dca <HAL_TIM_ConfigClockSource+0x1de>
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d867      	bhi.n	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d05c      	beq.n	8005dca <HAL_TIM_ConfigClockSource+0x1de>
 8005d10:	2b10      	cmp	r3, #16
 8005d12:	d05a      	beq.n	8005dca <HAL_TIM_ConfigClockSource+0x1de>
 8005d14:	e062      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d26:	f000 fcf9 	bl	800671c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	609a      	str	r2, [r3, #8]
      break;
 8005d42:	e04f      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d54:	f000 fce2 	bl	800671c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d66:	609a      	str	r2, [r3, #8]
      break;
 8005d68:	e03c      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d76:	461a      	mov	r2, r3
 8005d78:	f000 fc54 	bl	8006624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2150      	movs	r1, #80	; 0x50
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fcad 	bl	80066e2 <TIM_ITRx_SetConfig>
      break;
 8005d88:	e02c      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d96:	461a      	mov	r2, r3
 8005d98:	f000 fc73 	bl	8006682 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2160      	movs	r1, #96	; 0x60
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fc9d 	bl	80066e2 <TIM_ITRx_SetConfig>
      break;
 8005da8:	e01c      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db6:	461a      	mov	r2, r3
 8005db8:	f000 fc34 	bl	8006624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2140      	movs	r1, #64	; 0x40
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fc8d 	bl	80066e2 <TIM_ITRx_SetConfig>
      break;
 8005dc8:	e00c      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	f000 fc84 	bl	80066e2 <TIM_ITRx_SetConfig>
      break;
 8005dda:	e003      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	73fb      	strb	r3, [r7, #15]
      break;
 8005de0:	e000      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005de2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	00100070 	.word	0x00100070
 8005e04:	00100060 	.word	0x00100060
 8005e08:	00100050 	.word	0x00100050
 8005e0c:	00100040 	.word	0x00100040
 8005e10:	00100030 	.word	0x00100030
 8005e14:	00100020 	.word	0x00100020

08005e18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a4c      	ldr	r2, [pc, #304]	; (8005fac <TIM_Base_SetConfig+0x144>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d017      	beq.n	8005eb0 <TIM_Base_SetConfig+0x48>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e86:	d013      	beq.n	8005eb0 <TIM_Base_SetConfig+0x48>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a49      	ldr	r2, [pc, #292]	; (8005fb0 <TIM_Base_SetConfig+0x148>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00f      	beq.n	8005eb0 <TIM_Base_SetConfig+0x48>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a48      	ldr	r2, [pc, #288]	; (8005fb4 <TIM_Base_SetConfig+0x14c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00b      	beq.n	8005eb0 <TIM_Base_SetConfig+0x48>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a47      	ldr	r2, [pc, #284]	; (8005fb8 <TIM_Base_SetConfig+0x150>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d007      	beq.n	8005eb0 <TIM_Base_SetConfig+0x48>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a46      	ldr	r2, [pc, #280]	; (8005fbc <TIM_Base_SetConfig+0x154>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d003      	beq.n	8005eb0 <TIM_Base_SetConfig+0x48>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a45      	ldr	r2, [pc, #276]	; (8005fc0 <TIM_Base_SetConfig+0x158>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d108      	bne.n	8005ec2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a39      	ldr	r2, [pc, #228]	; (8005fac <TIM_Base_SetConfig+0x144>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d023      	beq.n	8005f12 <TIM_Base_SetConfig+0xaa>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed0:	d01f      	beq.n	8005f12 <TIM_Base_SetConfig+0xaa>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a36      	ldr	r2, [pc, #216]	; (8005fb0 <TIM_Base_SetConfig+0x148>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d01b      	beq.n	8005f12 <TIM_Base_SetConfig+0xaa>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a35      	ldr	r2, [pc, #212]	; (8005fb4 <TIM_Base_SetConfig+0x14c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d017      	beq.n	8005f12 <TIM_Base_SetConfig+0xaa>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a34      	ldr	r2, [pc, #208]	; (8005fb8 <TIM_Base_SetConfig+0x150>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <TIM_Base_SetConfig+0xaa>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a33      	ldr	r2, [pc, #204]	; (8005fbc <TIM_Base_SetConfig+0x154>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00f      	beq.n	8005f12 <TIM_Base_SetConfig+0xaa>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a33      	ldr	r2, [pc, #204]	; (8005fc4 <TIM_Base_SetConfig+0x15c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00b      	beq.n	8005f12 <TIM_Base_SetConfig+0xaa>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a32      	ldr	r2, [pc, #200]	; (8005fc8 <TIM_Base_SetConfig+0x160>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d007      	beq.n	8005f12 <TIM_Base_SetConfig+0xaa>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a31      	ldr	r2, [pc, #196]	; (8005fcc <TIM_Base_SetConfig+0x164>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d003      	beq.n	8005f12 <TIM_Base_SetConfig+0xaa>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a2c      	ldr	r2, [pc, #176]	; (8005fc0 <TIM_Base_SetConfig+0x158>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d108      	bne.n	8005f24 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a18      	ldr	r2, [pc, #96]	; (8005fac <TIM_Base_SetConfig+0x144>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d013      	beq.n	8005f78 <TIM_Base_SetConfig+0x110>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a1a      	ldr	r2, [pc, #104]	; (8005fbc <TIM_Base_SetConfig+0x154>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00f      	beq.n	8005f78 <TIM_Base_SetConfig+0x110>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a1a      	ldr	r2, [pc, #104]	; (8005fc4 <TIM_Base_SetConfig+0x15c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00b      	beq.n	8005f78 <TIM_Base_SetConfig+0x110>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a19      	ldr	r2, [pc, #100]	; (8005fc8 <TIM_Base_SetConfig+0x160>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d007      	beq.n	8005f78 <TIM_Base_SetConfig+0x110>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a18      	ldr	r2, [pc, #96]	; (8005fcc <TIM_Base_SetConfig+0x164>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_Base_SetConfig+0x110>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a13      	ldr	r2, [pc, #76]	; (8005fc0 <TIM_Base_SetConfig+0x158>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d103      	bne.n	8005f80 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d105      	bne.n	8005f9e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f023 0201 	bic.w	r2, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	611a      	str	r2, [r3, #16]
  }
}
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	40012c00 	.word	0x40012c00
 8005fb0:	40000400 	.word	0x40000400
 8005fb4:	40000800 	.word	0x40000800
 8005fb8:	40000c00 	.word	0x40000c00
 8005fbc:	40013400 	.word	0x40013400
 8005fc0:	40015000 	.word	0x40015000
 8005fc4:	40014000 	.word	0x40014000
 8005fc8:	40014400 	.word	0x40014400
 8005fcc:	40014800 	.word	0x40014800

08005fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	f023 0201 	bic.w	r2, r3, #1
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0303 	bic.w	r3, r3, #3
 800600a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f023 0302 	bic.w	r3, r3, #2
 800601c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	4313      	orrs	r3, r2
 8006026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a30      	ldr	r2, [pc, #192]	; (80060ec <TIM_OC1_SetConfig+0x11c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d013      	beq.n	8006058 <TIM_OC1_SetConfig+0x88>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a2f      	ldr	r2, [pc, #188]	; (80060f0 <TIM_OC1_SetConfig+0x120>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00f      	beq.n	8006058 <TIM_OC1_SetConfig+0x88>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a2e      	ldr	r2, [pc, #184]	; (80060f4 <TIM_OC1_SetConfig+0x124>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d00b      	beq.n	8006058 <TIM_OC1_SetConfig+0x88>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a2d      	ldr	r2, [pc, #180]	; (80060f8 <TIM_OC1_SetConfig+0x128>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d007      	beq.n	8006058 <TIM_OC1_SetConfig+0x88>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a2c      	ldr	r2, [pc, #176]	; (80060fc <TIM_OC1_SetConfig+0x12c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_OC1_SetConfig+0x88>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a2b      	ldr	r2, [pc, #172]	; (8006100 <TIM_OC1_SetConfig+0x130>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d10c      	bne.n	8006072 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f023 0308 	bic.w	r3, r3, #8
 800605e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f023 0304 	bic.w	r3, r3, #4
 8006070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a1d      	ldr	r2, [pc, #116]	; (80060ec <TIM_OC1_SetConfig+0x11c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <TIM_OC1_SetConfig+0xd2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a1c      	ldr	r2, [pc, #112]	; (80060f0 <TIM_OC1_SetConfig+0x120>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00f      	beq.n	80060a2 <TIM_OC1_SetConfig+0xd2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a1b      	ldr	r2, [pc, #108]	; (80060f4 <TIM_OC1_SetConfig+0x124>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00b      	beq.n	80060a2 <TIM_OC1_SetConfig+0xd2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a1a      	ldr	r2, [pc, #104]	; (80060f8 <TIM_OC1_SetConfig+0x128>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d007      	beq.n	80060a2 <TIM_OC1_SetConfig+0xd2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a19      	ldr	r2, [pc, #100]	; (80060fc <TIM_OC1_SetConfig+0x12c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_OC1_SetConfig+0xd2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a18      	ldr	r2, [pc, #96]	; (8006100 <TIM_OC1_SetConfig+0x130>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d111      	bne.n	80060c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	621a      	str	r2, [r3, #32]
}
 80060e0:	bf00      	nop
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	40012c00 	.word	0x40012c00
 80060f0:	40013400 	.word	0x40013400
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40014400 	.word	0x40014400
 80060fc:	40014800 	.word	0x40014800
 8006100:	40015000 	.word	0x40015000

08006104 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	f023 0210 	bic.w	r2, r3, #16
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800613e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	021b      	lsls	r3, r3, #8
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f023 0320 	bic.w	r3, r3, #32
 8006152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a2c      	ldr	r2, [pc, #176]	; (8006214 <TIM_OC2_SetConfig+0x110>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d007      	beq.n	8006178 <TIM_OC2_SetConfig+0x74>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a2b      	ldr	r2, [pc, #172]	; (8006218 <TIM_OC2_SetConfig+0x114>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d003      	beq.n	8006178 <TIM_OC2_SetConfig+0x74>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a2a      	ldr	r2, [pc, #168]	; (800621c <TIM_OC2_SetConfig+0x118>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d10d      	bne.n	8006194 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800617e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006192:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a1f      	ldr	r2, [pc, #124]	; (8006214 <TIM_OC2_SetConfig+0x110>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d013      	beq.n	80061c4 <TIM_OC2_SetConfig+0xc0>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a1e      	ldr	r2, [pc, #120]	; (8006218 <TIM_OC2_SetConfig+0x114>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d00f      	beq.n	80061c4 <TIM_OC2_SetConfig+0xc0>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a1e      	ldr	r2, [pc, #120]	; (8006220 <TIM_OC2_SetConfig+0x11c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00b      	beq.n	80061c4 <TIM_OC2_SetConfig+0xc0>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a1d      	ldr	r2, [pc, #116]	; (8006224 <TIM_OC2_SetConfig+0x120>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d007      	beq.n	80061c4 <TIM_OC2_SetConfig+0xc0>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a1c      	ldr	r2, [pc, #112]	; (8006228 <TIM_OC2_SetConfig+0x124>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d003      	beq.n	80061c4 <TIM_OC2_SetConfig+0xc0>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a17      	ldr	r2, [pc, #92]	; (800621c <TIM_OC2_SetConfig+0x118>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d113      	bne.n	80061ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40012c00 	.word	0x40012c00
 8006218:	40013400 	.word	0x40013400
 800621c:	40015000 	.word	0x40015000
 8006220:	40014000 	.word	0x40014000
 8006224:	40014400 	.word	0x40014400
 8006228:	40014800 	.word	0x40014800

0800622c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0303 	bic.w	r3, r3, #3
 8006266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a2b      	ldr	r2, [pc, #172]	; (8006338 <TIM_OC3_SetConfig+0x10c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d007      	beq.n	800629e <TIM_OC3_SetConfig+0x72>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a2a      	ldr	r2, [pc, #168]	; (800633c <TIM_OC3_SetConfig+0x110>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d003      	beq.n	800629e <TIM_OC3_SetConfig+0x72>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a29      	ldr	r2, [pc, #164]	; (8006340 <TIM_OC3_SetConfig+0x114>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d10d      	bne.n	80062ba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	021b      	lsls	r3, r3, #8
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a1e      	ldr	r2, [pc, #120]	; (8006338 <TIM_OC3_SetConfig+0x10c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d013      	beq.n	80062ea <TIM_OC3_SetConfig+0xbe>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a1d      	ldr	r2, [pc, #116]	; (800633c <TIM_OC3_SetConfig+0x110>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d00f      	beq.n	80062ea <TIM_OC3_SetConfig+0xbe>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a1d      	ldr	r2, [pc, #116]	; (8006344 <TIM_OC3_SetConfig+0x118>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d00b      	beq.n	80062ea <TIM_OC3_SetConfig+0xbe>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <TIM_OC3_SetConfig+0x11c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d007      	beq.n	80062ea <TIM_OC3_SetConfig+0xbe>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a1b      	ldr	r2, [pc, #108]	; (800634c <TIM_OC3_SetConfig+0x120>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d003      	beq.n	80062ea <TIM_OC3_SetConfig+0xbe>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a16      	ldr	r2, [pc, #88]	; (8006340 <TIM_OC3_SetConfig+0x114>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d113      	bne.n	8006312 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	621a      	str	r2, [r3, #32]
}
 800632c:	bf00      	nop
 800632e:	371c      	adds	r7, #28
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	40012c00 	.word	0x40012c00
 800633c:	40013400 	.word	0x40013400
 8006340:	40015000 	.word	0x40015000
 8006344:	40014000 	.word	0x40014000
 8006348:	40014400 	.word	0x40014400
 800634c:	40014800 	.word	0x40014800

08006350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800637e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4313      	orrs	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800639e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	031b      	lsls	r3, r3, #12
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a2c      	ldr	r2, [pc, #176]	; (8006460 <TIM_OC4_SetConfig+0x110>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d007      	beq.n	80063c4 <TIM_OC4_SetConfig+0x74>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a2b      	ldr	r2, [pc, #172]	; (8006464 <TIM_OC4_SetConfig+0x114>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <TIM_OC4_SetConfig+0x74>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a2a      	ldr	r2, [pc, #168]	; (8006468 <TIM_OC4_SetConfig+0x118>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d10d      	bne.n	80063e0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	031b      	lsls	r3, r3, #12
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a1f      	ldr	r2, [pc, #124]	; (8006460 <TIM_OC4_SetConfig+0x110>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d013      	beq.n	8006410 <TIM_OC4_SetConfig+0xc0>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a1e      	ldr	r2, [pc, #120]	; (8006464 <TIM_OC4_SetConfig+0x114>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00f      	beq.n	8006410 <TIM_OC4_SetConfig+0xc0>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a1e      	ldr	r2, [pc, #120]	; (800646c <TIM_OC4_SetConfig+0x11c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00b      	beq.n	8006410 <TIM_OC4_SetConfig+0xc0>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a1d      	ldr	r2, [pc, #116]	; (8006470 <TIM_OC4_SetConfig+0x120>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d007      	beq.n	8006410 <TIM_OC4_SetConfig+0xc0>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a1c      	ldr	r2, [pc, #112]	; (8006474 <TIM_OC4_SetConfig+0x124>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_OC4_SetConfig+0xc0>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a17      	ldr	r2, [pc, #92]	; (8006468 <TIM_OC4_SetConfig+0x118>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d113      	bne.n	8006438 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006416:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800641e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	019b      	lsls	r3, r3, #6
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	019b      	lsls	r3, r3, #6
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	621a      	str	r2, [r3, #32]
}
 8006452:	bf00      	nop
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	40012c00 	.word	0x40012c00
 8006464:	40013400 	.word	0x40013400
 8006468:	40015000 	.word	0x40015000
 800646c:	40014000 	.word	0x40014000
 8006470:	40014400 	.word	0x40014400
 8006474:	40014800 	.word	0x40014800

08006478 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	041b      	lsls	r3, r3, #16
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a19      	ldr	r2, [pc, #100]	; (8006534 <TIM_OC5_SetConfig+0xbc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d013      	beq.n	80064fa <TIM_OC5_SetConfig+0x82>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a18      	ldr	r2, [pc, #96]	; (8006538 <TIM_OC5_SetConfig+0xc0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00f      	beq.n	80064fa <TIM_OC5_SetConfig+0x82>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a17      	ldr	r2, [pc, #92]	; (800653c <TIM_OC5_SetConfig+0xc4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00b      	beq.n	80064fa <TIM_OC5_SetConfig+0x82>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a16      	ldr	r2, [pc, #88]	; (8006540 <TIM_OC5_SetConfig+0xc8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d007      	beq.n	80064fa <TIM_OC5_SetConfig+0x82>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a15      	ldr	r2, [pc, #84]	; (8006544 <TIM_OC5_SetConfig+0xcc>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d003      	beq.n	80064fa <TIM_OC5_SetConfig+0x82>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a14      	ldr	r2, [pc, #80]	; (8006548 <TIM_OC5_SetConfig+0xd0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d109      	bne.n	800650e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006500:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	621a      	str	r2, [r3, #32]
}
 8006528:	bf00      	nop
 800652a:	371c      	adds	r7, #28
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	40012c00 	.word	0x40012c00
 8006538:	40013400 	.word	0x40013400
 800653c:	40014000 	.word	0x40014000
 8006540:	40014400 	.word	0x40014400
 8006544:	40014800 	.word	0x40014800
 8006548:	40015000 	.word	0x40015000

0800654c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800657a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800657e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	021b      	lsls	r3, r3, #8
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006592:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	051b      	lsls	r3, r3, #20
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a1a      	ldr	r2, [pc, #104]	; (800660c <TIM_OC6_SetConfig+0xc0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d013      	beq.n	80065d0 <TIM_OC6_SetConfig+0x84>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a19      	ldr	r2, [pc, #100]	; (8006610 <TIM_OC6_SetConfig+0xc4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00f      	beq.n	80065d0 <TIM_OC6_SetConfig+0x84>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a18      	ldr	r2, [pc, #96]	; (8006614 <TIM_OC6_SetConfig+0xc8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00b      	beq.n	80065d0 <TIM_OC6_SetConfig+0x84>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a17      	ldr	r2, [pc, #92]	; (8006618 <TIM_OC6_SetConfig+0xcc>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d007      	beq.n	80065d0 <TIM_OC6_SetConfig+0x84>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a16      	ldr	r2, [pc, #88]	; (800661c <TIM_OC6_SetConfig+0xd0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d003      	beq.n	80065d0 <TIM_OC6_SetConfig+0x84>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a15      	ldr	r2, [pc, #84]	; (8006620 <TIM_OC6_SetConfig+0xd4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d109      	bne.n	80065e4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	029b      	lsls	r3, r3, #10
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	621a      	str	r2, [r3, #32]
}
 80065fe:	bf00      	nop
 8006600:	371c      	adds	r7, #28
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	40012c00 	.word	0x40012c00
 8006610:	40013400 	.word	0x40013400
 8006614:	40014000 	.word	0x40014000
 8006618:	40014400 	.word	0x40014400
 800661c:	40014800 	.word	0x40014800
 8006620:	40015000 	.word	0x40015000

08006624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f023 0201 	bic.w	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800664e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f023 030a 	bic.w	r3, r3, #10
 8006660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	621a      	str	r2, [r3, #32]
}
 8006676:	bf00      	nop
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006682:	b480      	push	{r7}
 8006684:	b087      	sub	sp, #28
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f023 0210 	bic.w	r2, r3, #16
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	031b      	lsls	r3, r3, #12
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	621a      	str	r2, [r3, #32]
}
 80066d6:	bf00      	nop
 80066d8:	371c      	adds	r7, #28
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b085      	sub	sp, #20
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80066f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	f043 0307 	orr.w	r3, r3, #7
 8006708:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	609a      	str	r2, [r3, #8]
}
 8006710:	bf00      	nop
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006736:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	021a      	lsls	r2, r3, #8
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	431a      	orrs	r2, r3
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4313      	orrs	r3, r2
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	609a      	str	r2, [r3, #8]
}
 8006750:	bf00      	nop
 8006752:	371c      	adds	r7, #28
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f003 031f 	and.w	r3, r3, #31
 800676e:	2201      	movs	r2, #1
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6a1a      	ldr	r2, [r3, #32]
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	43db      	mvns	r3, r3
 800677e:	401a      	ands	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6a1a      	ldr	r2, [r3, #32]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f003 031f 	and.w	r3, r3, #31
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	fa01 f303 	lsl.w	r3, r1, r3
 8006794:	431a      	orrs	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	621a      	str	r2, [r3, #32]
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
	...

080067a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d101      	bne.n	80067c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067bc:	2302      	movs	r3, #2
 80067be:	e074      	b.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a34      	ldr	r2, [pc, #208]	; (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d009      	beq.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a33      	ldr	r2, [pc, #204]	; (80068bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d004      	beq.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a31      	ldr	r2, [pc, #196]	; (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d108      	bne.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006804:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a21      	ldr	r2, [pc, #132]	; (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d022      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006840:	d01d      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1f      	ldr	r2, [pc, #124]	; (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d018      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a1d      	ldr	r2, [pc, #116]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1c      	ldr	r2, [pc, #112]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00e      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a15      	ldr	r2, [pc, #84]	; (80068bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d009      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a18      	ldr	r2, [pc, #96]	; (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d004      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a11      	ldr	r2, [pc, #68]	; (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d10c      	bne.n	8006898 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	4313      	orrs	r3, r2
 800688e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40012c00 	.word	0x40012c00
 80068bc:	40013400 	.word	0x40013400
 80068c0:	40015000 	.word	0x40015000
 80068c4:	40000400 	.word	0x40000400
 80068c8:	40000800 	.word	0x40000800
 80068cc:	40000c00 	.word	0x40000c00
 80068d0:	40014000 	.word	0x40014000

080068d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e078      	b.n	80069e2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	4313      	orrs	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	041b      	lsls	r3, r3, #16
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a1c      	ldr	r2, [pc, #112]	; (80069f0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d009      	beq.n	8006996 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a1b      	ldr	r2, [pc, #108]	; (80069f4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d004      	beq.n	8006996 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a19      	ldr	r2, [pc, #100]	; (80069f8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d11c      	bne.n	80069d0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a0:	051b      	lsls	r3, r3, #20
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	4313      	orrs	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	40012c00 	.word	0x40012c00
 80069f4:	40013400 	.word	0x40013400
 80069f8:	40015000 	.word	0x40015000

080069fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e042      	b.n	8006b20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d106      	bne.n	8006ab2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7fa fcc1 	bl	8001434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2224      	movs	r2, #36	; 0x24
 8006ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0201 	bic.w	r2, r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d002      	beq.n	8006ad8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fef2 	bl	80078bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fbf3 	bl	80072c4 <UART_SetConfig>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d101      	bne.n	8006ae8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e01b      	b.n	8006b20 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006af6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0201 	orr.w	r2, r2, #1
 8006b16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 ff71 	bl	8007a00 <UART_CheckIdleState>
 8006b1e:	4603      	mov	r3, r0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08a      	sub	sp, #40	; 0x28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	4613      	mov	r3, r2
 8006b34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3c:	2b20      	cmp	r3, #32
 8006b3e:	d167      	bne.n	8006c10 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <HAL_UART_Transmit_DMA+0x24>
 8006b46:	88fb      	ldrh	r3, [r7, #6]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e060      	b.n	8006c12 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	88fa      	ldrh	r2, [r7, #6]
 8006b5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	88fa      	ldrh	r2, [r7, #6]
 8006b62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2221      	movs	r2, #33	; 0x21
 8006b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d028      	beq.n	8006bd0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b82:	4a26      	ldr	r2, [pc, #152]	; (8006c1c <HAL_UART_Transmit_DMA+0xf4>)
 8006b84:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b8a:	4a25      	ldr	r2, [pc, #148]	; (8006c20 <HAL_UART_Transmit_DMA+0xf8>)
 8006b8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b92:	4a24      	ldr	r2, [pc, #144]	; (8006c24 <HAL_UART_Transmit_DMA+0xfc>)
 8006b94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3328      	adds	r3, #40	; 0x28
 8006bae:	461a      	mov	r2, r3
 8006bb0:	88fb      	ldrh	r3, [r7, #6]
 8006bb2:	f7fc fdef 	bl	8003794 <HAL_DMA_Start_IT>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d009      	beq.n	8006bd0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2210      	movs	r2, #16
 8006bc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e020      	b.n	8006c12 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2240      	movs	r2, #64	; 0x40
 8006bd6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3308      	adds	r3, #8
 8006bde:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	613b      	str	r3, [r7, #16]
   return(result);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf8:	623a      	str	r2, [r7, #32]
 8006bfa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	69f9      	ldr	r1, [r7, #28]
 8006bfe:	6a3a      	ldr	r2, [r7, #32]
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e5      	bne.n	8006bd8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	e000      	b.n	8006c12 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006c10:	2302      	movs	r3, #2
  }
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3728      	adds	r7, #40	; 0x28
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	08007d7d 	.word	0x08007d7d
 8006c20:	08007e17 	.word	0x08007e17
 8006c24:	08007e33 	.word	0x08007e33

08006c28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b0ba      	sub	sp, #232	; 0xe8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c52:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c56:	4013      	ands	r3, r2
 8006c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d11b      	bne.n	8006c9c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c68:	f003 0320 	and.w	r3, r3, #32
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d015      	beq.n	8006c9c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c74:	f003 0320 	and.w	r3, r3, #32
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d105      	bne.n	8006c88 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d009      	beq.n	8006c9c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 82e3 	beq.w	8007258 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	4798      	blx	r3
      }
      return;
 8006c9a:	e2dd      	b.n	8007258 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8123 	beq.w	8006eec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ca6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006caa:	4b8d      	ldr	r3, [pc, #564]	; (8006ee0 <HAL_UART_IRQHandler+0x2b8>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006cb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006cb6:	4b8b      	ldr	r3, [pc, #556]	; (8006ee4 <HAL_UART_IRQHandler+0x2bc>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 8116 	beq.w	8006eec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d011      	beq.n	8006cf0 <HAL_UART_IRQHandler+0xc8>
 8006ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce6:	f043 0201 	orr.w	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d011      	beq.n	8006d20 <HAL_UART_IRQHandler+0xf8>
 8006cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00b      	beq.n	8006d20 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d16:	f043 0204 	orr.w	r2, r3, #4
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d011      	beq.n	8006d50 <HAL_UART_IRQHandler+0x128>
 8006d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00b      	beq.n	8006d50 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2204      	movs	r2, #4
 8006d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d46:	f043 0202 	orr.w	r2, r3, #2
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d54:	f003 0308 	and.w	r3, r3, #8
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d017      	beq.n	8006d8c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d105      	bne.n	8006d74 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d6c:	4b5c      	ldr	r3, [pc, #368]	; (8006ee0 <HAL_UART_IRQHandler+0x2b8>)
 8006d6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00b      	beq.n	8006d8c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2208      	movs	r2, #8
 8006d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d82:	f043 0208 	orr.w	r2, r3, #8
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d012      	beq.n	8006dbe <HAL_UART_IRQHandler+0x196>
 8006d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00c      	beq.n	8006dbe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db4:	f043 0220 	orr.w	r2, r3, #32
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 8249 	beq.w	800725c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d013      	beq.n	8006dfe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d105      	bne.n	8006dee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d007      	beq.n	8006dfe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e12:	2b40      	cmp	r3, #64	; 0x40
 8006e14:	d005      	beq.n	8006e22 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d054      	beq.n	8006ecc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 ff44 	bl	8007cb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e32:	2b40      	cmp	r3, #64	; 0x40
 8006e34:	d146      	bne.n	8006ec4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3308      	adds	r3, #8
 8006e5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1d9      	bne.n	8006e36 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d017      	beq.n	8006ebc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e92:	4a15      	ldr	r2, [pc, #84]	; (8006ee8 <HAL_UART_IRQHandler+0x2c0>)
 8006e94:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fc fd4d 	bl	800393c <HAL_DMA_Abort_IT>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d019      	beq.n	8006edc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eba:	e00f      	b.n	8006edc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f9eb 	bl	8007298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec2:	e00b      	b.n	8006edc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f9e7 	bl	8007298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eca:	e007      	b.n	8006edc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f9e3 	bl	8007298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006eda:	e1bf      	b.n	800725c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006edc:	bf00      	nop
    return;
 8006ede:	e1bd      	b.n	800725c <HAL_UART_IRQHandler+0x634>
 8006ee0:	10000001 	.word	0x10000001
 8006ee4:	04000120 	.word	0x04000120
 8006ee8:	08007eb3 	.word	0x08007eb3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	f040 8153 	bne.w	800719c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efa:	f003 0310 	and.w	r3, r3, #16
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 814c 	beq.w	800719c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 8145 	beq.w	800719c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2210      	movs	r2, #16
 8006f18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	f040 80bb 	bne.w	80070a0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 818f 	beq.w	8007260 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	f080 8187 	bcs.w	8007260 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 8087 	bne.w	800707e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f7c:	e853 3f00 	ldrex	r3, [r3]
 8006f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	461a      	mov	r2, r3
 8006f96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006faa:	e841 2300 	strex	r3, r2, [r1]
 8006fae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1da      	bne.n	8006f70 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fcc:	f023 0301 	bic.w	r3, r3, #1
 8006fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fe2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fe6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e1      	bne.n	8006fba <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007000:	e853 3f00 	ldrex	r3, [r3]
 8007004:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800700c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3308      	adds	r3, #8
 8007016:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800701a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800701c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007020:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007022:	e841 2300 	strex	r3, r2, [r1]
 8007026:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1e3      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2220      	movs	r2, #32
 8007032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800704a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800704c:	f023 0310 	bic.w	r3, r3, #16
 8007050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	461a      	mov	r2, r3
 800705a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800705e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007060:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007064:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800706c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1e4      	bne.n	800703c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007078:	4618      	mov	r0, r3
 800707a:	f7fc fc06 	bl	800388a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007090:	b29b      	uxth	r3, r3
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	b29b      	uxth	r3, r3
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f907 	bl	80072ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800709e:	e0df      	b.n	8007260 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 80d1 	beq.w	8007264 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80070c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 80cc 	beq.w	8007264 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	461a      	mov	r2, r3
 80070ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070ee:	647b      	str	r3, [r7, #68]	; 0x44
 80070f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e4      	bne.n	80070cc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3308      	adds	r3, #8
 8007108:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	623b      	str	r3, [r7, #32]
   return(result);
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007118:	f023 0301 	bic.w	r3, r3, #1
 800711c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800712a:	633a      	str	r2, [r7, #48]	; 0x30
 800712c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1e1      	bne.n	8007102 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2220      	movs	r2, #32
 8007142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0310 	bic.w	r3, r3, #16
 8007166:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007174:	61fb      	str	r3, [r7, #28]
 8007176:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	69b9      	ldr	r1, [r7, #24]
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	617b      	str	r3, [r7, #20]
   return(result);
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e4      	bne.n	8007152 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800718e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f889 	bl	80072ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800719a:	e063      	b.n	8007264 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800719c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00e      	beq.n	80071c6 <HAL_UART_IRQHandler+0x59e>
 80071a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d008      	beq.n	80071c6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80071bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 feb8 	bl	8007f34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071c4:	e051      	b.n	800726a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80071c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d014      	beq.n	80071fc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80071d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d105      	bne.n	80071ea <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80071de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d008      	beq.n	80071fc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d03a      	beq.n	8007268 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	4798      	blx	r3
    }
    return;
 80071fa:	e035      	b.n	8007268 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007204:	2b00      	cmp	r3, #0
 8007206:	d009      	beq.n	800721c <HAL_UART_IRQHandler+0x5f4>
 8007208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800720c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fe62 	bl	8007ede <UART_EndTransmit_IT>
    return;
 800721a:	e026      	b.n	800726a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800721c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007220:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d009      	beq.n	800723c <HAL_UART_IRQHandler+0x614>
 8007228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800722c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fe91 	bl	8007f5c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800723a:	e016      	b.n	800726a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800723c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d010      	beq.n	800726a <HAL_UART_IRQHandler+0x642>
 8007248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800724c:	2b00      	cmp	r3, #0
 800724e:	da0c      	bge.n	800726a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fe79 	bl	8007f48 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007256:	e008      	b.n	800726a <HAL_UART_IRQHandler+0x642>
      return;
 8007258:	bf00      	nop
 800725a:	e006      	b.n	800726a <HAL_UART_IRQHandler+0x642>
    return;
 800725c:	bf00      	nop
 800725e:	e004      	b.n	800726a <HAL_UART_IRQHandler+0x642>
      return;
 8007260:	bf00      	nop
 8007262:	e002      	b.n	800726a <HAL_UART_IRQHandler+0x642>
      return;
 8007264:	bf00      	nop
 8007266:	e000      	b.n	800726a <HAL_UART_IRQHandler+0x642>
    return;
 8007268:	bf00      	nop
  }
}
 800726a:	37e8      	adds	r7, #232	; 0xe8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072c8:	b08c      	sub	sp, #48	; 0x30
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	689a      	ldr	r2, [r3, #8]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	431a      	orrs	r2, r3
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	431a      	orrs	r2, r3
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	4baa      	ldr	r3, [pc, #680]	; (800759c <UART_SetConfig+0x2d8>)
 80072f4:	4013      	ands	r3, r2
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	6812      	ldr	r2, [r2, #0]
 80072fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072fc:	430b      	orrs	r3, r1
 80072fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a9f      	ldr	r2, [pc, #636]	; (80075a0 <UART_SetConfig+0x2dc>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d004      	beq.n	8007330 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800732c:	4313      	orrs	r3, r2
 800732e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800733a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	6812      	ldr	r2, [r2, #0]
 8007342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007344:	430b      	orrs	r3, r1
 8007346:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	f023 010f 	bic.w	r1, r3, #15
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a90      	ldr	r2, [pc, #576]	; (80075a4 <UART_SetConfig+0x2e0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d125      	bne.n	80073b4 <UART_SetConfig+0xf0>
 8007368:	4b8f      	ldr	r3, [pc, #572]	; (80075a8 <UART_SetConfig+0x2e4>)
 800736a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736e:	f003 0303 	and.w	r3, r3, #3
 8007372:	2b03      	cmp	r3, #3
 8007374:	d81a      	bhi.n	80073ac <UART_SetConfig+0xe8>
 8007376:	a201      	add	r2, pc, #4	; (adr r2, 800737c <UART_SetConfig+0xb8>)
 8007378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737c:	0800738d 	.word	0x0800738d
 8007380:	0800739d 	.word	0x0800739d
 8007384:	08007395 	.word	0x08007395
 8007388:	080073a5 	.word	0x080073a5
 800738c:	2301      	movs	r3, #1
 800738e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007392:	e116      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007394:	2302      	movs	r3, #2
 8007396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800739a:	e112      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800739c:	2304      	movs	r3, #4
 800739e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a2:	e10e      	b.n	80075c2 <UART_SetConfig+0x2fe>
 80073a4:	2308      	movs	r3, #8
 80073a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073aa:	e10a      	b.n	80075c2 <UART_SetConfig+0x2fe>
 80073ac:	2310      	movs	r3, #16
 80073ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073b2:	e106      	b.n	80075c2 <UART_SetConfig+0x2fe>
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a7c      	ldr	r2, [pc, #496]	; (80075ac <UART_SetConfig+0x2e8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d138      	bne.n	8007430 <UART_SetConfig+0x16c>
 80073be:	4b7a      	ldr	r3, [pc, #488]	; (80075a8 <UART_SetConfig+0x2e4>)
 80073c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c4:	f003 030c 	and.w	r3, r3, #12
 80073c8:	2b0c      	cmp	r3, #12
 80073ca:	d82d      	bhi.n	8007428 <UART_SetConfig+0x164>
 80073cc:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <UART_SetConfig+0x110>)
 80073ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d2:	bf00      	nop
 80073d4:	08007409 	.word	0x08007409
 80073d8:	08007429 	.word	0x08007429
 80073dc:	08007429 	.word	0x08007429
 80073e0:	08007429 	.word	0x08007429
 80073e4:	08007419 	.word	0x08007419
 80073e8:	08007429 	.word	0x08007429
 80073ec:	08007429 	.word	0x08007429
 80073f0:	08007429 	.word	0x08007429
 80073f4:	08007411 	.word	0x08007411
 80073f8:	08007429 	.word	0x08007429
 80073fc:	08007429 	.word	0x08007429
 8007400:	08007429 	.word	0x08007429
 8007404:	08007421 	.word	0x08007421
 8007408:	2300      	movs	r3, #0
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800740e:	e0d8      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007410:	2302      	movs	r3, #2
 8007412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007416:	e0d4      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007418:	2304      	movs	r3, #4
 800741a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800741e:	e0d0      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007420:	2308      	movs	r3, #8
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007426:	e0cc      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007428:	2310      	movs	r3, #16
 800742a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800742e:	e0c8      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a5e      	ldr	r2, [pc, #376]	; (80075b0 <UART_SetConfig+0x2ec>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d125      	bne.n	8007486 <UART_SetConfig+0x1c2>
 800743a:	4b5b      	ldr	r3, [pc, #364]	; (80075a8 <UART_SetConfig+0x2e4>)
 800743c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007440:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007444:	2b30      	cmp	r3, #48	; 0x30
 8007446:	d016      	beq.n	8007476 <UART_SetConfig+0x1b2>
 8007448:	2b30      	cmp	r3, #48	; 0x30
 800744a:	d818      	bhi.n	800747e <UART_SetConfig+0x1ba>
 800744c:	2b20      	cmp	r3, #32
 800744e:	d00a      	beq.n	8007466 <UART_SetConfig+0x1a2>
 8007450:	2b20      	cmp	r3, #32
 8007452:	d814      	bhi.n	800747e <UART_SetConfig+0x1ba>
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <UART_SetConfig+0x19a>
 8007458:	2b10      	cmp	r3, #16
 800745a:	d008      	beq.n	800746e <UART_SetConfig+0x1aa>
 800745c:	e00f      	b.n	800747e <UART_SetConfig+0x1ba>
 800745e:	2300      	movs	r3, #0
 8007460:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007464:	e0ad      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007466:	2302      	movs	r3, #2
 8007468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800746c:	e0a9      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800746e:	2304      	movs	r3, #4
 8007470:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007474:	e0a5      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007476:	2308      	movs	r3, #8
 8007478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800747c:	e0a1      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800747e:	2310      	movs	r3, #16
 8007480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007484:	e09d      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a4a      	ldr	r2, [pc, #296]	; (80075b4 <UART_SetConfig+0x2f0>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d125      	bne.n	80074dc <UART_SetConfig+0x218>
 8007490:	4b45      	ldr	r3, [pc, #276]	; (80075a8 <UART_SetConfig+0x2e4>)
 8007492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007496:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800749a:	2bc0      	cmp	r3, #192	; 0xc0
 800749c:	d016      	beq.n	80074cc <UART_SetConfig+0x208>
 800749e:	2bc0      	cmp	r3, #192	; 0xc0
 80074a0:	d818      	bhi.n	80074d4 <UART_SetConfig+0x210>
 80074a2:	2b80      	cmp	r3, #128	; 0x80
 80074a4:	d00a      	beq.n	80074bc <UART_SetConfig+0x1f8>
 80074a6:	2b80      	cmp	r3, #128	; 0x80
 80074a8:	d814      	bhi.n	80074d4 <UART_SetConfig+0x210>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <UART_SetConfig+0x1f0>
 80074ae:	2b40      	cmp	r3, #64	; 0x40
 80074b0:	d008      	beq.n	80074c4 <UART_SetConfig+0x200>
 80074b2:	e00f      	b.n	80074d4 <UART_SetConfig+0x210>
 80074b4:	2300      	movs	r3, #0
 80074b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ba:	e082      	b.n	80075c2 <UART_SetConfig+0x2fe>
 80074bc:	2302      	movs	r3, #2
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074c2:	e07e      	b.n	80075c2 <UART_SetConfig+0x2fe>
 80074c4:	2304      	movs	r3, #4
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ca:	e07a      	b.n	80075c2 <UART_SetConfig+0x2fe>
 80074cc:	2308      	movs	r3, #8
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074d2:	e076      	b.n	80075c2 <UART_SetConfig+0x2fe>
 80074d4:	2310      	movs	r3, #16
 80074d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074da:	e072      	b.n	80075c2 <UART_SetConfig+0x2fe>
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a35      	ldr	r2, [pc, #212]	; (80075b8 <UART_SetConfig+0x2f4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d12a      	bne.n	800753c <UART_SetConfig+0x278>
 80074e6:	4b30      	ldr	r3, [pc, #192]	; (80075a8 <UART_SetConfig+0x2e4>)
 80074e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074f4:	d01a      	beq.n	800752c <UART_SetConfig+0x268>
 80074f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074fa:	d81b      	bhi.n	8007534 <UART_SetConfig+0x270>
 80074fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007500:	d00c      	beq.n	800751c <UART_SetConfig+0x258>
 8007502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007506:	d815      	bhi.n	8007534 <UART_SetConfig+0x270>
 8007508:	2b00      	cmp	r3, #0
 800750a:	d003      	beq.n	8007514 <UART_SetConfig+0x250>
 800750c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007510:	d008      	beq.n	8007524 <UART_SetConfig+0x260>
 8007512:	e00f      	b.n	8007534 <UART_SetConfig+0x270>
 8007514:	2300      	movs	r3, #0
 8007516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800751a:	e052      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800751c:	2302      	movs	r3, #2
 800751e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007522:	e04e      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007524:	2304      	movs	r3, #4
 8007526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800752a:	e04a      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800752c:	2308      	movs	r3, #8
 800752e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007532:	e046      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007534:	2310      	movs	r3, #16
 8007536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800753a:	e042      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a17      	ldr	r2, [pc, #92]	; (80075a0 <UART_SetConfig+0x2dc>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d13a      	bne.n	80075bc <UART_SetConfig+0x2f8>
 8007546:	4b18      	ldr	r3, [pc, #96]	; (80075a8 <UART_SetConfig+0x2e4>)
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007550:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007554:	d01a      	beq.n	800758c <UART_SetConfig+0x2c8>
 8007556:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800755a:	d81b      	bhi.n	8007594 <UART_SetConfig+0x2d0>
 800755c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007560:	d00c      	beq.n	800757c <UART_SetConfig+0x2b8>
 8007562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007566:	d815      	bhi.n	8007594 <UART_SetConfig+0x2d0>
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <UART_SetConfig+0x2b0>
 800756c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007570:	d008      	beq.n	8007584 <UART_SetConfig+0x2c0>
 8007572:	e00f      	b.n	8007594 <UART_SetConfig+0x2d0>
 8007574:	2300      	movs	r3, #0
 8007576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800757a:	e022      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800757c:	2302      	movs	r3, #2
 800757e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007582:	e01e      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007584:	2304      	movs	r3, #4
 8007586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800758a:	e01a      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800758c:	2308      	movs	r3, #8
 800758e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007592:	e016      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007594:	2310      	movs	r3, #16
 8007596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800759a:	e012      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800759c:	cfff69f3 	.word	0xcfff69f3
 80075a0:	40008000 	.word	0x40008000
 80075a4:	40013800 	.word	0x40013800
 80075a8:	40021000 	.word	0x40021000
 80075ac:	40004400 	.word	0x40004400
 80075b0:	40004800 	.word	0x40004800
 80075b4:	40004c00 	.word	0x40004c00
 80075b8:	40005000 	.word	0x40005000
 80075bc:	2310      	movs	r3, #16
 80075be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4aae      	ldr	r2, [pc, #696]	; (8007880 <UART_SetConfig+0x5bc>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	f040 8097 	bne.w	80076fc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075d2:	2b08      	cmp	r3, #8
 80075d4:	d823      	bhi.n	800761e <UART_SetConfig+0x35a>
 80075d6:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <UART_SetConfig+0x318>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	08007601 	.word	0x08007601
 80075e0:	0800761f 	.word	0x0800761f
 80075e4:	08007609 	.word	0x08007609
 80075e8:	0800761f 	.word	0x0800761f
 80075ec:	0800760f 	.word	0x0800760f
 80075f0:	0800761f 	.word	0x0800761f
 80075f4:	0800761f 	.word	0x0800761f
 80075f8:	0800761f 	.word	0x0800761f
 80075fc:	08007617 	.word	0x08007617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007600:	f7fd fa80 	bl	8004b04 <HAL_RCC_GetPCLK1Freq>
 8007604:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007606:	e010      	b.n	800762a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007608:	4b9e      	ldr	r3, [pc, #632]	; (8007884 <UART_SetConfig+0x5c0>)
 800760a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800760c:	e00d      	b.n	800762a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800760e:	f7fd fa0b 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 8007612:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007614:	e009      	b.n	800762a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800761a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800761c:	e005      	b.n	800762a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007628:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 8130 	beq.w	8007892 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	4a94      	ldr	r2, [pc, #592]	; (8007888 <UART_SetConfig+0x5c4>)
 8007638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800763c:	461a      	mov	r2, r3
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007640:	fbb3 f3f2 	udiv	r3, r3, r2
 8007644:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	4613      	mov	r3, r2
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	4413      	add	r3, r2
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	429a      	cmp	r2, r3
 8007654:	d305      	bcc.n	8007662 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	429a      	cmp	r2, r3
 8007660:	d903      	bls.n	800766a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007668:	e113      	b.n	8007892 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	2200      	movs	r2, #0
 800766e:	60bb      	str	r3, [r7, #8]
 8007670:	60fa      	str	r2, [r7, #12]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	4a84      	ldr	r2, [pc, #528]	; (8007888 <UART_SetConfig+0x5c4>)
 8007678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800767c:	b29b      	uxth	r3, r3
 800767e:	2200      	movs	r2, #0
 8007680:	603b      	str	r3, [r7, #0]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007688:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800768c:	f7f8 fdc4 	bl	8000218 <__aeabi_uldivmod>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	4610      	mov	r0, r2
 8007696:	4619      	mov	r1, r3
 8007698:	f04f 0200 	mov.w	r2, #0
 800769c:	f04f 0300 	mov.w	r3, #0
 80076a0:	020b      	lsls	r3, r1, #8
 80076a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076a6:	0202      	lsls	r2, r0, #8
 80076a8:	6979      	ldr	r1, [r7, #20]
 80076aa:	6849      	ldr	r1, [r1, #4]
 80076ac:	0849      	lsrs	r1, r1, #1
 80076ae:	2000      	movs	r0, #0
 80076b0:	460c      	mov	r4, r1
 80076b2:	4605      	mov	r5, r0
 80076b4:	eb12 0804 	adds.w	r8, r2, r4
 80076b8:	eb43 0905 	adc.w	r9, r3, r5
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	469a      	mov	sl, r3
 80076c4:	4693      	mov	fp, r2
 80076c6:	4652      	mov	r2, sl
 80076c8:	465b      	mov	r3, fp
 80076ca:	4640      	mov	r0, r8
 80076cc:	4649      	mov	r1, r9
 80076ce:	f7f8 fda3 	bl	8000218 <__aeabi_uldivmod>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	4613      	mov	r3, r2
 80076d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076e0:	d308      	bcc.n	80076f4 <UART_SetConfig+0x430>
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076e8:	d204      	bcs.n	80076f4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6a3a      	ldr	r2, [r7, #32]
 80076f0:	60da      	str	r2, [r3, #12]
 80076f2:	e0ce      	b.n	8007892 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076fa:	e0ca      	b.n	8007892 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007704:	d166      	bne.n	80077d4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007706:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800770a:	2b08      	cmp	r3, #8
 800770c:	d827      	bhi.n	800775e <UART_SetConfig+0x49a>
 800770e:	a201      	add	r2, pc, #4	; (adr r2, 8007714 <UART_SetConfig+0x450>)
 8007710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007714:	08007739 	.word	0x08007739
 8007718:	08007741 	.word	0x08007741
 800771c:	08007749 	.word	0x08007749
 8007720:	0800775f 	.word	0x0800775f
 8007724:	0800774f 	.word	0x0800774f
 8007728:	0800775f 	.word	0x0800775f
 800772c:	0800775f 	.word	0x0800775f
 8007730:	0800775f 	.word	0x0800775f
 8007734:	08007757 	.word	0x08007757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007738:	f7fd f9e4 	bl	8004b04 <HAL_RCC_GetPCLK1Freq>
 800773c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800773e:	e014      	b.n	800776a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007740:	f7fd f9f6 	bl	8004b30 <HAL_RCC_GetPCLK2Freq>
 8007744:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007746:	e010      	b.n	800776a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007748:	4b4e      	ldr	r3, [pc, #312]	; (8007884 <UART_SetConfig+0x5c0>)
 800774a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800774c:	e00d      	b.n	800776a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800774e:	f7fd f96b 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 8007752:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007754:	e009      	b.n	800776a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800775a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800775c:	e005      	b.n	800776a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800775e:	2300      	movs	r3, #0
 8007760:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007768:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 8090 	beq.w	8007892 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007776:	4a44      	ldr	r2, [pc, #272]	; (8007888 <UART_SetConfig+0x5c4>)
 8007778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800777c:	461a      	mov	r2, r3
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	fbb3 f3f2 	udiv	r3, r3, r2
 8007784:	005a      	lsls	r2, r3, #1
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	085b      	lsrs	r3, r3, #1
 800778c:	441a      	add	r2, r3
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	fbb2 f3f3 	udiv	r3, r2, r3
 8007796:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	2b0f      	cmp	r3, #15
 800779c:	d916      	bls.n	80077cc <UART_SetConfig+0x508>
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a4:	d212      	bcs.n	80077cc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	f023 030f 	bic.w	r3, r3, #15
 80077ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	085b      	lsrs	r3, r3, #1
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	8bfb      	ldrh	r3, [r7, #30]
 80077be:	4313      	orrs	r3, r2
 80077c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	8bfa      	ldrh	r2, [r7, #30]
 80077c8:	60da      	str	r2, [r3, #12]
 80077ca:	e062      	b.n	8007892 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80077d2:	e05e      	b.n	8007892 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d828      	bhi.n	800782e <UART_SetConfig+0x56a>
 80077dc:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <UART_SetConfig+0x520>)
 80077de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e2:	bf00      	nop
 80077e4:	08007809 	.word	0x08007809
 80077e8:	08007811 	.word	0x08007811
 80077ec:	08007819 	.word	0x08007819
 80077f0:	0800782f 	.word	0x0800782f
 80077f4:	0800781f 	.word	0x0800781f
 80077f8:	0800782f 	.word	0x0800782f
 80077fc:	0800782f 	.word	0x0800782f
 8007800:	0800782f 	.word	0x0800782f
 8007804:	08007827 	.word	0x08007827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007808:	f7fd f97c 	bl	8004b04 <HAL_RCC_GetPCLK1Freq>
 800780c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800780e:	e014      	b.n	800783a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007810:	f7fd f98e 	bl	8004b30 <HAL_RCC_GetPCLK2Freq>
 8007814:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007816:	e010      	b.n	800783a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007818:	4b1a      	ldr	r3, [pc, #104]	; (8007884 <UART_SetConfig+0x5c0>)
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800781c:	e00d      	b.n	800783a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800781e:	f7fd f903 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 8007822:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007824:	e009      	b.n	800783a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800782c:	e005      	b.n	800783a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007838:	bf00      	nop
    }

    if (pclk != 0U)
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	2b00      	cmp	r3, #0
 800783e:	d028      	beq.n	8007892 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	4a10      	ldr	r2, [pc, #64]	; (8007888 <UART_SetConfig+0x5c4>)
 8007846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800784a:	461a      	mov	r2, r3
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	085b      	lsrs	r3, r3, #1
 8007858:	441a      	add	r2, r3
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007862:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	2b0f      	cmp	r3, #15
 8007868:	d910      	bls.n	800788c <UART_SetConfig+0x5c8>
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007870:	d20c      	bcs.n	800788c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	b29a      	uxth	r2, r3
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60da      	str	r2, [r3, #12]
 800787c:	e009      	b.n	8007892 <UART_SetConfig+0x5ce>
 800787e:	bf00      	nop
 8007880:	40008000 	.word	0x40008000
 8007884:	00f42400 	.word	0x00f42400
 8007888:	08008200 	.word	0x08008200
      }
      else
      {
        ret = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2201      	movs	r2, #1
 8007896:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2201      	movs	r2, #1
 800789e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2200      	movs	r2, #0
 80078a6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	2200      	movs	r2, #0
 80078ac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80078ae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3730      	adds	r7, #48	; 0x30
 80078b6:	46bd      	mov	sp, r7
 80078b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080078bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	f003 0308 	and.w	r3, r3, #8
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00a      	beq.n	80078e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00a      	beq.n	8007908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	430a      	orrs	r2, r1
 8007906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790c:	f003 0302 	and.w	r3, r3, #2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00a      	beq.n	800792a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792e:	f003 0304 	and.w	r3, r3, #4
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	430a      	orrs	r2, r1
 800794a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007950:	f003 0310 	and.w	r3, r3, #16
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00a      	beq.n	800796e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007972:	f003 0320 	and.w	r3, r3, #32
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	430a      	orrs	r2, r1
 800798e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007998:	2b00      	cmp	r3, #0
 800799a:	d01a      	beq.n	80079d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ba:	d10a      	bne.n	80079d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	430a      	orrs	r2, r1
 80079f2:	605a      	str	r2, [r3, #4]
  }
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b098      	sub	sp, #96	; 0x60
 8007a04:	af02      	add	r7, sp, #8
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a10:	f7f9 feda 	bl	80017c8 <HAL_GetTick>
 8007a14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0308 	and.w	r3, r3, #8
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d12f      	bne.n	8007a84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f88e 	bl	8007b54 <UART_WaitOnFlagUntilTimeout>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d022      	beq.n	8007a84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a52:	653b      	str	r3, [r7, #80]	; 0x50
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e6      	bne.n	8007a3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e063      	b.n	8007b4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0304 	and.w	r3, r3, #4
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d149      	bne.n	8007b26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f857 	bl	8007b54 <UART_WaitOnFlagUntilTimeout>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d03c      	beq.n	8007b26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aca:	633b      	str	r3, [r7, #48]	; 0x30
 8007acc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e6      	bne.n	8007aac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f023 0301 	bic.w	r3, r3, #1
 8007af4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3308      	adds	r3, #8
 8007afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007afe:	61fa      	str	r2, [r7, #28]
 8007b00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b02:	69b9      	ldr	r1, [r7, #24]
 8007b04:	69fa      	ldr	r2, [r7, #28]
 8007b06:	e841 2300 	strex	r3, r2, [r1]
 8007b0a:	617b      	str	r3, [r7, #20]
   return(result);
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e5      	bne.n	8007ade <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e012      	b.n	8007b4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2220      	movs	r2, #32
 8007b32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3758      	adds	r7, #88	; 0x58
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	603b      	str	r3, [r7, #0]
 8007b60:	4613      	mov	r3, r2
 8007b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b64:	e04f      	b.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6c:	d04b      	beq.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b6e:	f7f9 fe2b 	bl	80017c8 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d302      	bcc.n	8007b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e04e      	b.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d037      	beq.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b80      	cmp	r3, #128	; 0x80
 8007b9a:	d034      	beq.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b40      	cmp	r3, #64	; 0x40
 8007ba0:	d031      	beq.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	f003 0308 	and.w	r3, r3, #8
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d110      	bne.n	8007bd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2208      	movs	r2, #8
 8007bb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 f879 	bl	8007cb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e029      	b.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	69db      	ldr	r3, [r3, #28]
 8007bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007be0:	d111      	bne.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 f85f 	bl	8007cb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e00f      	b.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69da      	ldr	r2, [r3, #28]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	bf0c      	ite	eq
 8007c16:	2301      	moveq	r3, #1
 8007c18:	2300      	movne	r3, #0
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d0a0      	beq.n	8007b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b08f      	sub	sp, #60	; 0x3c
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	e853 3f00 	ldrex	r3, [r3]
 8007c42:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	461a      	mov	r2, r3
 8007c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c56:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c5c:	e841 2300 	strex	r3, r2, [r1]
 8007c60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e6      	bne.n	8007c36 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	e853 3f00 	ldrex	r3, [r3]
 8007c76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c7e:	633b      	str	r3, [r7, #48]	; 0x30
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3308      	adds	r3, #8
 8007c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c88:	61ba      	str	r2, [r7, #24]
 8007c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8c:	6979      	ldr	r1, [r7, #20]
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	e841 2300 	strex	r3, r2, [r1]
 8007c94:	613b      	str	r3, [r7, #16]
   return(result);
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e5      	bne.n	8007c68 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007ca4:	bf00      	nop
 8007ca6:	373c      	adds	r7, #60	; 0x3c
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b095      	sub	sp, #84	; 0x54
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8007cd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e6      	bne.n	8007cb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d00:	f023 0301 	bic.w	r3, r3, #1
 8007d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d16:	e841 2300 	strex	r3, r2, [r1]
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1e3      	bne.n	8007cea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d118      	bne.n	8007d5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	e853 3f00 	ldrex	r3, [r3]
 8007d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f023 0310 	bic.w	r3, r3, #16
 8007d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d48:	61bb      	str	r3, [r7, #24]
 8007d4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4c:	6979      	ldr	r1, [r7, #20]
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	e841 2300 	strex	r3, r2, [r1]
 8007d54:	613b      	str	r3, [r7, #16]
   return(result);
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e6      	bne.n	8007d2a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007d70:	bf00      	nop
 8007d72:	3754      	adds	r7, #84	; 0x54
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b090      	sub	sp, #64	; 0x40
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d88:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d137      	bne.n	8007e08 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3308      	adds	r3, #8
 8007da6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	e853 3f00 	ldrex	r3, [r3]
 8007dae:	623b      	str	r3, [r7, #32]
   return(result);
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007db6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dc0:	633a      	str	r2, [r7, #48]	; 0x30
 8007dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc8:	e841 2300 	strex	r3, r2, [r1]
 8007dcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e5      	bne.n	8007da0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007de8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df2:	61fb      	str	r3, [r7, #28]
 8007df4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	69b9      	ldr	r1, [r7, #24]
 8007df8:	69fa      	ldr	r2, [r7, #28]
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	617b      	str	r3, [r7, #20]
   return(result);
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e6      	bne.n	8007dd4 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e06:	e002      	b.n	8007e0e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007e08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007e0a:	f7ff fa31 	bl	8007270 <HAL_UART_TxCpltCallback>
}
 8007e0e:	bf00      	nop
 8007e10:	3740      	adds	r7, #64	; 0x40
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b084      	sub	sp, #16
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e22:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7ff fa2d 	bl	8007284 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e2a:	bf00      	nop
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b086      	sub	sp, #24
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e46:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5a:	2b80      	cmp	r3, #128	; 0x80
 8007e5c:	d109      	bne.n	8007e72 <UART_DMAError+0x40>
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	2b21      	cmp	r3, #33	; 0x21
 8007e62:	d106      	bne.n	8007e72 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007e6c:	6978      	ldr	r0, [r7, #20]
 8007e6e:	f7ff fede 	bl	8007c2e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7c:	2b40      	cmp	r3, #64	; 0x40
 8007e7e:	d109      	bne.n	8007e94 <UART_DMAError+0x62>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b22      	cmp	r3, #34	; 0x22
 8007e84:	d106      	bne.n	8007e94 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007e8e:	6978      	ldr	r0, [r7, #20]
 8007e90:	f7ff ff0e 	bl	8007cb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e9a:	f043 0210 	orr.w	r2, r3, #16
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ea4:	6978      	ldr	r0, [r7, #20]
 8007ea6:	f7ff f9f7 	bl	8007298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eaa:	bf00      	nop
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f7ff f9e1 	bl	8007298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ed6:	bf00      	nop
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b088      	sub	sp, #32
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	e853 3f00 	ldrex	r3, [r3]
 8007ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007efa:	61fb      	str	r3, [r7, #28]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	61bb      	str	r3, [r7, #24]
 8007f06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f08:	6979      	ldr	r1, [r7, #20]
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	e841 2300 	strex	r3, r2, [r1]
 8007f10:	613b      	str	r3, [r7, #16]
   return(result);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e6      	bne.n	8007ee6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff f9a2 	bl	8007270 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f2c:	bf00      	nop
 8007f2e:	3720      	adds	r7, #32
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d101      	bne.n	8007f86 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f82:	2302      	movs	r3, #2
 8007f84:	e027      	b.n	8007fd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2224      	movs	r2, #36	; 0x24
 8007f92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0201 	bic.w	r2, r2, #1
 8007fac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007fb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d101      	bne.n	8007ffa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	e02d      	b.n	8008056 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2224      	movs	r2, #36	; 0x24
 8008006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0201 	bic.w	r2, r2, #1
 8008020:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f850 	bl	80080dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2220      	movs	r2, #32
 8008048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b084      	sub	sp, #16
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800806e:	2b01      	cmp	r3, #1
 8008070:	d101      	bne.n	8008076 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008072:	2302      	movs	r3, #2
 8008074:	e02d      	b.n	80080d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2224      	movs	r2, #36	; 0x24
 8008082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 0201 	bic.w	r2, r2, #1
 800809c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f812 	bl	80080dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2220      	movs	r2, #32
 80080c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
	...

080080dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d108      	bne.n	80080fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080fc:	e031      	b.n	8008162 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080fe:	2308      	movs	r3, #8
 8008100:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008102:	2308      	movs	r3, #8
 8008104:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	0e5b      	lsrs	r3, r3, #25
 800810e:	b2db      	uxtb	r3, r3
 8008110:	f003 0307 	and.w	r3, r3, #7
 8008114:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	0f5b      	lsrs	r3, r3, #29
 800811e:	b2db      	uxtb	r3, r3
 8008120:	f003 0307 	and.w	r3, r3, #7
 8008124:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	7b3a      	ldrb	r2, [r7, #12]
 800812a:	4911      	ldr	r1, [pc, #68]	; (8008170 <UARTEx_SetNbDataToProcess+0x94>)
 800812c:	5c8a      	ldrb	r2, [r1, r2]
 800812e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008132:	7b3a      	ldrb	r2, [r7, #12]
 8008134:	490f      	ldr	r1, [pc, #60]	; (8008174 <UARTEx_SetNbDataToProcess+0x98>)
 8008136:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008138:	fb93 f3f2 	sdiv	r3, r3, r2
 800813c:	b29a      	uxth	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008144:	7bfb      	ldrb	r3, [r7, #15]
 8008146:	7b7a      	ldrb	r2, [r7, #13]
 8008148:	4909      	ldr	r1, [pc, #36]	; (8008170 <UARTEx_SetNbDataToProcess+0x94>)
 800814a:	5c8a      	ldrb	r2, [r1, r2]
 800814c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008150:	7b7a      	ldrb	r2, [r7, #13]
 8008152:	4908      	ldr	r1, [pc, #32]	; (8008174 <UARTEx_SetNbDataToProcess+0x98>)
 8008154:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008156:	fb93 f3f2 	sdiv	r3, r3, r2
 800815a:	b29a      	uxth	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008162:	bf00      	nop
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	08008218 	.word	0x08008218
 8008174:	08008220 	.word	0x08008220

08008178 <memset>:
 8008178:	4402      	add	r2, r0
 800817a:	4603      	mov	r3, r0
 800817c:	4293      	cmp	r3, r2
 800817e:	d100      	bne.n	8008182 <memset+0xa>
 8008180:	4770      	bx	lr
 8008182:	f803 1b01 	strb.w	r1, [r3], #1
 8008186:	e7f9      	b.n	800817c <memset+0x4>

08008188 <__libc_init_array>:
 8008188:	b570      	push	{r4, r5, r6, lr}
 800818a:	4d0d      	ldr	r5, [pc, #52]	; (80081c0 <__libc_init_array+0x38>)
 800818c:	4c0d      	ldr	r4, [pc, #52]	; (80081c4 <__libc_init_array+0x3c>)
 800818e:	1b64      	subs	r4, r4, r5
 8008190:	10a4      	asrs	r4, r4, #2
 8008192:	2600      	movs	r6, #0
 8008194:	42a6      	cmp	r6, r4
 8008196:	d109      	bne.n	80081ac <__libc_init_array+0x24>
 8008198:	4d0b      	ldr	r5, [pc, #44]	; (80081c8 <__libc_init_array+0x40>)
 800819a:	4c0c      	ldr	r4, [pc, #48]	; (80081cc <__libc_init_array+0x44>)
 800819c:	f000 f818 	bl	80081d0 <_init>
 80081a0:	1b64      	subs	r4, r4, r5
 80081a2:	10a4      	asrs	r4, r4, #2
 80081a4:	2600      	movs	r6, #0
 80081a6:	42a6      	cmp	r6, r4
 80081a8:	d105      	bne.n	80081b6 <__libc_init_array+0x2e>
 80081aa:	bd70      	pop	{r4, r5, r6, pc}
 80081ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b0:	4798      	blx	r3
 80081b2:	3601      	adds	r6, #1
 80081b4:	e7ee      	b.n	8008194 <__libc_init_array+0xc>
 80081b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ba:	4798      	blx	r3
 80081bc:	3601      	adds	r6, #1
 80081be:	e7f2      	b.n	80081a6 <__libc_init_array+0x1e>
 80081c0:	08008230 	.word	0x08008230
 80081c4:	08008230 	.word	0x08008230
 80081c8:	08008230 	.word	0x08008230
 80081cc:	08008234 	.word	0x08008234

080081d0 <_init>:
 80081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d2:	bf00      	nop
 80081d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d6:	bc08      	pop	{r3}
 80081d8:	469e      	mov	lr, r3
 80081da:	4770      	bx	lr

080081dc <_fini>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	bf00      	nop
 80081e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e2:	bc08      	pop	{r3}
 80081e4:	469e      	mov	lr, r3
 80081e6:	4770      	bx	lr
