
Motor PID Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e00  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007fd8  08007fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008018  08008018  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008018  08008018  00018018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008020  08008020  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008020  08008020  00018020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008024  08008024  00018024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000010  08008038  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  08008038  000206f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017fee  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b16  00000000  00000000  00038071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  0003ab88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001058  00000000  00000000  0003c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b63  00000000  00000000  0003d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017cb5  00000000  00000000  00065c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011398c  00000000  00000000  0007d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ad4  00000000  00000000  0019126c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00196d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007fc0 	.word	0x08007fc0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08007fc0 	.word	0x08007fc0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f001 f87d 	bl	8001616 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f876 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fb20 	bl	8000b64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fae4 	bl	8000af0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000528:	f000 f946 	bl	80007b8 <MX_TIM3_Init>
  MX_ADC1_Init();
 800052c:	f000 f8ba 	bl	80006a4 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000530:	f000 fa40 	bl	80009b4 <MX_TIM15_Init>
  MX_TIM5_Init();
 8000534:	f000 f9f0 	bl	8000918 <MX_TIM5_Init>
  MX_TIM4_Init();
 8000538:	f000 f994 	bl	8000864 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800053c:	f000 fa8c 	bl	8000a58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_ADC_Start_DMA(&hadc1,InputRead, 400); // DMA Read
 8000540:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000544:	4924      	ldr	r1, [pc, #144]	; (80005d8 <main+0xc4>)
 8000546:	4825      	ldr	r0, [pc, #148]	; (80005dc <main+0xc8>)
 8000548:	f001 fcd2 	bl	8001ef0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim15);
 800054c:	4824      	ldr	r0, [pc, #144]	; (80005e0 <main+0xcc>)
 800054e:	f004 fded 	bl	800512c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5); // system time clock
 8000552:	4824      	ldr	r0, [pc, #144]	; (80005e4 <main+0xd0>)
 8000554:	f004 fd7a 	bl	800504c <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim4);  //motor A2
 8000558:	4823      	ldr	r0, [pc, #140]	; (80005e8 <main+0xd4>)
 800055a:	f004 fd77 	bl	800504c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800055e:	2100      	movs	r1, #0
 8000560:	4821      	ldr	r0, [pc, #132]	; (80005e8 <main+0xd4>)
 8000562:	f004 feb3 	bl	80052cc <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0); //for Check Timer
 8000566:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <main+0xd4>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2200      	movs	r2, #0
 800056c:	635a      	str	r2, [r3, #52]	; 0x34



  A0 = Kp + Ki + Kd;
 800056e:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <main+0xd8>)
 8000570:	ed93 7a00 	vldr	s14, [r3]
 8000574:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <main+0xdc>)
 8000576:	edd3 7a00 	vldr	s15, [r3]
 800057a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <main+0xe0>)
 8000580:	edd3 7a00 	vldr	s15, [r3]
 8000584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <main+0xe4>)
 800058a:	edc3 7a00 	vstr	s15, [r3]
  A1 = -Kp - (2*Kd);
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <main+0xd8>)
 8000590:	edd3 7a00 	vldr	s15, [r3]
 8000594:	eeb1 7a67 	vneg.f32	s14, s15
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <main+0xe0>)
 800059a:	edd3 7a00 	vldr	s15, [r3]
 800059e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80005a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <main+0xe8>)
 80005a8:	edc3 7a00 	vstr	s15, [r3]
  A2 = Kd;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <main+0xe0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a13      	ldr	r2, [pc, #76]	; (8000600 <main+0xec>)
 80005b2:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2101      	movs	r1, #1
 80005b8:	4812      	ldr	r0, [pc, #72]	; (8000604 <main+0xf0>)
 80005ba:	f003 fc83 	bl	8003ec4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  test = __HAL_TIM_GET_COUNTER(&htim5);
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <main+0xd0>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <main+0xf4>)
 80005c8:	801a      	strh	r2, [r3, #0]
	  updateInput();
 80005ca:	f000 fb87 	bl	8000cdc <updateInput>
	  motorControl();
 80005ce:	f000 fc25 	bl	8000e1c <motorControl>
	  Communication();
 80005d2:	f000 fc5f 	bl	8000e94 <Communication>
  {
 80005d6:	e7f2      	b.n	80005be <main+0xaa>
 80005d8:	20000388 	.word	0x20000388
 80005dc:	2000002c 	.word	0x2000002c
 80005e0:	200001dc 	.word	0x200001dc
 80005e4:	20000190 	.word	0x20000190
 80005e8:	20000144 	.word	0x20000144
 80005ec:	20000000 	.word	0x20000000
 80005f0:	200006d0 	.word	0x200006d0
 80005f4:	200006d4 	.word	0x200006d4
 80005f8:	200006d8 	.word	0x200006d8
 80005fc:	200006dc 	.word	0x200006dc
 8000600:	200006e0 	.word	0x200006e0
 8000604:	48000800 	.word	0x48000800
 8000608:	200006b6 	.word	0x200006b6

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0318 	add.w	r3, r7, #24
 8000616:	2238      	movs	r2, #56	; 0x38
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f007 fca4 	bl	8007f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800062e:	2000      	movs	r0, #0
 8000630:	f003 fc84 	bl	8003f3c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063e:	2340      	movs	r3, #64	; 0x40
 8000640:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000646:	2302      	movs	r3, #2
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800064a:	2304      	movs	r3, #4
 800064c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800064e:	2355      	movs	r3, #85	; 0x55
 8000650:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fd1e 	bl	80040a4 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800066e:	f000 fce5 	bl	800103c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2303      	movs	r3, #3
 8000678:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2104      	movs	r1, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f004 f81c 	bl	80046c8 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000696:	f000 fcd1 	bl	800103c <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	; 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	; 0x30
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2220      	movs	r2, #32
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f007 fc53 	bl	8007f68 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006c2:	4b3a      	ldr	r3, [pc, #232]	; (80007ac <MX_ADC1_Init+0x108>)
 80006c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006ca:	4b38      	ldr	r3, [pc, #224]	; (80007ac <MX_ADC1_Init+0x108>)
 80006cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d2:	4b36      	ldr	r3, [pc, #216]	; (80007ac <MX_ADC1_Init+0x108>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d8:	4b34      	ldr	r3, [pc, #208]	; (80007ac <MX_ADC1_Init+0x108>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006de:	4b33      	ldr	r3, [pc, #204]	; (80007ac <MX_ADC1_Init+0x108>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006e4:	4b31      	ldr	r3, [pc, #196]	; (80007ac <MX_ADC1_Init+0x108>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ea:	4b30      	ldr	r3, [pc, #192]	; (80007ac <MX_ADC1_Init+0x108>)
 80006ec:	2204      	movs	r2, #4
 80006ee:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006f0:	4b2e      	ldr	r3, [pc, #184]	; (80007ac <MX_ADC1_Init+0x108>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006f6:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <MX_ADC1_Init+0x108>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80006fc:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <MX_ADC1_Init+0x108>)
 80006fe:	2202      	movs	r2, #2
 8000700:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000702:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <MX_ADC1_Init+0x108>)
 8000704:	2200      	movs	r2, #0
 8000706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <MX_ADC1_Init+0x108>)
 800070c:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000712:	4b26      	ldr	r3, [pc, #152]	; (80007ac <MX_ADC1_Init+0x108>)
 8000714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <MX_ADC1_Init+0x108>)
 800071c:	2201      	movs	r2, #1
 800071e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000722:	4b22      	ldr	r3, [pc, #136]	; (80007ac <MX_ADC1_Init+0x108>)
 8000724:	2200      	movs	r2, #0
 8000726:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000728:	4b20      	ldr	r3, [pc, #128]	; (80007ac <MX_ADC1_Init+0x108>)
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000730:	481e      	ldr	r0, [pc, #120]	; (80007ac <MX_ADC1_Init+0x108>)
 8000732:	f001 fa21 	bl	8001b78 <HAL_ADC_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800073c:	f000 fc7e 	bl	800103c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000748:	4619      	mov	r1, r3
 800074a:	4818      	ldr	r0, [pc, #96]	; (80007ac <MX_ADC1_Init+0x108>)
 800074c:	f002 fcee 	bl	800312c <HAL_ADCEx_MultiModeConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000756:	f000 fc71 	bl	800103c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_ADC1_Init+0x10c>)
 800075c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075e:	2306      	movs	r3, #6
 8000760:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000762:	2307      	movs	r3, #7
 8000764:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000766:	237f      	movs	r3, #127	; 0x7f
 8000768:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076a:	2304      	movs	r3, #4
 800076c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	480d      	ldr	r0, [pc, #52]	; (80007ac <MX_ADC1_Init+0x108>)
 8000778:	f001 ff16 	bl	80025a8 <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000782:	f000 fc5b 	bl	800103c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_ADC1_Init+0x110>)
 8000788:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800078a:	230c      	movs	r3, #12
 800078c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <MX_ADC1_Init+0x108>)
 8000794:	f001 ff08 	bl	80025a8 <HAL_ADC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800079e:	f000 fc4d 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3730      	adds	r7, #48	; 0x30
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000002c 	.word	0x2000002c
 80007b0:	04300002 	.word	0x04300002
 80007b4:	08600004 	.word	0x08600004

080007b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	2224      	movs	r2, #36	; 0x24
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f007 fbce 	bl	8007f68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	463b      	mov	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <MX_TIM3_Init+0xa4>)
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <MX_TIM3_Init+0xa8>)
 80007da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_TIM3_Init+0xa4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_TIM3_Init+0xa4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_TIM3_Init+0xa4>)
 80007ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f0:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_TIM3_Init+0xa4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <MX_TIM3_Init+0xa4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80007fc:	2303      	movs	r3, #3
 80007fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000804:	2301      	movs	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000814:	2301      	movs	r3, #1
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4619      	mov	r1, r3
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <MX_TIM3_Init+0xa4>)
 8000828:	f004 fe62 	bl	80054f0 <HAL_TIM_Encoder_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000832:	f000 fc03 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	4619      	mov	r1, r3
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <MX_TIM3_Init+0xa4>)
 8000844:	f005 ff3c 	bl	80066c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800084e:	f000 fbf5 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	3730      	adds	r7, #48	; 0x30
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000f8 	.word	0x200000f8
 8000860:	40000400 	.word	0x40000400

08000864 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000876:	463b      	mov	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]
 8000886:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <MX_TIM4_Init+0xac>)
 800088a:	4a22      	ldr	r2, [pc, #136]	; (8000914 <MX_TIM4_Init+0xb0>)
 800088c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <MX_TIM4_Init+0xac>)
 8000890:	22a9      	movs	r2, #169	; 0xa9
 8000892:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_TIM4_Init+0xac>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_TIM4_Init+0xac>)
 800089c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80008a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_TIM4_Init+0xac>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_TIM4_Init+0xac>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008ae:	4818      	ldr	r0, [pc, #96]	; (8000910 <MX_TIM4_Init+0xac>)
 80008b0:	f004 fcb4 	bl	800521c <HAL_TIM_PWM_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80008ba:	f000 fbbf 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4810      	ldr	r0, [pc, #64]	; (8000910 <MX_TIM4_Init+0xac>)
 80008ce:	f005 fef7 	bl	80066c0 <HAL_TIMEx_MasterConfigSynchronization>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80008d8:	f000 fbb0 	bl	800103c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008dc:	2360      	movs	r3, #96	; 0x60
 80008de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	4619      	mov	r1, r3
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <MX_TIM4_Init+0xac>)
 80008f4:	f004 fff2 	bl	80058dc <HAL_TIM_PWM_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80008fe:	f000 fb9d 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000902:	4803      	ldr	r0, [pc, #12]	; (8000910 <MX_TIM4_Init+0xac>)
 8000904:	f000 fcea 	bl	80012dc <HAL_TIM_MspPostInit>

}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	; 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000144 	.word	0x20000144
 8000914:	40000800 	.word	0x40000800

08000918 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_TIM5_Init+0x94>)
 8000938:	4a1d      	ldr	r2, [pc, #116]	; (80009b0 <MX_TIM5_Init+0x98>)
 800093a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800093c:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <MX_TIM5_Init+0x94>)
 800093e:	22a9      	movs	r2, #169	; 0xa9
 8000940:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000942:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_TIM5_Init+0x94>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <MX_TIM5_Init+0x94>)
 800094a:	f04f 32ff 	mov.w	r2, #4294967295
 800094e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_TIM5_Init+0x94>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_TIM5_Init+0x94>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800095c:	4813      	ldr	r0, [pc, #76]	; (80009ac <MX_TIM5_Init+0x94>)
 800095e:	f004 fb1d 	bl	8004f9c <HAL_TIM_Base_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000968:	f000 fb68 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000970:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000972:	f107 0310 	add.w	r3, r7, #16
 8000976:	4619      	mov	r1, r3
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <MX_TIM5_Init+0x94>)
 800097a:	f005 f8c3 	bl	8005b04 <HAL_TIM_ConfigClockSource>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000984:	f000 fb5a 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_TIM5_Init+0x94>)
 8000996:	f005 fe93 	bl	80066c0 <HAL_TIMEx_MasterConfigSynchronization>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80009a0:	f000 fb4c 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	3720      	adds	r7, #32
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000190 	.word	0x20000190
 80009b0:	40000c00 	.word	0x40000c00

080009b4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0310 	add.w	r3, r7, #16
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <MX_TIM15_Init+0x9c>)
 80009d4:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <MX_TIM15_Init+0xa0>)
 80009d6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 169;
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <MX_TIM15_Init+0x9c>)
 80009da:	22a9      	movs	r2, #169	; 0xa9
 80009dc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <MX_TIM15_Init+0x9c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <MX_TIM15_Init+0x9c>)
 80009e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <MX_TIM15_Init+0x9c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_TIM15_Init+0x9c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_TIM15_Init+0x9c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80009fe:	4814      	ldr	r0, [pc, #80]	; (8000a50 <MX_TIM15_Init+0x9c>)
 8000a00:	f004 facc 	bl	8004f9c <HAL_TIM_Base_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000a0a:	f000 fb17 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480d      	ldr	r0, [pc, #52]	; (8000a50 <MX_TIM15_Init+0x9c>)
 8000a1c:	f005 f872 	bl	8005b04 <HAL_TIM_ConfigClockSource>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000a26:	f000 fb09 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a2a:	2320      	movs	r3, #32
 8000a2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_TIM15_Init+0x9c>)
 8000a38:	f005 fe42 	bl	80066c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000a42:	f000 fafb 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	3720      	adds	r7, #32
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200001dc 	.word	0x200001dc
 8000a54:	40014000 	.word	0x40014000

08000a58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a5c:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <MX_USART2_UART_Init+0x90>)
 8000a5e:	4a23      	ldr	r2, [pc, #140]	; (8000aec <MX_USART2_UART_Init+0x94>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <MX_USART2_UART_Init+0x90>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <MX_USART2_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_USART2_UART_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MX_USART2_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_USART2_UART_Init+0x90>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_USART2_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_USART2_UART_Init+0x90>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_USART2_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_USART2_UART_Init+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_USART2_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa0:	4811      	ldr	r0, [pc, #68]	; (8000ae8 <MX_USART2_UART_Init+0x90>)
 8000aa2:	f005 fee9 	bl	8006878 <HAL_UART_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000aac:	f000 fac6 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_USART2_UART_Init+0x90>)
 8000ab4:	f007 f98d 	bl	8007dd2 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000abe:	f000 fabd 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <MX_USART2_UART_Init+0x90>)
 8000ac6:	f007 f9c2 	bl	8007e4e <HAL_UARTEx_SetRxFifoThreshold>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad0:	f000 fab4 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_USART2_UART_Init+0x90>)
 8000ad6:	f007 f943 	bl	8007d60 <HAL_UARTEx_DisableFifoMode>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae0:	f000 faac 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000228 	.word	0x20000228
 8000aec:	40004400 	.word	0x40004400

08000af0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_DMA_Init+0x70>)
 8000af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000afa:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <MX_DMA_Init+0x70>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	6493      	str	r3, [r2, #72]	; 0x48
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_DMA_Init+0x70>)
 8000b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_DMA_Init+0x70>)
 8000b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b12:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <MX_DMA_Init+0x70>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6493      	str	r3, [r2, #72]	; 0x48
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_DMA_Init+0x70>)
 8000b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f002 fce1 	bl	80034f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b30:	200b      	movs	r0, #11
 8000b32:	f002 fcf8 	bl	8003526 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	200c      	movs	r0, #12
 8000b3c:	f002 fcd9 	bl	80034f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b40:	200c      	movs	r0, #12
 8000b42:	f002 fcf0 	bl	8003526 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	200d      	movs	r0, #13
 8000b4c:	f002 fcd1 	bl	80034f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b50:	200d      	movs	r0, #13
 8000b52:	f002 fce8 	bl	8003526 <HAL_NVIC_EnableIRQ>

}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	4b49      	ldr	r3, [pc, #292]	; (8000ca0 <MX_GPIO_Init+0x13c>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4a48      	ldr	r2, [pc, #288]	; (8000ca0 <MX_GPIO_Init+0x13c>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b86:	4b46      	ldr	r3, [pc, #280]	; (8000ca0 <MX_GPIO_Init+0x13c>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b92:	4b43      	ldr	r3, [pc, #268]	; (8000ca0 <MX_GPIO_Init+0x13c>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a42      	ldr	r2, [pc, #264]	; (8000ca0 <MX_GPIO_Init+0x13c>)
 8000b98:	f043 0320 	orr.w	r3, r3, #32
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b40      	ldr	r3, [pc, #256]	; (8000ca0 <MX_GPIO_Init+0x13c>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0320 	and.w	r3, r3, #32
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b3d      	ldr	r3, [pc, #244]	; (8000ca0 <MX_GPIO_Init+0x13c>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a3c      	ldr	r2, [pc, #240]	; (8000ca0 <MX_GPIO_Init+0x13c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b3a      	ldr	r3, [pc, #232]	; (8000ca0 <MX_GPIO_Init+0x13c>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <MX_GPIO_Init+0x13c>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a36      	ldr	r2, [pc, #216]	; (8000ca0 <MX_GPIO_Init+0x13c>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b34      	ldr	r3, [pc, #208]	; (8000ca0 <MX_GPIO_Init+0x13c>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2101      	movs	r1, #1
 8000bde:	4831      	ldr	r0, [pc, #196]	; (8000ca4 <MX_GPIO_Init+0x140>)
 8000be0:	f003 f970 	bl	8003ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2120      	movs	r1, #32
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bec:	f003 f96a 	bl	8003ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4827      	ldr	r0, [pc, #156]	; (8000ca4 <MX_GPIO_Init+0x140>)
 8000c08:	f002 ffda 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4820      	ldr	r0, [pc, #128]	; (8000ca4 <MX_GPIO_Init+0x140>)
 8000c24:	f002 ffcc 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c38:	230c      	movs	r3, #12
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f002 ffbb 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c4a:	2320      	movs	r3, #32
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f002 ffac 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <MX_GPIO_Init+0x140>)
 8000c84:	f002 ff9c 	bl	8003bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2028      	movs	r0, #40	; 0x28
 8000c8e:	f002 fc30 	bl	80034f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c92:	2028      	movs	r0, #40	; 0x28
 8000c94:	f002 fc47 	bl	8003526 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c98:	bf00      	nop
 8000c9a:	3728      	adds	r7, #40	; 0x28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48000800 	.word	0x48000800

08000ca8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca8:	b4b0      	push	{r4, r5, r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d108      	bne.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbe:	1e54      	subs	r4, r2, #1
 8000cc0:	f143 0500 	adc.w	r5, r3, #0
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000cc6:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bcb0      	pop	{r4, r5, r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	20000190 	.word	0x20000190
 8000cd8:	20000380 	.word	0x20000380

08000cdc <updateInput>:
{
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
}

void updateInput()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
	sumEncode = 0;
 8000ce2:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <updateInput+0x118>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
	sumTrimpot = 0;
 8000ce8:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <updateInput+0x11c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i<200 ; i++ )
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	e019      	b.n	8000d28 <updateInput+0x4c>
	{
		sumEncode += InputRead[2*i];
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4a40      	ldr	r2, [pc, #256]	; (8000dfc <updateInput+0x120>)
 8000cfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b3c      	ldr	r3, [pc, #240]	; (8000df4 <updateInput+0x118>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	4a3b      	ldr	r2, [pc, #236]	; (8000df4 <updateInput+0x118>)
 8000d08:	6013      	str	r3, [r2, #0]
		sumTrimpot += InputRead[1 + (2*i)];
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	3301      	adds	r3, #1
 8000d10:	4a3a      	ldr	r2, [pc, #232]	; (8000dfc <updateInput+0x120>)
 8000d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d16:	461a      	mov	r2, r3
 8000d18:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <updateInput+0x11c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a36      	ldr	r2, [pc, #216]	; (8000df8 <updateInput+0x11c>)
 8000d20:	6013      	str	r3, [r2, #0]
	for(int i = 0 ; i<200 ; i++ )
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3301      	adds	r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2bc7      	cmp	r3, #199	; 0xc7
 8000d2c:	dde2      	ble.n	8000cf4 <updateInput+0x18>
	}
	avgEncode = sumEncode/200;
 8000d2e:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <updateInput+0x118>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a33      	ldr	r2, [pc, #204]	; (8000e00 <updateInput+0x124>)
 8000d34:	fba2 2303 	umull	r2, r3, r2, r3
 8000d38:	099b      	lsrs	r3, r3, #6
 8000d3a:	4a32      	ldr	r2, [pc, #200]	; (8000e04 <updateInput+0x128>)
 8000d3c:	6013      	str	r3, [r2, #0]
	avgTrimpot = sumTrimpot/200;
 8000d3e:	4b2e      	ldr	r3, [pc, #184]	; (8000df8 <updateInput+0x11c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a2f      	ldr	r2, [pc, #188]	; (8000e00 <updateInput+0x124>)
 8000d44:	fba2 2303 	umull	r2, r3, r2, r3
 8000d48:	099b      	lsrs	r3, r3, #6
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <updateInput+0x12c>)
 8000d4e:	801a      	strh	r2, [r3, #0]

	directError = avgTrimpot - avgEncode;
 8000d50:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <updateInput+0x12c>)
 8000d52:	881a      	ldrh	r2, [r3, #0]
 8000d54:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <updateInput+0x128>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <updateInput+0x130>)
 8000d62:	801a      	strh	r2, [r3, #0]

	if (directError > 0)
 8000d64:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <updateInput+0x130>)
 8000d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	dd0a      	ble.n	8000d84 <updateInput+0xa8>
	{
		wrappedError = directError - 4096; // Moving backward with wrap-around
 8000d6e:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <updateInput+0x130>)
 8000d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	b21a      	sxth	r2, r3
 8000d7e:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <updateInput+0x134>)
 8000d80:	801a      	strh	r2, [r3, #0]
 8000d82:	e009      	b.n	8000d98 <updateInput+0xbc>
	}
	else
	{
		wrappedError = directError + 4096; // Moving forward with wrap-around
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <updateInput+0x130>)
 8000d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <updateInput+0x134>)
 8000d96:	801a      	strh	r2, [r3, #0]
	}

	if (abs(directError) < abs(wrappedError))
 8000d98:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <updateInput+0x130>)
 8000d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bfb8      	it	lt
 8000da2:	425b      	neglt	r3, r3
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <updateInput+0x134>)
 8000da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	bfb8      	it	lt
 8000db0:	425b      	neglt	r3, r3
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d205      	bcs.n	8000dc4 <updateInput+0xe8>
	{
		Error = directError;
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <updateInput+0x130>)
 8000dba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <updateInput+0x138>)
 8000dc0:	801a      	strh	r2, [r3, #0]
 8000dc2:	e004      	b.n	8000dce <updateInput+0xf2>
	}
	else
	{
		Error = wrappedError;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <updateInput+0x134>)
 8000dc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <updateInput+0x138>)
 8000dcc:	801a      	strh	r2, [r3, #0]
	}

	if (Error < 0)
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <updateInput+0x138>)
 8000dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	da03      	bge.n	8000de0 <updateInput+0x104>
	{
		direction = 0; // Counter-clockwise / backward
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <updateInput+0x13c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
 8000dde:	e002      	b.n	8000de6 <updateInput+0x10a>
	}
	else
	{
		direction = 1; // Clockwise / forward
 8000de0:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <updateInput+0x13c>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
	}

	PIDcalculate();
 8000de6:	f000 f893 	bl	8000f10 <PIDcalculate>

//	PWM = arm_pid_f32(&PID, Error);
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200006a8 	.word	0x200006a8
 8000df8:	200006ac 	.word	0x200006ac
 8000dfc:	20000388 	.word	0x20000388
 8000e00:	51eb851f 	.word	0x51eb851f
 8000e04:	200006b0 	.word	0x200006b0
 8000e08:	200006b4 	.word	0x200006b4
 8000e0c:	200006c6 	.word	0x200006c6
 8000e10:	200006cc 	.word	0x200006cc
 8000e14:	200006c0 	.word	0x200006c0
 8000e18:	200006ca 	.word	0x200006ca

08000e1c <motorControl>:

void motorControl()
{
 8000e1c:	b598      	push	{r3, r4, r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	static uint16_t motorTime = 0;
	if(motorTime < HAL_GetTick())
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <motorControl+0x64>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	461c      	mov	r4, r3
 8000e26:	f000 fc5b 	bl	80016e0 <HAL_GetTick>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	d224      	bcs.n	8000e7a <motorControl+0x5e>
	{
		motorTime = HAL_GetTick()+1;
 8000e30:	f000 fc56 	bl	80016e0 <HAL_GetTick>
 8000e34:	4603      	mov	r3, r0
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	3301      	adds	r3, #1
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <motorControl+0x64>)
 8000e3e:	801a      	strh	r2, [r3, #0]
		if(direction == 0) // ทว�?เ�?�?ม
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <motorControl+0x68>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d10a      	bne.n	8000e5e <motorControl+0x42>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	480e      	ldr	r0, [pc, #56]	; (8000e88 <motorControl+0x6c>)
 8000e4e:	f003 f839 	bl	8003ec4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM);
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <motorControl+0x70>)
 8000e54:	881a      	ldrh	r2, [r3, #0]
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <motorControl+0x74>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM);
		}

	}
}
 8000e5c:	e00d      	b.n	8000e7a <motorControl+0x5e>
		else if(direction == 1) // ตามเ�?�?ม
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <motorControl+0x68>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d109      	bne.n	8000e7a <motorControl+0x5e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4807      	ldr	r0, [pc, #28]	; (8000e88 <motorControl+0x6c>)
 8000e6c:	f003 f82a 	bl	8003ec4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM);
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <motorControl+0x70>)
 8000e72:	881a      	ldrh	r2, [r3, #0]
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <motorControl+0x74>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e7a:	bf00      	nop
 8000e7c:	bd98      	pop	{r3, r4, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200006ea 	.word	0x200006ea
 8000e84:	200006ca 	.word	0x200006ca
 8000e88:	48000800 	.word	0x48000800
 8000e8c:	200006c8 	.word	0x200006c8
 8000e90:	20000144 	.word	0x20000144

08000e94 <Communication>:

void Communication()
{
 8000e94:	b598      	push	{r3, r4, r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	static uint16_t CommTime = 0;
		if(CommTime < HAL_GetTick())
 8000e98:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <Communication+0x64>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	461c      	mov	r4, r3
 8000e9e:	f000 fc1f 	bl	80016e0 <HAL_GetTick>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d225      	bcs.n	8000ef4 <Communication+0x60>
		{
			CommTime = HAL_GetTick()+5;
 8000ea8:	f000 fc1a 	bl	80016e0 <HAL_GetTick>
 8000eac:	4603      	mov	r3, r0
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	3305      	adds	r3, #5
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <Communication+0x64>)
 8000eb6:	801a      	strh	r2, [r3, #0]
			HigherPos = (uint8_t)(avgEncode >> 8);
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <Communication+0x68>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <Communication+0x6c>)
 8000ec2:	701a      	strb	r2, [r3, #0]
			LowerPos = (uint8_t)avgEncode;
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <Communication+0x68>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <Communication+0x70>)
 8000ecc:	701a      	strb	r2, [r3, #0]

			TxBuffer[0] = 69;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <Communication+0x74>)
 8000ed0:	2245      	movs	r2, #69	; 0x45
 8000ed2:	701a      	strb	r2, [r3, #0]
			TxBuffer[1] = HigherPos;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <Communication+0x6c>)
 8000ed6:	781a      	ldrb	r2, [r3, #0]
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <Communication+0x74>)
 8000eda:	705a      	strb	r2, [r3, #1]
			TxBuffer[2] = LowerPos;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <Communication+0x70>)
 8000ede:	781a      	ldrb	r2, [r3, #0]
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <Communication+0x74>)
 8000ee2:	709a      	strb	r2, [r3, #2]
			TxBuffer[3] = 10;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <Communication+0x74>)
 8000ee6:	220a      	movs	r2, #10
 8000ee8:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, 4);
 8000eea:	2204      	movs	r2, #4
 8000eec:	4906      	ldr	r1, [pc, #24]	; (8000f08 <Communication+0x74>)
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <Communication+0x78>)
 8000ef0:	f005 fd12 	bl	8006918 <HAL_UART_Transmit_DMA>
		}
}
 8000ef4:	bf00      	nop
 8000ef6:	bd98      	pop	{r3, r4, r7, pc}
 8000ef8:	200006ec 	.word	0x200006ec
 8000efc:	200006b0 	.word	0x200006b0
 8000f00:	200006e8 	.word	0x200006e8
 8000f04:	200006e9 	.word	0x200006e9
 8000f08:	200006e4 	.word	0x200006e4
 8000f0c:	20000228 	.word	0x20000228

08000f10 <PIDcalculate>:

void PIDcalculate()
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
	cmd = cmd_1 + A0*Error + A1*Error_1 + A2 * Error_2;
 8000f14:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <PIDcalculate+0xf4>)
 8000f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1a:	ee07 3a90 	vmov	s15, r3
 8000f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f22:	4b39      	ldr	r3, [pc, #228]	; (8001008 <PIDcalculate+0xf8>)
 8000f24:	edd3 7a00 	vldr	s15, [r3]
 8000f28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f2c:	4b37      	ldr	r3, [pc, #220]	; (800100c <PIDcalculate+0xfc>)
 8000f2e:	edd3 7a00 	vldr	s15, [r3]
 8000f32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f36:	4b36      	ldr	r3, [pc, #216]	; (8001010 <PIDcalculate+0x100>)
 8000f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f44:	4b33      	ldr	r3, [pc, #204]	; (8001014 <PIDcalculate+0x104>)
 8000f46:	edd3 7a00 	vldr	s15, [r3]
 8000f4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f52:	4b31      	ldr	r3, [pc, #196]	; (8001018 <PIDcalculate+0x108>)
 8000f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f60:	4b2e      	ldr	r3, [pc, #184]	; (800101c <PIDcalculate+0x10c>)
 8000f62:	edd3 7a00 	vldr	s15, [r3]
 8000f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <PIDcalculate+0x110>)
 8000f70:	edc3 7a00 	vstr	s15, [r3]
	if (cmd > 20000 && direction == 1) // ตามเ�?�?ม Anti windup
 8000f74:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <PIDcalculate+0x110>)
 8000f76:	edd3 7a00 	vldr	s15, [r3]
 8000f7a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001024 <PIDcalculate+0x114>
 8000f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f86:	dd0a      	ble.n	8000f9e <PIDcalculate+0x8e>
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <PIDcalculate+0x118>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d106      	bne.n	8000f9e <PIDcalculate+0x8e>
	{
		cmd = 20000;
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <PIDcalculate+0x110>)
 8000f92:	4a26      	ldr	r2, [pc, #152]	; (800102c <PIDcalculate+0x11c>)
 8000f94:	601a      	str	r2, [r3, #0]
		direction = 1;
 8000f96:	4b24      	ldr	r3, [pc, #144]	; (8001028 <PIDcalculate+0x118>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	e013      	b.n	8000fc6 <PIDcalculate+0xb6>
	}
	else if (cmd < -20000 && direction == 0) // ทว�?เ�?�?ม
 8000f9e:	4b20      	ldr	r3, [pc, #128]	; (8001020 <PIDcalculate+0x110>)
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001030 <PIDcalculate+0x120>
 8000fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	d509      	bpl.n	8000fc6 <PIDcalculate+0xb6>
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <PIDcalculate+0x118>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d105      	bne.n	8000fc6 <PIDcalculate+0xb6>
	{
		cmd = -20000;
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <PIDcalculate+0x110>)
 8000fbc:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <PIDcalculate+0x124>)
 8000fbe:	601a      	str	r2, [r3, #0]
		direction = 0;
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <PIDcalculate+0x118>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
	}
	cmd_1 = cmd;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <PIDcalculate+0x110>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <PIDcalculate+0xfc>)
 8000fcc:	6013      	str	r3, [r2, #0]
	Error_2 = Error_1;
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <PIDcalculate+0x100>)
 8000fd0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <PIDcalculate+0x108>)
 8000fd6:	801a      	strh	r2, [r3, #0]
	Error_1 = Error;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <PIDcalculate+0xf4>)
 8000fda:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <PIDcalculate+0x100>)
 8000fe0:	801a      	strh	r2, [r3, #0]

	PWM = fabs(cmd);
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <PIDcalculate+0x110>)
 8000fe4:	edd3 7a00 	vldr	s15, [r3]
 8000fe8:	eef0 7ae7 	vabs.f32	s15, s15
 8000fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ff0:	ee17 3a90 	vmov	r3, s15
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <PIDcalculate+0x128>)
 8000ff8:	801a      	strh	r2, [r3, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	200006c0 	.word	0x200006c0
 8001008:	200006d8 	.word	0x200006d8
 800100c:	200006bc 	.word	0x200006bc
 8001010:	200006c2 	.word	0x200006c2
 8001014:	200006dc 	.word	0x200006dc
 8001018:	200006c4 	.word	0x200006c4
 800101c:	200006e0 	.word	0x200006e0
 8001020:	200006b8 	.word	0x200006b8
 8001024:	469c4000 	.word	0x469c4000
 8001028:	200006ca 	.word	0x200006ca
 800102c:	469c4000 	.word	0x469c4000
 8001030:	c69c4000 	.word	0xc69c4000
 8001034:	c69c4000 	.word	0xc69c4000
 8001038:	200006c8 	.word	0x200006c8

0800103c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
}
 8001042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001044:	e7fe      	b.n	8001044 <Error_Handler+0x8>
	...

08001048 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_MspInit+0x44>)
 8001050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_MspInit+0x44>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6613      	str	r3, [r2, #96]	; 0x60
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_MspInit+0x44>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_MspInit+0x44>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <HAL_MspInit+0x44>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001070:	6593      	str	r3, [r2, #88]	; 0x58
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_MspInit+0x44>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800107e:	f003 f801 	bl	8004084 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b09e      	sub	sp, #120	; 0x78
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2254      	movs	r2, #84	; 0x54
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f006 ff59 	bl	8007f68 <memset>
  if(hadc->Instance==ADC1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010be:	d167      	bne.n	8001190 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010ca:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 fd15 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010dc:	f7ff ffae 	bl	800103c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010e0:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <HAL_ADC_MspInit+0x108>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	4a2c      	ldr	r2, [pc, #176]	; (8001198 <HAL_ADC_MspInit+0x108>)
 80010e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <HAL_ADC_MspInit+0x108>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <HAL_ADC_MspInit+0x108>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	4a26      	ldr	r2, [pc, #152]	; (8001198 <HAL_ADC_MspInit+0x108>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_ADC_MspInit+0x108>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001110:	2303      	movs	r3, #3
 8001112:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001114:	2303      	movs	r3, #3
 8001116:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001120:	4619      	mov	r1, r3
 8001122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001126:	f002 fd4b 	bl	8003bc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <HAL_ADC_MspInit+0x10c>)
 800112c:	4a1c      	ldr	r2, [pc, #112]	; (80011a0 <HAL_ADC_MspInit+0x110>)
 800112e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <HAL_ADC_MspInit+0x10c>)
 8001132:	2205      	movs	r2, #5
 8001134:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_ADC_MspInit+0x10c>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_ADC_MspInit+0x10c>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_ADC_MspInit+0x10c>)
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_ADC_MspInit+0x10c>)
 800114a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800114e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_ADC_MspInit+0x10c>)
 8001152:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001156:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_ADC_MspInit+0x10c>)
 800115a:	2220      	movs	r2, #32
 800115c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_ADC_MspInit+0x10c>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <HAL_ADC_MspInit+0x10c>)
 8001166:	f002 f9f9 	bl	800355c <HAL_DMA_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001170:	f7ff ff64 	bl	800103c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a09      	ldr	r2, [pc, #36]	; (800119c <HAL_ADC_MspInit+0x10c>)
 8001178:	655a      	str	r2, [r3, #84]	; 0x54
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_ADC_MspInit+0x10c>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2012      	movs	r0, #18
 8001186:	f002 f9b4 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800118a:	2012      	movs	r0, #18
 800118c:	f002 f9cb 	bl	8003526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	3778      	adds	r7, #120	; 0x78
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021000 	.word	0x40021000
 800119c:	20000098 	.word	0x20000098
 80011a0:	40020008 	.word	0x40020008

080011a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a17      	ldr	r2, [pc, #92]	; (8001220 <HAL_TIM_Encoder_MspInit+0x7c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d128      	bne.n	8001218 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_TIM_Encoder_MspInit+0x80>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	4a16      	ldr	r2, [pc, #88]	; (8001224 <HAL_TIM_Encoder_MspInit+0x80>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6593      	str	r3, [r2, #88]	; 0x58
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_TIM_Encoder_MspInit+0x80>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_TIM_Encoder_MspInit+0x80>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	4a10      	ldr	r2, [pc, #64]	; (8001224 <HAL_TIM_Encoder_MspInit+0x80>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_TIM_Encoder_MspInit+0x80>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011f6:	23c0      	movs	r3, #192	; 0xc0
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001206:	2302      	movs	r3, #2
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001214:	f002 fcd4 	bl	8003bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001218:	bf00      	nop
 800121a:	3728      	adds	r7, #40	; 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40000400 	.word	0x40000400
 8001224:	40021000 	.word	0x40021000

08001228 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <HAL_TIM_PWM_MspInit+0x38>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d10b      	bne.n	8001252 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_TIM_PWM_MspInit+0x3c>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	4a09      	ldr	r2, [pc, #36]	; (8001264 <HAL_TIM_PWM_MspInit+0x3c>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6593      	str	r3, [r2, #88]	; 0x58
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <HAL_TIM_PWM_MspInit+0x3c>)
 8001248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40000800 	.word	0x40000800
 8001264:	40021000 	.word	0x40021000

08001268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <HAL_TIM_Base_MspInit+0x68>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d10c      	bne.n	8001294 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_TIM_Base_MspInit+0x6c>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127e:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <HAL_TIM_Base_MspInit+0x6c>)
 8001280:	f043 0308 	orr.w	r3, r3, #8
 8001284:	6593      	str	r3, [r2, #88]	; 0x58
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_TIM_Base_MspInit+0x6c>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001292:	e018      	b.n	80012c6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM15)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <HAL_TIM_Base_MspInit+0x70>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d113      	bne.n	80012c6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <HAL_TIM_Base_MspInit+0x6c>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a2:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <HAL_TIM_Base_MspInit+0x6c>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6613      	str	r3, [r2, #96]	; 0x60
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_TIM_Base_MspInit+0x6c>)
 80012ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	2018      	movs	r0, #24
 80012bc:	f002 f919 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80012c0:	2018      	movs	r0, #24
 80012c2:	f002 f930 	bl	8003526 <HAL_NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40000c00 	.word	0x40000c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40014000 	.word	0x40014000

080012dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a11      	ldr	r2, [pc, #68]	; (8001340 <HAL_TIM_MspPostInit+0x64>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d11b      	bne.n	8001336 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_TIM_MspPostInit+0x68>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	4a10      	ldr	r2, [pc, #64]	; (8001344 <HAL_TIM_MspPostInit+0x68>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_TIM_MspPostInit+0x68>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001316:	2340      	movs	r3, #64	; 0x40
 8001318:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001326:	2302      	movs	r3, #2
 8001328:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <HAL_TIM_MspPostInit+0x6c>)
 8001332:	f002 fc45 	bl	8003bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	3720      	adds	r7, #32
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40000800 	.word	0x40000800
 8001344:	40021000 	.word	0x40021000
 8001348:	48000400 	.word	0x48000400

0800134c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b09e      	sub	sp, #120	; 0x78
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	2254      	movs	r2, #84	; 0x54
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f006 fdfb 	bl	8007f68 <memset>
  if(huart->Instance==USART2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a4d      	ldr	r2, [pc, #308]	; (80014ac <HAL_UART_MspInit+0x160>)
 8001378:	4293      	cmp	r3, r2
 800137a:	f040 8093 	bne.w	80014a4 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800137e:	2302      	movs	r3, #2
 8001380:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	4618      	mov	r0, r3
 800138c:	f003 fbb8 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001396:	f7ff fe51 	bl	800103c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800139a:	4b45      	ldr	r3, [pc, #276]	; (80014b0 <HAL_UART_MspInit+0x164>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	4a44      	ldr	r2, [pc, #272]	; (80014b0 <HAL_UART_MspInit+0x164>)
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	6593      	str	r3, [r2, #88]	; 0x58
 80013a6:	4b42      	ldr	r3, [pc, #264]	; (80014b0 <HAL_UART_MspInit+0x164>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <HAL_UART_MspInit+0x164>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <HAL_UART_MspInit+0x164>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013be:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <HAL_UART_MspInit+0x164>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80013ca:	f248 0304 	movw	r3, #32772	; 0x8004
 80013ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013dc:	2307      	movs	r3, #7
 80013de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f002 fbe9 	bl	8003bc0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80013ee:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <HAL_UART_MspInit+0x168>)
 80013f0:	4a31      	ldr	r2, [pc, #196]	; (80014b8 <HAL_UART_MspInit+0x16c>)
 80013f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80013f4:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <HAL_UART_MspInit+0x168>)
 80013f6:	221a      	movs	r2, #26
 80013f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <HAL_UART_MspInit+0x168>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001400:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <HAL_UART_MspInit+0x168>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001406:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <HAL_UART_MspInit+0x168>)
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <HAL_UART_MspInit+0x168>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001412:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <HAL_UART_MspInit+0x168>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <HAL_UART_MspInit+0x168>)
 800141a:	2220      	movs	r2, #32
 800141c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800141e:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <HAL_UART_MspInit+0x168>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001424:	4823      	ldr	r0, [pc, #140]	; (80014b4 <HAL_UART_MspInit+0x168>)
 8001426:	f002 f899 	bl	800355c <HAL_DMA_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001430:	f7ff fe04 	bl	800103c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <HAL_UART_MspInit+0x168>)
 8001438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800143c:	4a1d      	ldr	r2, [pc, #116]	; (80014b4 <HAL_UART_MspInit+0x168>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <HAL_UART_MspInit+0x170>)
 8001444:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <HAL_UART_MspInit+0x174>)
 8001446:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <HAL_UART_MspInit+0x170>)
 800144a:	221b      	movs	r2, #27
 800144c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_UART_MspInit+0x170>)
 8001450:	2210      	movs	r2, #16
 8001452:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <HAL_UART_MspInit+0x170>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <HAL_UART_MspInit+0x170>)
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <HAL_UART_MspInit+0x170>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_UART_MspInit+0x170>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <HAL_UART_MspInit+0x170>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_UART_MspInit+0x170>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001478:	4810      	ldr	r0, [pc, #64]	; (80014bc <HAL_UART_MspInit+0x170>)
 800147a:	f002 f86f 	bl	800355c <HAL_DMA_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8001484:	f7ff fdda 	bl	800103c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a0c      	ldr	r2, [pc, #48]	; (80014bc <HAL_UART_MspInit+0x170>)
 800148c:	67da      	str	r2, [r3, #124]	; 0x7c
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_UART_MspInit+0x170>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	2026      	movs	r0, #38	; 0x26
 800149a:	f002 f82a 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800149e:	2026      	movs	r0, #38	; 0x26
 80014a0:	f002 f841 	bl	8003526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014a4:	bf00      	nop
 80014a6:	3778      	adds	r7, #120	; 0x78
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40004400 	.word	0x40004400
 80014b0:	40021000 	.word	0x40021000
 80014b4:	200002bc 	.word	0x200002bc
 80014b8:	4002001c 	.word	0x4002001c
 80014bc:	2000031c 	.word	0x2000031c
 80014c0:	40020030 	.word	0x40020030

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c8:	e7fe      	b.n	80014c8 <NMI_Handler+0x4>

080014ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <MemManage_Handler+0x4>

080014d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001510:	f000 f8d4 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <DMA1_Channel1_IRQHandler+0x10>)
 800151e:	f002 fa00 	bl	8003922 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000098 	.word	0x20000098

0800152c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <DMA1_Channel2_IRQHandler+0x10>)
 8001532:	f002 f9f6 	bl	8003922 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200002bc 	.word	0x200002bc

08001540 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <DMA1_Channel3_IRQHandler+0x10>)
 8001546:	f002 f9ec 	bl	8003922 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000031c 	.word	0x2000031c

08001554 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <ADC1_2_IRQHandler+0x10>)
 800155a:	f000 fd9d 	bl	8002098 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000002c 	.word	0x2000002c

08001568 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800156e:	f004 f865 	bl	800563c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200001dc 	.word	0x200001dc

0800157c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <USART2_IRQHandler+0x10>)
 8001582:	f005 fa49 	bl	8006a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000228 	.word	0x20000228

08001590 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001594:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001598:	f002 fcac 	bl	8003ef4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}

080015a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015c8:	f7ff ffea 	bl	80015a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ce:	490d      	ldr	r1, [pc, #52]	; (8001604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <LoopForever+0xe>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <LoopForever+0x12>)
  ldr r4, =_ebss
 80015e4:	4c0a      	ldr	r4, [pc, #40]	; (8001610 <LoopForever+0x16>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f2:	f006 fcc1 	bl	8007f78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015f6:	f7fe ff8d 	bl	8000514 <main>

080015fa <LoopForever>:

LoopForever:
    b LoopForever
 80015fa:	e7fe      	b.n	80015fa <LoopForever>
  ldr   r0, =_estack
 80015fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001608:	08008028 	.word	0x08008028
  ldr r2, =_sbss
 800160c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001610:	200006f4 	.word	0x200006f4

08001614 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC3_IRQHandler>

08001616 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001620:	2003      	movs	r0, #3
 8001622:	f001 ff5b 	bl	80034dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001626:	2000      	movs	r0, #0
 8001628:	f000 f80e 	bl	8001648 <HAL_InitTick>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	71fb      	strb	r3, [r7, #7]
 8001636:	e001      	b.n	800163c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001638:	f7ff fd06 	bl	8001048 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800163c:	79fb      	ldrb	r3, [r7, #7]

}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <HAL_InitTick+0x68>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d022      	beq.n	80016a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_InitTick+0x6c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HAL_InitTick+0x68>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001668:	fbb1 f3f3 	udiv	r3, r1, r3
 800166c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001670:	4618      	mov	r0, r3
 8001672:	f001 ff66 	bl	8003542 <HAL_SYSTICK_Config>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10f      	bne.n	800169c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b0f      	cmp	r3, #15
 8001680:	d809      	bhi.n	8001696 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001682:	2200      	movs	r2, #0
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	f04f 30ff 	mov.w	r0, #4294967295
 800168a:	f001 ff32 	bl	80034f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <HAL_InitTick+0x70>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	e007      	b.n	80016a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
 800169a:	e004      	b.n	80016a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e001      	b.n	80016a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000000c 	.word	0x2000000c
 80016b4:	20000004 	.word	0x20000004
 80016b8:	20000008 	.word	0x20000008

080016bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_IncTick+0x1c>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_IncTick+0x20>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4413      	add	r3, r2
 80016ca:	4a03      	ldr	r2, [pc, #12]	; (80016d8 <HAL_IncTick+0x1c>)
 80016cc:	6013      	str	r3, [r2, #0]
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	200006f0 	.word	0x200006f0
 80016dc:	2000000c 	.word	0x2000000c

080016e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	200006f0 	.word	0x200006f0

080016f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	609a      	str	r2, [r3, #8]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3360      	adds	r3, #96	; 0x60
 8001772:	461a      	mov	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <LL_ADC_SetOffset+0x44>)
 8001782:	4013      	ands	r3, r2
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	4313      	orrs	r3, r2
 8001790:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001798:	bf00      	nop
 800179a:	371c      	adds	r7, #28
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	03fff000 	.word	0x03fff000

080017a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3360      	adds	r3, #96	; 0x60
 80017b6:	461a      	mov	r2, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	3360      	adds	r3, #96	; 0x60
 80017e4:	461a      	mov	r2, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017fe:	bf00      	nop
 8001800:	371c      	adds	r7, #28
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800180a:	b480      	push	{r7}
 800180c:	b087      	sub	sp, #28
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3360      	adds	r3, #96	; 0x60
 800181a:	461a      	mov	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	431a      	orrs	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001834:	bf00      	nop
 8001836:	371c      	adds	r7, #28
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	3360      	adds	r3, #96	; 0x60
 8001850:	461a      	mov	r2, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	431a      	orrs	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800186a:	bf00      	nop
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	615a      	str	r2, [r3, #20]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b087      	sub	sp, #28
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3330      	adds	r3, #48	; 0x30
 80018d2:	461a      	mov	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	0a1b      	lsrs	r3, r3, #8
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	4413      	add	r3, r2
 80018e0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	211f      	movs	r1, #31
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	401a      	ands	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	0e9b      	lsrs	r3, r3, #26
 80018fa:	f003 011f 	and.w	r1, r3, #31
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	fa01 f303 	lsl.w	r3, r1, r3
 8001908:	431a      	orrs	r2, r3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800190e:	bf00      	nop
 8001910:	371c      	adds	r7, #28
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3314      	adds	r3, #20
 8001950:	461a      	mov	r2, r3
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	0e5b      	lsrs	r3, r3, #25
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	4413      	add	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	0d1b      	lsrs	r3, r3, #20
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	2107      	movs	r1, #7
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	401a      	ands	r2, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	0d1b      	lsrs	r3, r3, #20
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	431a      	orrs	r2, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800198a:	bf00      	nop
 800198c:	371c      	adds	r7, #28
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b0:	43db      	mvns	r3, r3
 80019b2:	401a      	ands	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0318 	and.w	r3, r3, #24
 80019ba:	4908      	ldr	r1, [pc, #32]	; (80019dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80019bc:	40d9      	lsrs	r1, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	400b      	ands	r3, r1
 80019c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c6:	431a      	orrs	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	0007ffff 	.word	0x0007ffff

080019e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 031f 	and.w	r3, r3, #31
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6093      	str	r3, [r2, #8]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a50:	d101      	bne.n	8001a56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001aa0:	d101      	bne.n	8001aa6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ac4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ac8:	f043 0201 	orr.w	r2, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <LL_ADC_IsEnabled+0x18>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <LL_ADC_IsEnabled+0x1a>
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b16:	f043 0204 	orr.w	r2, r3, #4
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d101      	bne.n	8001b42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d101      	bne.n	8001b68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e1a9      	b.n	8001ee6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d109      	bne.n	8001bb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff fa75 	bl	8001090 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff3f 	bl	8001a3c <LL_ADC_IsDeepPowerDownEnabled>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff25 	bl	8001a18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ff5a 	bl	8001a8c <LL_ADC_IsInternalRegulatorEnabled>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d115      	bne.n	8001c0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff3e 	bl	8001a64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001be8:	4b9c      	ldr	r3, [pc, #624]	; (8001e5c <HAL_ADC_Init+0x2e4>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	099b      	lsrs	r3, r3, #6
 8001bee:	4a9c      	ldr	r2, [pc, #624]	; (8001e60 <HAL_ADC_Init+0x2e8>)
 8001bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf4:	099b      	lsrs	r3, r3, #6
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bfc:	e002      	b.n	8001c04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f9      	bne.n	8001bfe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff3c 	bl	8001a8c <LL_ADC_IsInternalRegulatorEnabled>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10d      	bne.n	8001c36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1e:	f043 0210 	orr.w	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2a:	f043 0201 	orr.w	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ff75 	bl	8001b2a <LL_ADC_REG_IsConversionOngoing>
 8001c40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 8142 	bne.w	8001ed4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 813e 	bne.w	8001ed4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c60:	f043 0202 	orr.w	r2, r3, #2
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff35 	bl	8001adc <LL_ADC_IsEnabled>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d141      	bne.n	8001cfc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c80:	d004      	beq.n	8001c8c <HAL_ADC_Init+0x114>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a77      	ldr	r2, [pc, #476]	; (8001e64 <HAL_ADC_Init+0x2ec>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d10f      	bne.n	8001cac <HAL_ADC_Init+0x134>
 8001c8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c90:	f7ff ff24 	bl	8001adc <LL_ADC_IsEnabled>
 8001c94:	4604      	mov	r4, r0
 8001c96:	4873      	ldr	r0, [pc, #460]	; (8001e64 <HAL_ADC_Init+0x2ec>)
 8001c98:	f7ff ff20 	bl	8001adc <LL_ADC_IsEnabled>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4323      	orrs	r3, r4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf0c      	ite	eq
 8001ca4:	2301      	moveq	r3, #1
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	e012      	b.n	8001cd2 <HAL_ADC_Init+0x15a>
 8001cac:	486e      	ldr	r0, [pc, #440]	; (8001e68 <HAL_ADC_Init+0x2f0>)
 8001cae:	f7ff ff15 	bl	8001adc <LL_ADC_IsEnabled>
 8001cb2:	4604      	mov	r4, r0
 8001cb4:	486d      	ldr	r0, [pc, #436]	; (8001e6c <HAL_ADC_Init+0x2f4>)
 8001cb6:	f7ff ff11 	bl	8001adc <LL_ADC_IsEnabled>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	431c      	orrs	r4, r3
 8001cbe:	486c      	ldr	r0, [pc, #432]	; (8001e70 <HAL_ADC_Init+0x2f8>)
 8001cc0:	f7ff ff0c 	bl	8001adc <LL_ADC_IsEnabled>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4323      	orrs	r3, r4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf0c      	ite	eq
 8001ccc:	2301      	moveq	r3, #1
 8001cce:	2300      	movne	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d012      	beq.n	8001cfc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cde:	d004      	beq.n	8001cea <HAL_ADC_Init+0x172>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5f      	ldr	r2, [pc, #380]	; (8001e64 <HAL_ADC_Init+0x2ec>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_ADC_Init+0x176>
 8001cea:	4a62      	ldr	r2, [pc, #392]	; (8001e74 <HAL_ADC_Init+0x2fc>)
 8001cec:	e000      	b.n	8001cf0 <HAL_ADC_Init+0x178>
 8001cee:	4a62      	ldr	r2, [pc, #392]	; (8001e78 <HAL_ADC_Init+0x300>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	f7ff fcfe 	bl	80016f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7f5b      	ldrb	r3, [r3, #29]
 8001d00:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d06:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d0c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d12:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d1a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d106      	bne.n	8001d38 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	045b      	lsls	r3, r3, #17
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d009      	beq.n	8001d54 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <HAL_ADC_Init+0x304>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	69b9      	ldr	r1, [r7, #24]
 8001d64:	430b      	orrs	r3, r1
 8001d66:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fee4 	bl	8001b50 <LL_ADC_INJ_IsConversionOngoing>
 8001d88:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d17f      	bne.n	8001e90 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d17c      	bne.n	8001e90 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d9a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001da2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001db2:	f023 0302 	bic.w	r3, r3, #2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	69b9      	ldr	r1, [r7, #24]
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d017      	beq.n	8001df8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001dd6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001de0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001de4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6911      	ldr	r1, [r2, #16]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	430b      	orrs	r3, r1
 8001df2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001df6:	e013      	b.n	8001e20 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e1c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d12a      	bne.n	8001e80 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e34:	f023 0304 	bic.w	r3, r3, #4
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e40:	4311      	orrs	r1, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e46:	4311      	orrs	r1, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0201 	orr.w	r2, r2, #1
 8001e58:	611a      	str	r2, [r3, #16]
 8001e5a:	e019      	b.n	8001e90 <HAL_ADC_Init+0x318>
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	053e2d63 	.word	0x053e2d63
 8001e64:	50000100 	.word	0x50000100
 8001e68:	50000400 	.word	0x50000400
 8001e6c:	50000500 	.word	0x50000500
 8001e70:	50000600 	.word	0x50000600
 8001e74:	50000300 	.word	0x50000300
 8001e78:	50000700 	.word	0x50000700
 8001e7c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691a      	ldr	r2, [r3, #16]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d10c      	bne.n	8001eb2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f023 010f 	bic.w	r1, r3, #15
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	1e5a      	subs	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
 8001eb0:	e007      	b.n	8001ec2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 020f 	bic.w	r2, r2, #15
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	f023 0303 	bic.w	r3, r3, #3
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ed2:	e007      	b.n	8001ee4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	f043 0210 	orr.w	r2, r3, #16
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ee4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd90      	pop	{r4, r7, pc}
 8001eee:	bf00      	nop

08001ef0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f04:	d004      	beq.n	8001f10 <HAL_ADC_Start_DMA+0x20>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a5a      	ldr	r2, [pc, #360]	; (8002074 <HAL_ADC_Start_DMA+0x184>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_Start_DMA+0x24>
 8001f10:	4b59      	ldr	r3, [pc, #356]	; (8002078 <HAL_ADC_Start_DMA+0x188>)
 8001f12:	e000      	b.n	8001f16 <HAL_ADC_Start_DMA+0x26>
 8001f14:	4b59      	ldr	r3, [pc, #356]	; (800207c <HAL_ADC_Start_DMA+0x18c>)
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fd62 	bl	80019e0 <LL_ADC_GetMultimode>
 8001f1c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fe01 	bl	8001b2a <LL_ADC_REG_IsConversionOngoing>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 809b 	bne.w	8002066 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d101      	bne.n	8001f3e <HAL_ADC_Start_DMA+0x4e>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e096      	b.n	800206c <HAL_ADC_Start_DMA+0x17c>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a4d      	ldr	r2, [pc, #308]	; (8002080 <HAL_ADC_Start_DMA+0x190>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d008      	beq.n	8001f62 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d002      	beq.n	8001f62 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	2b09      	cmp	r3, #9
 8001f60:	d17a      	bne.n	8002058 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 ff60 	bl	8002e28 <ADC_Enable>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d16d      	bne.n	800204e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a3a      	ldr	r2, [pc, #232]	; (8002074 <HAL_ADC_Start_DMA+0x184>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d009      	beq.n	8001fa4 <HAL_ADC_Start_DMA+0xb4>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a3b      	ldr	r2, [pc, #236]	; (8002084 <HAL_ADC_Start_DMA+0x194>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d002      	beq.n	8001fa0 <HAL_ADC_Start_DMA+0xb0>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	e003      	b.n	8001fa8 <HAL_ADC_Start_DMA+0xb8>
 8001fa0:	4b39      	ldr	r3, [pc, #228]	; (8002088 <HAL_ADC_Start_DMA+0x198>)
 8001fa2:	e001      	b.n	8001fa8 <HAL_ADC_Start_DMA+0xb8>
 8001fa4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d002      	beq.n	8001fb6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d105      	bne.n	8001fc2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd2:	f023 0206 	bic.w	r2, r3, #6
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	661a      	str	r2, [r3, #96]	; 0x60
 8001fda:	e002      	b.n	8001fe2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	4a29      	ldr	r2, [pc, #164]	; (800208c <HAL_ADC_Start_DMA+0x19c>)
 8001fe8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	4a28      	ldr	r2, [pc, #160]	; (8002090 <HAL_ADC_Start_DMA+0x1a0>)
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	4a27      	ldr	r2, [pc, #156]	; (8002094 <HAL_ADC_Start_DMA+0x1a4>)
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	221c      	movs	r2, #28
 8002000:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0210 	orr.w	r2, r2, #16
 8002018:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0201 	orr.w	r2, r2, #1
 8002028:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	3340      	adds	r3, #64	; 0x40
 8002034:	4619      	mov	r1, r3
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f001 fb37 	bl	80036ac <HAL_DMA_Start_IT>
 800203e:	4603      	mov	r3, r0
 8002040:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fd5b 	bl	8001b02 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800204c:	e00d      	b.n	800206a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002056:	e008      	b.n	800206a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002064:	e001      	b.n	800206a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002066:	2302      	movs	r3, #2
 8002068:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800206a:	7dfb      	ldrb	r3, [r7, #23]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	50000100 	.word	0x50000100
 8002078:	50000300 	.word	0x50000300
 800207c:	50000700 	.word	0x50000700
 8002080:	50000600 	.word	0x50000600
 8002084:	50000500 	.word	0x50000500
 8002088:	50000400 	.word	0x50000400
 800208c:	08002f55 	.word	0x08002f55
 8002090:	0800302d 	.word	0x0800302d
 8002094:	08003049 	.word	0x08003049

08002098 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020bc:	d004      	beq.n	80020c8 <HAL_ADC_IRQHandler+0x30>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a8e      	ldr	r2, [pc, #568]	; (80022fc <HAL_ADC_IRQHandler+0x264>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_IRQHandler+0x34>
 80020c8:	4b8d      	ldr	r3, [pc, #564]	; (8002300 <HAL_ADC_IRQHandler+0x268>)
 80020ca:	e000      	b.n	80020ce <HAL_ADC_IRQHandler+0x36>
 80020cc:	4b8d      	ldr	r3, [pc, #564]	; (8002304 <HAL_ADC_IRQHandler+0x26c>)
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fc86 	bl	80019e0 <LL_ADC_GetMultimode>
 80020d4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d017      	beq.n	8002110 <HAL_ADC_IRQHandler+0x78>
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d012      	beq.n	8002110 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f001 f808 	bl	8003118 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2202      	movs	r2, #2
 800210e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d004      	beq.n	8002124 <HAL_ADC_IRQHandler+0x8c>
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10b      	bne.n	800213c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8094 	beq.w	8002258 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 808e 	beq.w	8002258 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	d105      	bne.n	8002154 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fb9f 	bl	800189c <LL_ADC_REG_IsTriggerSourceSWStart>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d072      	beq.n	800224a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a64      	ldr	r2, [pc, #400]	; (80022fc <HAL_ADC_IRQHandler+0x264>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_ADC_IRQHandler+0xea>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a65      	ldr	r2, [pc, #404]	; (8002308 <HAL_ADC_IRQHandler+0x270>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d002      	beq.n	800217e <HAL_ADC_IRQHandler+0xe6>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	e003      	b.n	8002186 <HAL_ADC_IRQHandler+0xee>
 800217e:	4b63      	ldr	r3, [pc, #396]	; (800230c <HAL_ADC_IRQHandler+0x274>)
 8002180:	e001      	b.n	8002186 <HAL_ADC_IRQHandler+0xee>
 8002182:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	4293      	cmp	r3, r2
 800218c:	d008      	beq.n	80021a0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2b05      	cmp	r3, #5
 8002198:	d002      	beq.n	80021a0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2b09      	cmp	r3, #9
 800219e:	d104      	bne.n	80021aa <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	623b      	str	r3, [r7, #32]
 80021a8:	e014      	b.n	80021d4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a53      	ldr	r2, [pc, #332]	; (80022fc <HAL_ADC_IRQHandler+0x264>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d009      	beq.n	80021c8 <HAL_ADC_IRQHandler+0x130>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a53      	ldr	r2, [pc, #332]	; (8002308 <HAL_ADC_IRQHandler+0x270>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d002      	beq.n	80021c4 <HAL_ADC_IRQHandler+0x12c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	e003      	b.n	80021cc <HAL_ADC_IRQHandler+0x134>
 80021c4:	4b51      	ldr	r3, [pc, #324]	; (800230c <HAL_ADC_IRQHandler+0x274>)
 80021c6:	e001      	b.n	80021cc <HAL_ADC_IRQHandler+0x134>
 80021c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021cc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d135      	bne.n	800224a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d12e      	bne.n	800224a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fc9a 	bl	8001b2a <LL_ADC_REG_IsConversionOngoing>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d11a      	bne.n	8002232 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 020c 	bic.w	r2, r2, #12
 800220a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d112      	bne.n	800224a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	f043 0201 	orr.w	r2, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002230:	e00b      	b.n	800224a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	f043 0210 	orr.w	r2, r3, #16
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002242:	f043 0201 	orr.w	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f984 	bl	8002558 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	220c      	movs	r2, #12
 8002256:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b00      	cmp	r3, #0
 8002260:	d004      	beq.n	800226c <HAL_ADC_IRQHandler+0x1d4>
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10b      	bne.n	8002284 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80b3 	beq.w	80023de <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80ad 	beq.w	80023de <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002294:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fb3a 	bl	800191a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80022a6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff faf5 	bl	800189c <LL_ADC_REG_IsTriggerSourceSWStart>
 80022b2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a10      	ldr	r2, [pc, #64]	; (80022fc <HAL_ADC_IRQHandler+0x264>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d009      	beq.n	80022d2 <HAL_ADC_IRQHandler+0x23a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a11      	ldr	r2, [pc, #68]	; (8002308 <HAL_ADC_IRQHandler+0x270>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d002      	beq.n	80022ce <HAL_ADC_IRQHandler+0x236>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	e003      	b.n	80022d6 <HAL_ADC_IRQHandler+0x23e>
 80022ce:	4b0f      	ldr	r3, [pc, #60]	; (800230c <HAL_ADC_IRQHandler+0x274>)
 80022d0:	e001      	b.n	80022d6 <HAL_ADC_IRQHandler+0x23e>
 80022d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	4293      	cmp	r3, r2
 80022dc:	d008      	beq.n	80022f0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d002      	beq.n	80022f0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b07      	cmp	r3, #7
 80022ee:	d10f      	bne.n	8002310 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	623b      	str	r3, [r7, #32]
 80022f8:	e01f      	b.n	800233a <HAL_ADC_IRQHandler+0x2a2>
 80022fa:	bf00      	nop
 80022fc:	50000100 	.word	0x50000100
 8002300:	50000300 	.word	0x50000300
 8002304:	50000700 	.word	0x50000700
 8002308:	50000500 	.word	0x50000500
 800230c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a8b      	ldr	r2, [pc, #556]	; (8002544 <HAL_ADC_IRQHandler+0x4ac>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d009      	beq.n	800232e <HAL_ADC_IRQHandler+0x296>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a8a      	ldr	r2, [pc, #552]	; (8002548 <HAL_ADC_IRQHandler+0x4b0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d002      	beq.n	800232a <HAL_ADC_IRQHandler+0x292>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	e003      	b.n	8002332 <HAL_ADC_IRQHandler+0x29a>
 800232a:	4b88      	ldr	r3, [pc, #544]	; (800254c <HAL_ADC_IRQHandler+0x4b4>)
 800232c:	e001      	b.n	8002332 <HAL_ADC_IRQHandler+0x29a>
 800232e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002332:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d047      	beq.n	80023d0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <HAL_ADC_IRQHandler+0x2c2>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d03f      	beq.n	80023d0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002356:	2b00      	cmp	r3, #0
 8002358:	d13a      	bne.n	80023d0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002364:	2b40      	cmp	r3, #64	; 0x40
 8002366:	d133      	bne.n	80023d0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d12e      	bne.n	80023d0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fbea 	bl	8001b50 <LL_ADC_INJ_IsConversionOngoing>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d11a      	bne.n	80023b8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002390:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d112      	bne.n	80023d0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	f043 0201 	orr.w	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80023b6:	e00b      	b.n	80023d0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	f043 0210 	orr.w	r2, r3, #16
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fe79 	bl	80030c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2260      	movs	r2, #96	; 0x60
 80023dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d011      	beq.n	800240c <HAL_ADC_IRQHandler+0x374>
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00c      	beq.n	800240c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f8be 	bl	8002580 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2280      	movs	r2, #128	; 0x80
 800240a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d012      	beq.n	800243c <HAL_ADC_IRQHandler+0x3a4>
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00d      	beq.n	800243c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fe5f 	bl	80030f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800243a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002442:	2b00      	cmp	r3, #0
 8002444:	d012      	beq.n	800246c <HAL_ADC_IRQHandler+0x3d4>
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00d      	beq.n	800246c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002454:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fe51 	bl	8003104 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b00      	cmp	r3, #0
 8002474:	d043      	beq.n	80024fe <HAL_ADC_IRQHandler+0x466>
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b00      	cmp	r3, #0
 800247e:	d03e      	beq.n	80024fe <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002488:	2301      	movs	r3, #1
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
 800248c:	e021      	b.n	80024d2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d015      	beq.n	80024c0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800249c:	d004      	beq.n	80024a8 <HAL_ADC_IRQHandler+0x410>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a28      	ldr	r2, [pc, #160]	; (8002544 <HAL_ADC_IRQHandler+0x4ac>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_IRQHandler+0x414>
 80024a8:	4b29      	ldr	r3, [pc, #164]	; (8002550 <HAL_ADC_IRQHandler+0x4b8>)
 80024aa:	e000      	b.n	80024ae <HAL_ADC_IRQHandler+0x416>
 80024ac:	4b29      	ldr	r3, [pc, #164]	; (8002554 <HAL_ADC_IRQHandler+0x4bc>)
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff faa4 	bl	80019fc <LL_ADC_GetMultiDMATransfer>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80024ba:	2301      	movs	r3, #1
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
 80024be:	e008      	b.n	80024d2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80024ce:	2301      	movs	r3, #1
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d10e      	bne.n	80024f6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e8:	f043 0202 	orr.w	r2, r3, #2
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f84f 	bl	8002594 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2210      	movs	r2, #16
 80024fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d018      	beq.n	800253a <HAL_ADC_IRQHandler+0x4a2>
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250e:	2b00      	cmp	r3, #0
 8002510:	d013      	beq.n	800253a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002516:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002522:	f043 0208 	orr.w	r2, r3, #8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002532:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fdd1 	bl	80030dc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800253a:	bf00      	nop
 800253c:	3728      	adds	r7, #40	; 0x28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	50000100 	.word	0x50000100
 8002548:	50000500 	.word	0x50000500
 800254c:	50000400 	.word	0x50000400
 8002550:	50000300 	.word	0x50000300
 8002554:	50000700 	.word	0x50000700

08002558 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b0b6      	sub	sp, #216	; 0xd8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d102      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x24>
 80025c6:	2302      	movs	r3, #2
 80025c8:	f000 bc13 	b.w	8002df2 <HAL_ADC_ConfigChannel+0x84a>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff faa6 	bl	8001b2a <LL_ADC_REG_IsConversionOngoing>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f040 83f3 	bne.w	8002dcc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6859      	ldr	r1, [r3, #4]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f7ff f965 	bl	80018c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fa94 	bl	8001b2a <LL_ADC_REG_IsConversionOngoing>
 8002602:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff faa0 	bl	8001b50 <LL_ADC_INJ_IsConversionOngoing>
 8002610:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002614:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002618:	2b00      	cmp	r3, #0
 800261a:	f040 81d9 	bne.w	80029d0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800261e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002622:	2b00      	cmp	r3, #0
 8002624:	f040 81d4 	bne.w	80029d0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002630:	d10f      	bne.n	8002652 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2200      	movs	r2, #0
 800263c:	4619      	mov	r1, r3
 800263e:	f7ff f97f 	bl	8001940 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff f913 	bl	8001876 <LL_ADC_SetSamplingTimeCommonConfig>
 8002650:	e00e      	b.n	8002670 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6819      	ldr	r1, [r3, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	461a      	mov	r2, r3
 8002660:	f7ff f96e 	bl	8001940 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff f903 	bl	8001876 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	695a      	ldr	r2, [r3, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	08db      	lsrs	r3, r3, #3
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2b04      	cmp	r3, #4
 8002690:	d022      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6919      	ldr	r1, [r3, #16]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026a2:	f7ff f85d 	bl	8001760 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6919      	ldr	r1, [r3, #16]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	461a      	mov	r2, r3
 80026b4:	f7ff f8a9 	bl	800180a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d102      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x126>
 80026c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026cc:	e000      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x128>
 80026ce:	2300      	movs	r3, #0
 80026d0:	461a      	mov	r2, r3
 80026d2:	f7ff f8b5 	bl	8001840 <LL_ADC_SetOffsetSaturation>
 80026d6:	e17b      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff f862 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10a      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x15c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff f857 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 80026fa:	4603      	mov	r3, r0
 80026fc:	0e9b      	lsrs	r3, r3, #26
 80026fe:	f003 021f 	and.w	r2, r3, #31
 8002702:	e01e      	b.n	8002742 <HAL_ADC_ConfigChannel+0x19a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff f84c 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 8002710:	4603      	mov	r3, r0
 8002712:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002722:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002726:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800272a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002732:	2320      	movs	r3, #32
 8002734:	e004      	b.n	8002740 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002736:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274a:	2b00      	cmp	r3, #0
 800274c:	d105      	bne.n	800275a <HAL_ADC_ConfigChannel+0x1b2>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	0e9b      	lsrs	r3, r3, #26
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	e018      	b.n	800278c <HAL_ADC_ConfigChannel+0x1e4>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800276e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002772:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002776:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800277e:	2320      	movs	r3, #32
 8002780:	e004      	b.n	800278c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002782:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800278c:	429a      	cmp	r2, r3
 800278e:	d106      	bne.n	800279e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2200      	movs	r2, #0
 8002796:	2100      	movs	r1, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff f81b 	bl	80017d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2101      	movs	r1, #1
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe ffff 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10a      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x222>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2101      	movs	r1, #1
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fff4 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 80027c0:	4603      	mov	r3, r0
 80027c2:	0e9b      	lsrs	r3, r3, #26
 80027c4:	f003 021f 	and.w	r2, r3, #31
 80027c8:	e01e      	b.n	8002808 <HAL_ADC_ConfigChannel+0x260>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2101      	movs	r1, #1
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe ffe9 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	e004      	b.n	8002806 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80027fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002810:	2b00      	cmp	r3, #0
 8002812:	d105      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x278>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	0e9b      	lsrs	r3, r3, #26
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	e018      	b.n	8002852 <HAL_ADC_ConfigChannel+0x2aa>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002834:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800283c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002844:	2320      	movs	r3, #32
 8002846:	e004      	b.n	8002852 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002848:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800284c:	fab3 f383 	clz	r3, r3
 8002850:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002852:	429a      	cmp	r2, r3
 8002854:	d106      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	2101      	movs	r1, #1
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe ffb8 	bl	80017d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2102      	movs	r1, #2
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe ff9c 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 8002870:	4603      	mov	r3, r0
 8002872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10a      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x2e8>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2102      	movs	r1, #2
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe ff91 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 8002886:	4603      	mov	r3, r0
 8002888:	0e9b      	lsrs	r3, r3, #26
 800288a:	f003 021f 	and.w	r2, r3, #31
 800288e:	e01e      	b.n	80028ce <HAL_ADC_ConfigChannel+0x326>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2102      	movs	r1, #2
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe ff86 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 800289c:	4603      	mov	r3, r0
 800289e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80028be:	2320      	movs	r3, #32
 80028c0:	e004      	b.n	80028cc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80028c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d105      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x33e>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	0e9b      	lsrs	r3, r3, #26
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	e016      	b.n	8002914 <HAL_ADC_ConfigChannel+0x36c>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002906:	2320      	movs	r3, #32
 8002908:	e004      	b.n	8002914 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800290a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002914:	429a      	cmp	r2, r3
 8002916:	d106      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2200      	movs	r2, #0
 800291e:	2102      	movs	r1, #2
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe ff57 	bl	80017d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2103      	movs	r1, #3
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe ff3b 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 8002932:	4603      	mov	r3, r0
 8002934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x3aa>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2103      	movs	r1, #3
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe ff30 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	0e9b      	lsrs	r3, r3, #26
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	e017      	b.n	8002982 <HAL_ADC_ConfigChannel+0x3da>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2103      	movs	r1, #3
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe ff25 	bl	80017a8 <LL_ADC_GetOffsetChannel>
 800295e:	4603      	mov	r3, r0
 8002960:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800296a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800296c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800296e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002974:	2320      	movs	r3, #32
 8002976:	e003      	b.n	8002980 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298a:	2b00      	cmp	r3, #0
 800298c:	d105      	bne.n	800299a <HAL_ADC_ConfigChannel+0x3f2>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	0e9b      	lsrs	r3, r3, #26
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	e011      	b.n	80029be <HAL_ADC_ConfigChannel+0x416>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80029a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80029b2:	2320      	movs	r3, #32
 80029b4:	e003      	b.n	80029be <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80029b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029be:	429a      	cmp	r2, r3
 80029c0:	d106      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2200      	movs	r2, #0
 80029c8:	2103      	movs	r1, #3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe ff02 	bl	80017d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff f881 	bl	8001adc <LL_ADC_IsEnabled>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f040 813d 	bne.w	8002c5c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6819      	ldr	r1, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	461a      	mov	r2, r3
 80029f0:	f7fe ffd2 	bl	8001998 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4aa2      	ldr	r2, [pc, #648]	; (8002c84 <HAL_ADC_ConfigChannel+0x6dc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	f040 812e 	bne.w	8002c5c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10b      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x480>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	0e9b      	lsrs	r3, r3, #26
 8002a16:	3301      	adds	r3, #1
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	2b09      	cmp	r3, #9
 8002a1e:	bf94      	ite	ls
 8002a20:	2301      	movls	r3, #1
 8002a22:	2300      	movhi	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	e019      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x4b4>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a38:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a40:	2320      	movs	r3, #32
 8002a42:	e003      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	2b09      	cmp	r3, #9
 8002a54:	bf94      	ite	ls
 8002a56:	2301      	movls	r3, #1
 8002a58:	2300      	movhi	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d079      	beq.n	8002b54 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d107      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x4d4>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0e9b      	lsrs	r3, r3, #26
 8002a72:	3301      	adds	r3, #1
 8002a74:	069b      	lsls	r3, r3, #26
 8002a76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a7a:	e015      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x500>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002a94:	2320      	movs	r3, #32
 8002a96:	e003      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	069b      	lsls	r3, r3, #26
 8002aa4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x520>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	3301      	adds	r3, #1
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	e017      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x550>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e003      	b.n	8002aec <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	3301      	adds	r3, #1
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	ea42 0103 	orr.w	r1, r2, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x576>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0e9b      	lsrs	r3, r3, #26
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f003 021f 	and.w	r2, r3, #31
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	051b      	lsls	r3, r3, #20
 8002b1c:	e018      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x5a8>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002b36:	2320      	movs	r3, #32
 8002b38:	e003      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b50:	430b      	orrs	r3, r1
 8002b52:	e07e      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d107      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x5c8>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	0e9b      	lsrs	r3, r3, #26
 8002b66:	3301      	adds	r3, #1
 8002b68:	069b      	lsls	r3, r3, #26
 8002b6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b6e:	e015      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x5f4>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	e003      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	3301      	adds	r3, #1
 8002b96:	069b      	lsls	r3, r3, #26
 8002b98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x614>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0e9b      	lsrs	r3, r3, #26
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	e017      	b.n	8002bec <HAL_ADC_ConfigChannel+0x644>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	61fb      	str	r3, [r7, #28]
  return result;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	e003      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	3301      	adds	r3, #1
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	2101      	movs	r1, #1
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	ea42 0103 	orr.w	r1, r2, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10d      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x670>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	3301      	adds	r3, #1
 8002c04:	f003 021f 	and.w	r2, r3, #31
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3b1e      	subs	r3, #30
 8002c10:	051b      	lsls	r3, r3, #20
 8002c12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c16:	e01b      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x6a8>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	613b      	str	r3, [r7, #16]
  return result;
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002c30:	2320      	movs	r3, #32
 8002c32:	e003      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	f003 021f 	and.w	r2, r3, #31
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	3b1e      	subs	r3, #30
 8002c4a:	051b      	lsls	r3, r3, #20
 8002c4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c50:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c56:	4619      	mov	r1, r3
 8002c58:	f7fe fe72 	bl	8001940 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_ADC_ConfigChannel+0x6e0>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80be 	beq.w	8002de6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c72:	d004      	beq.n	8002c7e <HAL_ADC_ConfigChannel+0x6d6>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a04      	ldr	r2, [pc, #16]	; (8002c8c <HAL_ADC_ConfigChannel+0x6e4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10a      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x6ec>
 8002c7e:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <HAL_ADC_ConfigChannel+0x6e8>)
 8002c80:	e009      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x6ee>
 8002c82:	bf00      	nop
 8002c84:	407f0000 	.word	0x407f0000
 8002c88:	80080000 	.word	0x80080000
 8002c8c:	50000100 	.word	0x50000100
 8002c90:	50000300 	.word	0x50000300
 8002c94:	4b59      	ldr	r3, [pc, #356]	; (8002dfc <HAL_ADC_ConfigChannel+0x854>)
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe fd54 	bl	8001744 <LL_ADC_GetCommonPathInternalCh>
 8002c9c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a56      	ldr	r2, [pc, #344]	; (8002e00 <HAL_ADC_ConfigChannel+0x858>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_ADC_ConfigChannel+0x70c>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a55      	ldr	r2, [pc, #340]	; (8002e04 <HAL_ADC_ConfigChannel+0x85c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d13a      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d134      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cc8:	d005      	beq.n	8002cd6 <HAL_ADC_ConfigChannel+0x72e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a4e      	ldr	r2, [pc, #312]	; (8002e08 <HAL_ADC_ConfigChannel+0x860>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	f040 8085 	bne.w	8002de0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cde:	d004      	beq.n	8002cea <HAL_ADC_ConfigChannel+0x742>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a49      	ldr	r2, [pc, #292]	; (8002e0c <HAL_ADC_ConfigChannel+0x864>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x746>
 8002cea:	4a49      	ldr	r2, [pc, #292]	; (8002e10 <HAL_ADC_ConfigChannel+0x868>)
 8002cec:	e000      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x748>
 8002cee:	4a43      	ldr	r2, [pc, #268]	; (8002dfc <HAL_ADC_ConfigChannel+0x854>)
 8002cf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f7fe fd0f 	bl	800171e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d00:	4b44      	ldr	r3, [pc, #272]	; (8002e14 <HAL_ADC_ConfigChannel+0x86c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	4a44      	ldr	r2, [pc, #272]	; (8002e18 <HAL_ADC_ConfigChannel+0x870>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d1a:	e002      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f9      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d28:	e05a      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a3b      	ldr	r2, [pc, #236]	; (8002e1c <HAL_ADC_ConfigChannel+0x874>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d125      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d11f      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <HAL_ADC_ConfigChannel+0x864>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d104      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x7ac>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a34      	ldr	r2, [pc, #208]	; (8002e20 <HAL_ADC_ConfigChannel+0x878>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d047      	beq.n	8002de4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d5c:	d004      	beq.n	8002d68 <HAL_ADC_ConfigChannel+0x7c0>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a2a      	ldr	r2, [pc, #168]	; (8002e0c <HAL_ADC_ConfigChannel+0x864>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d101      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x7c4>
 8002d68:	4a29      	ldr	r2, [pc, #164]	; (8002e10 <HAL_ADC_ConfigChannel+0x868>)
 8002d6a:	e000      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x7c6>
 8002d6c:	4a23      	ldr	r2, [pc, #140]	; (8002dfc <HAL_ADC_ConfigChannel+0x854>)
 8002d6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d76:	4619      	mov	r1, r3
 8002d78:	4610      	mov	r0, r2
 8002d7a:	f7fe fcd0 	bl	800171e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d7e:	e031      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a27      	ldr	r2, [pc, #156]	; (8002e24 <HAL_ADC_ConfigChannel+0x87c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d12d      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d127      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1c      	ldr	r2, [pc, #112]	; (8002e0c <HAL_ADC_ConfigChannel+0x864>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d022      	beq.n	8002de6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002da8:	d004      	beq.n	8002db4 <HAL_ADC_ConfigChannel+0x80c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a17      	ldr	r2, [pc, #92]	; (8002e0c <HAL_ADC_ConfigChannel+0x864>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x810>
 8002db4:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <HAL_ADC_ConfigChannel+0x868>)
 8002db6:	e000      	b.n	8002dba <HAL_ADC_ConfigChannel+0x812>
 8002db8:	4a10      	ldr	r2, [pc, #64]	; (8002dfc <HAL_ADC_ConfigChannel+0x854>)
 8002dba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	f7fe fcaa 	bl	800171e <LL_ADC_SetCommonPathInternalCh>
 8002dca:	e00c      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002dde:	e002      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002de0:	bf00      	nop
 8002de2:	e000      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002de4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002dee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	37d8      	adds	r7, #216	; 0xd8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	50000700 	.word	0x50000700
 8002e00:	c3210000 	.word	0xc3210000
 8002e04:	90c00010 	.word	0x90c00010
 8002e08:	50000600 	.word	0x50000600
 8002e0c:	50000100 	.word	0x50000100
 8002e10:	50000300 	.word	0x50000300
 8002e14:	20000004 	.word	0x20000004
 8002e18:	053e2d63 	.word	0x053e2d63
 8002e1c:	c7520000 	.word	0xc7520000
 8002e20:	50000500 	.word	0x50000500
 8002e24:	cb840000 	.word	0xcb840000

08002e28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe fe4f 	bl	8001adc <LL_ADC_IsEnabled>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d176      	bne.n	8002f32 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	4b3c      	ldr	r3, [pc, #240]	; (8002f3c <ADC_Enable+0x114>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e56:	f043 0210 	orr.w	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e62:	f043 0201 	orr.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e062      	b.n	8002f34 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fe1e 	bl	8001ab4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e80:	d004      	beq.n	8002e8c <ADC_Enable+0x64>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2e      	ldr	r2, [pc, #184]	; (8002f40 <ADC_Enable+0x118>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d101      	bne.n	8002e90 <ADC_Enable+0x68>
 8002e8c:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <ADC_Enable+0x11c>)
 8002e8e:	e000      	b.n	8002e92 <ADC_Enable+0x6a>
 8002e90:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <ADC_Enable+0x120>)
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe fc56 	bl	8001744 <LL_ADC_GetCommonPathInternalCh>
 8002e98:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d013      	beq.n	8002eca <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ea2:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <ADC_Enable+0x124>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	099b      	lsrs	r3, r3, #6
 8002ea8:	4a29      	ldr	r2, [pc, #164]	; (8002f50 <ADC_Enable+0x128>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	099b      	lsrs	r3, r3, #6
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ebc:	e002      	b.n	8002ec4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f9      	bne.n	8002ebe <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002eca:	f7fe fc09 	bl	80016e0 <HAL_GetTick>
 8002ece:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ed0:	e028      	b.n	8002f24 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fe00 	bl	8001adc <LL_ADC_IsEnabled>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d104      	bne.n	8002eec <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fde4 	bl	8001ab4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002eec:	f7fe fbf8 	bl	80016e0 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d914      	bls.n	8002f24 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d00d      	beq.n	8002f24 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	f043 0210 	orr.w	r2, r3, #16
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f18:	f043 0201 	orr.w	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e007      	b.n	8002f34 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d1cf      	bne.n	8002ed2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	8000003f 	.word	0x8000003f
 8002f40:	50000100 	.word	0x50000100
 8002f44:	50000300 	.word	0x50000300
 8002f48:	50000700 	.word	0x50000700
 8002f4c:	20000004 	.word	0x20000004
 8002f50:	053e2d63 	.word	0x053e2d63

08002f54 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d14b      	bne.n	8003006 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d021      	beq.n	8002fcc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fe fc85 	bl	800189c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d032      	beq.n	8002ffe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d12b      	bne.n	8002ffe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d11f      	bne.n	8002ffe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	f043 0201 	orr.w	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fca:	e018      	b.n	8002ffe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d111      	bne.n	8002ffe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d105      	bne.n	8002ffe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff6:	f043 0201 	orr.w	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f7ff faaa 	bl	8002558 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003004:	e00e      	b.n	8003024 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300a:	f003 0310 	and.w	r3, r3, #16
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7ff fabe 	bl	8002594 <HAL_ADC_ErrorCallback>
}
 8003018:	e004      	b.n	8003024 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4798      	blx	r3
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f7ff fa96 	bl	800256c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003040:	bf00      	nop
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003066:	f043 0204 	orr.w	r2, r3, #4
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f7ff fa90 	bl	8002594 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003074:	bf00      	nop
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <LL_ADC_IsEnabled>:
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <LL_ADC_IsEnabled+0x18>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <LL_ADC_IsEnabled+0x1a>
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d101      	bne.n	80030ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b0a1      	sub	sp, #132	; 0x84
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003146:	2302      	movs	r3, #2
 8003148:	e0e7      	b.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003152:	2300      	movs	r3, #0
 8003154:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003156:	2300      	movs	r3, #0
 8003158:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003162:	d102      	bne.n	800316a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003164:	4b6f      	ldr	r3, [pc, #444]	; (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	e009      	b.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a6e      	ldr	r2, [pc, #440]	; (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d102      	bne.n	800317a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003174:	4b6d      	ldr	r3, [pc, #436]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	e001      	b.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10b      	bne.n	800319c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003188:	f043 0220 	orr.w	r2, r3, #32
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0be      	b.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff7f 	bl	80030a2 <LL_ADC_REG_IsConversionOngoing>
 80031a4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ff79 	bl	80030a2 <LL_ADC_REG_IsConversionOngoing>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f040 80a0 	bne.w	80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80031b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f040 809c 	bne.w	80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031c8:	d004      	beq.n	80031d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a55      	ldr	r2, [pc, #340]	; (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d101      	bne.n	80031d8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80031d4:	4b56      	ldr	r3, [pc, #344]	; (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80031d6:	e000      	b.n	80031da <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80031d8:	4b56      	ldr	r3, [pc, #344]	; (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80031da:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d04b      	beq.n	800327c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80031e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031f6:	035b      	lsls	r3, r3, #13
 80031f8:	430b      	orrs	r3, r1
 80031fa:	431a      	orrs	r2, r3
 80031fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003208:	d004      	beq.n	8003214 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a45      	ldr	r2, [pc, #276]	; (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d10f      	bne.n	8003234 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003214:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003218:	f7ff ff30 	bl	800307c <LL_ADC_IsEnabled>
 800321c:	4604      	mov	r4, r0
 800321e:	4841      	ldr	r0, [pc, #260]	; (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003220:	f7ff ff2c 	bl	800307c <LL_ADC_IsEnabled>
 8003224:	4603      	mov	r3, r0
 8003226:	4323      	orrs	r3, r4
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e012      	b.n	800325a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003234:	483c      	ldr	r0, [pc, #240]	; (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003236:	f7ff ff21 	bl	800307c <LL_ADC_IsEnabled>
 800323a:	4604      	mov	r4, r0
 800323c:	483b      	ldr	r0, [pc, #236]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800323e:	f7ff ff1d 	bl	800307c <LL_ADC_IsEnabled>
 8003242:	4603      	mov	r3, r0
 8003244:	431c      	orrs	r4, r3
 8003246:	483c      	ldr	r0, [pc, #240]	; (8003338 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003248:	f7ff ff18 	bl	800307c <LL_ADC_IsEnabled>
 800324c:	4603      	mov	r3, r0
 800324e:	4323      	orrs	r3, r4
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d056      	beq.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800325e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003266:	f023 030f 	bic.w	r3, r3, #15
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	6811      	ldr	r1, [r2, #0]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	6892      	ldr	r2, [r2, #8]
 8003272:	430a      	orrs	r2, r1
 8003274:	431a      	orrs	r2, r3
 8003276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003278:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800327a:	e047      	b.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800327c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003286:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003290:	d004      	beq.n	800329c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a23      	ldr	r2, [pc, #140]	; (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d10f      	bne.n	80032bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800329c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032a0:	f7ff feec 	bl	800307c <LL_ADC_IsEnabled>
 80032a4:	4604      	mov	r4, r0
 80032a6:	481f      	ldr	r0, [pc, #124]	; (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032a8:	f7ff fee8 	bl	800307c <LL_ADC_IsEnabled>
 80032ac:	4603      	mov	r3, r0
 80032ae:	4323      	orrs	r3, r4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf0c      	ite	eq
 80032b4:	2301      	moveq	r3, #1
 80032b6:	2300      	movne	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	e012      	b.n	80032e2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80032bc:	481a      	ldr	r0, [pc, #104]	; (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032be:	f7ff fedd 	bl	800307c <LL_ADC_IsEnabled>
 80032c2:	4604      	mov	r4, r0
 80032c4:	4819      	ldr	r0, [pc, #100]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032c6:	f7ff fed9 	bl	800307c <LL_ADC_IsEnabled>
 80032ca:	4603      	mov	r3, r0
 80032cc:	431c      	orrs	r4, r3
 80032ce:	481a      	ldr	r0, [pc, #104]	; (8003338 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80032d0:	f7ff fed4 	bl	800307c <LL_ADC_IsEnabled>
 80032d4:	4603      	mov	r3, r0
 80032d6:	4323      	orrs	r3, r4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d012      	beq.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032ee:	f023 030f 	bic.w	r3, r3, #15
 80032f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80032f4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032f6:	e009      	b.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800330a:	e000      	b.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800330c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003316:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800331a:	4618      	mov	r0, r3
 800331c:	3784      	adds	r7, #132	; 0x84
 800331e:	46bd      	mov	sp, r7
 8003320:	bd90      	pop	{r4, r7, pc}
 8003322:	bf00      	nop
 8003324:	50000100 	.word	0x50000100
 8003328:	50000400 	.word	0x50000400
 800332c:	50000500 	.word	0x50000500
 8003330:	50000300 	.word	0x50000300
 8003334:	50000700 	.word	0x50000700
 8003338:	50000600 	.word	0x50000600

0800333c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <__NVIC_SetPriorityGrouping+0x44>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003358:	4013      	ands	r3, r2
 800335a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336e:	4a04      	ldr	r2, [pc, #16]	; (8003380 <__NVIC_SetPriorityGrouping+0x44>)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	60d3      	str	r3, [r2, #12]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003388:	4b04      	ldr	r3, [pc, #16]	; (800339c <__NVIC_GetPriorityGrouping+0x18>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	f003 0307 	and.w	r3, r3, #7
}
 8003392:	4618      	mov	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	db0b      	blt.n	80033ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	4907      	ldr	r1, [pc, #28]	; (80033d8 <__NVIC_EnableIRQ+0x38>)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2001      	movs	r0, #1
 80033c2:	fa00 f202 	lsl.w	r2, r0, r2
 80033c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000e100 	.word	0xe000e100

080033dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	6039      	str	r1, [r7, #0]
 80033e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	db0a      	blt.n	8003406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	490c      	ldr	r1, [pc, #48]	; (8003428 <__NVIC_SetPriority+0x4c>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	0112      	lsls	r2, r2, #4
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	440b      	add	r3, r1
 8003400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003404:	e00a      	b.n	800341c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4908      	ldr	r1, [pc, #32]	; (800342c <__NVIC_SetPriority+0x50>)
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	3b04      	subs	r3, #4
 8003414:	0112      	lsls	r2, r2, #4
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	440b      	add	r3, r1
 800341a:	761a      	strb	r2, [r3, #24]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000e100 	.word	0xe000e100
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f1c3 0307 	rsb	r3, r3, #7
 800344a:	2b04      	cmp	r3, #4
 800344c:	bf28      	it	cs
 800344e:	2304      	movcs	r3, #4
 8003450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3304      	adds	r3, #4
 8003456:	2b06      	cmp	r3, #6
 8003458:	d902      	bls.n	8003460 <NVIC_EncodePriority+0x30>
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3b03      	subs	r3, #3
 800345e:	e000      	b.n	8003462 <NVIC_EncodePriority+0x32>
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003464:	f04f 32ff 	mov.w	r2, #4294967295
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43da      	mvns	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	401a      	ands	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003478:	f04f 31ff 	mov.w	r1, #4294967295
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	43d9      	mvns	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	4313      	orrs	r3, r2
         );
}
 800348a:	4618      	mov	r0, r3
 800348c:	3724      	adds	r7, #36	; 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a8:	d301      	bcc.n	80034ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00f      	b.n	80034ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ae:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <SysTick_Config+0x40>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034b6:	210f      	movs	r1, #15
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	f7ff ff8e 	bl	80033dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <SysTick_Config+0x40>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c6:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <SysTick_Config+0x40>)
 80034c8:	2207      	movs	r2, #7
 80034ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	e000e010 	.word	0xe000e010

080034dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff29 	bl	800333c <__NVIC_SetPriorityGrouping>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003500:	f7ff ff40 	bl	8003384 <__NVIC_GetPriorityGrouping>
 8003504:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	6978      	ldr	r0, [r7, #20]
 800350c:	f7ff ff90 	bl	8003430 <NVIC_EncodePriority>
 8003510:	4602      	mov	r2, r0
 8003512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff ff5f 	bl	80033dc <__NVIC_SetPriority>
}
 800351e:	bf00      	nop
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	4603      	mov	r3, r0
 800352e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff33 	bl	80033a0 <__NVIC_EnableIRQ>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ffa4 	bl	8003498 <SysTick_Config>
 8003550:	4603      	mov	r3, r0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e08d      	b.n	800368a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	4b47      	ldr	r3, [pc, #284]	; (8003694 <HAL_DMA_Init+0x138>)
 8003576:	429a      	cmp	r2, r3
 8003578:	d80f      	bhi.n	800359a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	4b45      	ldr	r3, [pc, #276]	; (8003698 <HAL_DMA_Init+0x13c>)
 8003582:	4413      	add	r3, r2
 8003584:	4a45      	ldr	r2, [pc, #276]	; (800369c <HAL_DMA_Init+0x140>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	009a      	lsls	r2, r3, #2
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a42      	ldr	r2, [pc, #264]	; (80036a0 <HAL_DMA_Init+0x144>)
 8003596:	641a      	str	r2, [r3, #64]	; 0x40
 8003598:	e00e      	b.n	80035b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	4b40      	ldr	r3, [pc, #256]	; (80036a4 <HAL_DMA_Init+0x148>)
 80035a2:	4413      	add	r3, r2
 80035a4:	4a3d      	ldr	r2, [pc, #244]	; (800369c <HAL_DMA_Init+0x140>)
 80035a6:	fba2 2303 	umull	r2, r3, r2, r3
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	009a      	lsls	r2, r3, #2
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a3c      	ldr	r2, [pc, #240]	; (80036a8 <HAL_DMA_Init+0x14c>)
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fa76 	bl	8003afc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003618:	d102      	bne.n	8003620 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003634:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d010      	beq.n	8003660 <HAL_DMA_Init+0x104>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b04      	cmp	r3, #4
 8003644:	d80c      	bhi.n	8003660 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fa96 	bl	8003b78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	e008      	b.n	8003672 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40020407 	.word	0x40020407
 8003698:	bffdfff8 	.word	0xbffdfff8
 800369c:	cccccccd 	.word	0xcccccccd
 80036a0:	40020000 	.word	0x40020000
 80036a4:	bffdfbf8 	.word	0xbffdfbf8
 80036a8:	40020400 	.word	0x40020400

080036ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_DMA_Start_IT+0x20>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e066      	b.n	800379a <HAL_DMA_Start_IT+0xee>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d155      	bne.n	800378c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0201 	bic.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f9bb 	bl	8003a80 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 020e 	orr.w	r2, r2, #14
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e00f      	b.n	8003744 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0204 	bic.w	r2, r2, #4
 8003732:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 020a 	orr.w	r2, r2, #10
 8003742:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003760:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	2b00      	cmp	r3, #0
 8003768:	d007      	beq.n	800377a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003778:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0201 	orr.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	e005      	b.n	8003798 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003794:	2302      	movs	r3, #2
 8003796:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003798:	7dfb      	ldrb	r3, [r7, #23]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d005      	beq.n	80037c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2204      	movs	r2, #4
 80037be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
 80037c4:	e037      	b.n	8003836 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 020e 	bic.w	r2, r2, #14
 80037d4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	f003 021f 	and.w	r2, r3, #31
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f202 	lsl.w	r2, r1, r2
 8003808:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003812:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00c      	beq.n	8003836 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800382a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003834:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003846:	7bfb      	ldrb	r3, [r7, #15]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d00d      	beq.n	8003888 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2204      	movs	r2, #4
 8003870:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	73fb      	strb	r3, [r7, #15]
 8003886:	e047      	b.n	8003918 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 020e 	bic.w	r2, r2, #14
 8003896:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0201 	bic.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038bc:	f003 021f 	and.w	r2, r3, #31
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	2101      	movs	r1, #1
 80038c6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00c      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4798      	blx	r3
    }
  }
  return status;
 8003918:	7bfb      	ldrb	r3, [r7, #15]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	2204      	movs	r2, #4
 8003944:	409a      	lsls	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d026      	beq.n	800399c <HAL_DMA_IRQHandler+0x7a>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d021      	beq.n	800399c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b00      	cmp	r3, #0
 8003964:	d107      	bne.n	8003976 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0204 	bic.w	r2, r2, #4
 8003974:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f003 021f 	and.w	r2, r3, #31
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2104      	movs	r1, #4
 8003984:	fa01 f202 	lsl.w	r2, r1, r2
 8003988:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	2b00      	cmp	r3, #0
 8003990:	d071      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800399a:	e06c      	b.n	8003a76 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	2202      	movs	r2, #2
 80039a6:	409a      	lsls	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d02e      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d029      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10b      	bne.n	80039e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 020a 	bic.w	r2, r2, #10
 80039d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	f003 021f 	and.w	r2, r3, #31
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	2102      	movs	r1, #2
 80039ee:	fa01 f202 	lsl.w	r2, r1, r2
 80039f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d038      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a0c:	e033      	b.n	8003a76 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	2208      	movs	r2, #8
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d02a      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d025      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 020e 	bic.w	r2, r2, #14
 8003a3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	f003 021f 	and.w	r2, r3, #31
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	2101      	movs	r1, #1
 8003a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d004      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a76:	bf00      	nop
 8003a78:	bf00      	nop
}
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a96:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d004      	beq.n	8003aaa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003aa8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	f003 021f 	and.w	r2, r3, #31
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8003abc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b10      	cmp	r3, #16
 8003acc:	d108      	bne.n	8003ae0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ade:	e007      	b.n	8003af0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	60da      	str	r2, [r3, #12]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4b16      	ldr	r3, [pc, #88]	; (8003b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d802      	bhi.n	8003b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003b10:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	e001      	b.n	8003b1a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003b16:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b18:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	3b08      	subs	r3, #8
 8003b26:	4a12      	ldr	r2, [pc, #72]	; (8003b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b34:	089b      	lsrs	r3, r3, #2
 8003b36:	009a      	lsls	r2, r3, #2
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a0b      	ldr	r2, [pc, #44]	; (8003b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b46:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	2201      	movs	r2, #1
 8003b50:	409a      	lsls	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40020407 	.word	0x40020407
 8003b68:	40020800 	.word	0x40020800
 8003b6c:	40020820 	.word	0x40020820
 8003b70:	cccccccd 	.word	0xcccccccd
 8003b74:	40020880 	.word	0x40020880

08003b78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	461a      	mov	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b9a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	1000823f 	.word	0x1000823f
 8003bbc:	40020940 	.word	0x40020940

08003bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bce:	e15a      	b.n	8003e86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 814c 	beq.w	8003e80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d005      	beq.n	8003c00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d130      	bne.n	8003c62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4013      	ands	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c36:	2201      	movs	r2, #1
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	091b      	lsrs	r3, r3, #4
 8003c4c:	f003 0201 	and.w	r2, r3, #1
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d017      	beq.n	8003c9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	2203      	movs	r2, #3
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d123      	bne.n	8003cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	08da      	lsrs	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3208      	adds	r2, #8
 8003cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	220f      	movs	r2, #15
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	08da      	lsrs	r2, r3, #3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3208      	adds	r2, #8
 8003cec:	6939      	ldr	r1, [r7, #16]
 8003cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 0203 	and.w	r2, r3, #3
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 80a6 	beq.w	8003e80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d34:	4b5b      	ldr	r3, [pc, #364]	; (8003ea4 <HAL_GPIO_Init+0x2e4>)
 8003d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d38:	4a5a      	ldr	r2, [pc, #360]	; (8003ea4 <HAL_GPIO_Init+0x2e4>)
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	6613      	str	r3, [r2, #96]	; 0x60
 8003d40:	4b58      	ldr	r3, [pc, #352]	; (8003ea4 <HAL_GPIO_Init+0x2e4>)
 8003d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d4c:	4a56      	ldr	r2, [pc, #344]	; (8003ea8 <HAL_GPIO_Init+0x2e8>)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	089b      	lsrs	r3, r3, #2
 8003d52:	3302      	adds	r3, #2
 8003d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	220f      	movs	r2, #15
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d76:	d01f      	beq.n	8003db8 <HAL_GPIO_Init+0x1f8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a4c      	ldr	r2, [pc, #304]	; (8003eac <HAL_GPIO_Init+0x2ec>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d019      	beq.n	8003db4 <HAL_GPIO_Init+0x1f4>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a4b      	ldr	r2, [pc, #300]	; (8003eb0 <HAL_GPIO_Init+0x2f0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d013      	beq.n	8003db0 <HAL_GPIO_Init+0x1f0>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a4a      	ldr	r2, [pc, #296]	; (8003eb4 <HAL_GPIO_Init+0x2f4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00d      	beq.n	8003dac <HAL_GPIO_Init+0x1ec>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a49      	ldr	r2, [pc, #292]	; (8003eb8 <HAL_GPIO_Init+0x2f8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d007      	beq.n	8003da8 <HAL_GPIO_Init+0x1e8>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a48      	ldr	r2, [pc, #288]	; (8003ebc <HAL_GPIO_Init+0x2fc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d101      	bne.n	8003da4 <HAL_GPIO_Init+0x1e4>
 8003da0:	2305      	movs	r3, #5
 8003da2:	e00a      	b.n	8003dba <HAL_GPIO_Init+0x1fa>
 8003da4:	2306      	movs	r3, #6
 8003da6:	e008      	b.n	8003dba <HAL_GPIO_Init+0x1fa>
 8003da8:	2304      	movs	r3, #4
 8003daa:	e006      	b.n	8003dba <HAL_GPIO_Init+0x1fa>
 8003dac:	2303      	movs	r3, #3
 8003dae:	e004      	b.n	8003dba <HAL_GPIO_Init+0x1fa>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e002      	b.n	8003dba <HAL_GPIO_Init+0x1fa>
 8003db4:	2301      	movs	r3, #1
 8003db6:	e000      	b.n	8003dba <HAL_GPIO_Init+0x1fa>
 8003db8:	2300      	movs	r3, #0
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	f002 0203 	and.w	r2, r2, #3
 8003dc0:	0092      	lsls	r2, r2, #2
 8003dc2:	4093      	lsls	r3, r2
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dca:	4937      	ldr	r1, [pc, #220]	; (8003ea8 <HAL_GPIO_Init+0x2e8>)
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	089b      	lsrs	r3, r3, #2
 8003dd0:	3302      	adds	r3, #2
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dd8:	4b39      	ldr	r3, [pc, #228]	; (8003ec0 <HAL_GPIO_Init+0x300>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4013      	ands	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dfc:	4a30      	ldr	r2, [pc, #192]	; (8003ec0 <HAL_GPIO_Init+0x300>)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e02:	4b2f      	ldr	r3, [pc, #188]	; (8003ec0 <HAL_GPIO_Init+0x300>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e26:	4a26      	ldr	r2, [pc, #152]	; (8003ec0 <HAL_GPIO_Init+0x300>)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e2c:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <HAL_GPIO_Init+0x300>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e50:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <HAL_GPIO_Init+0x300>)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e56:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <HAL_GPIO_Init+0x300>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4013      	ands	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e7a:	4a11      	ldr	r2, [pc, #68]	; (8003ec0 <HAL_GPIO_Init+0x300>)
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	3301      	adds	r3, #1
 8003e84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f47f ae9d 	bne.w	8003bd0 <HAL_GPIO_Init+0x10>
  }
}
 8003e96:	bf00      	nop
 8003e98:	bf00      	nop
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40010000 	.word	0x40010000
 8003eac:	48000400 	.word	0x48000400
 8003eb0:	48000800 	.word	0x48000800
 8003eb4:	48000c00 	.word	0x48000c00
 8003eb8:	48001000 	.word	0x48001000
 8003ebc:	48001400 	.word	0x48001400
 8003ec0:	40010400 	.word	0x40010400

08003ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	807b      	strh	r3, [r7, #2]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ed4:	787b      	ldrb	r3, [r7, #1]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eda:	887a      	ldrh	r2, [r7, #2]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ee0:	e002      	b.n	8003ee8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ee2:	887a      	ldrh	r2, [r7, #2]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003efe:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d006      	beq.n	8003f18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f0a:	4a05      	ldr	r2, [pc, #20]	; (8003f20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f10:	88fb      	ldrh	r3, [r7, #6]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f806 	bl	8003f24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f18:	bf00      	nop
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40010400 	.word	0x40010400

08003f24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
	...

08003f3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d141      	bne.n	8003fce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f4a:	4b4b      	ldr	r3, [pc, #300]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f56:	d131      	bne.n	8003fbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f58:	4b47      	ldr	r3, [pc, #284]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f5e:	4a46      	ldr	r2, [pc, #280]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f68:	4b43      	ldr	r3, [pc, #268]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f70:	4a41      	ldr	r2, [pc, #260]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f78:	4b40      	ldr	r3, [pc, #256]	; (800407c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2232      	movs	r2, #50	; 0x32
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	4a3f      	ldr	r2, [pc, #252]	; (8004080 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	0c9b      	lsrs	r3, r3, #18
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f8e:	e002      	b.n	8003f96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f96:	4b38      	ldr	r3, [pc, #224]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa2:	d102      	bne.n	8003faa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f2      	bne.n	8003f90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003faa:	4b33      	ldr	r3, [pc, #204]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb6:	d158      	bne.n	800406a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e057      	b.n	800406c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fbc:	4b2e      	ldr	r3, [pc, #184]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fc2:	4a2d      	ldr	r2, [pc, #180]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fcc:	e04d      	b.n	800406a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd4:	d141      	bne.n	800405a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fd6:	4b28      	ldr	r3, [pc, #160]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe2:	d131      	bne.n	8004048 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fe4:	4b24      	ldr	r3, [pc, #144]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fea:	4a23      	ldr	r2, [pc, #140]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ffc:	4a1e      	ldr	r2, [pc, #120]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004002:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004004:	4b1d      	ldr	r3, [pc, #116]	; (800407c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2232      	movs	r2, #50	; 0x32
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	4a1c      	ldr	r2, [pc, #112]	; (8004080 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	0c9b      	lsrs	r3, r3, #18
 8004016:	3301      	adds	r3, #1
 8004018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800401a:	e002      	b.n	8004022 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3b01      	subs	r3, #1
 8004020:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004022:	4b15      	ldr	r3, [pc, #84]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800402a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402e:	d102      	bne.n	8004036 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f2      	bne.n	800401c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004042:	d112      	bne.n	800406a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e011      	b.n	800406c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004054:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004058:	e007      	b.n	800406a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800405a:	4b07      	ldr	r3, [pc, #28]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004062:	4a05      	ldr	r2, [pc, #20]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004064:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004068:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	40007000 	.word	0x40007000
 800407c:	20000004 	.word	0x20000004
 8004080:	431bde83 	.word	0x431bde83

08004084 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800408e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004092:	6093      	str	r3, [r2, #8]
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40007000 	.word	0x40007000

080040a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e2fe      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d075      	beq.n	80041ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040c2:	4b97      	ldr	r3, [pc, #604]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040cc:	4b94      	ldr	r3, [pc, #592]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b0c      	cmp	r3, #12
 80040da:	d102      	bne.n	80040e2 <HAL_RCC_OscConfig+0x3e>
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d002      	beq.n	80040e8 <HAL_RCC_OscConfig+0x44>
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d10b      	bne.n	8004100 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e8:	4b8d      	ldr	r3, [pc, #564]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d05b      	beq.n	80041ac <HAL_RCC_OscConfig+0x108>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d157      	bne.n	80041ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e2d9      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004108:	d106      	bne.n	8004118 <HAL_RCC_OscConfig+0x74>
 800410a:	4b85      	ldr	r3, [pc, #532]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a84      	ldr	r2, [pc, #528]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e01d      	b.n	8004154 <HAL_RCC_OscConfig+0xb0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x98>
 8004122:	4b7f      	ldr	r3, [pc, #508]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a7e      	ldr	r2, [pc, #504]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 8004128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b7c      	ldr	r3, [pc, #496]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a7b      	ldr	r2, [pc, #492]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e00b      	b.n	8004154 <HAL_RCC_OscConfig+0xb0>
 800413c:	4b78      	ldr	r3, [pc, #480]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a77      	ldr	r2, [pc, #476]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 8004142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	4b75      	ldr	r3, [pc, #468]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a74      	ldr	r2, [pc, #464]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 800414e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d013      	beq.n	8004184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415c:	f7fd fac0 	bl	80016e0 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004164:	f7fd fabc 	bl	80016e0 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	; 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e29e      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004176:	4b6a      	ldr	r3, [pc, #424]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0xc0>
 8004182:	e014      	b.n	80041ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fd faac 	bl	80016e0 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800418c:	f7fd faa8 	bl	80016e0 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	; 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e28a      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800419e:	4b60      	ldr	r3, [pc, #384]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0xe8>
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d075      	beq.n	80042a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ba:	4b59      	ldr	r3, [pc, #356]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041c4:	4b56      	ldr	r3, [pc, #344]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2b0c      	cmp	r3, #12
 80041d2:	d102      	bne.n	80041da <HAL_RCC_OscConfig+0x136>
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d002      	beq.n	80041e0 <HAL_RCC_OscConfig+0x13c>
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d11f      	bne.n	8004220 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041e0:	4b4f      	ldr	r3, [pc, #316]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_RCC_OscConfig+0x154>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e25d      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f8:	4b49      	ldr	r3, [pc, #292]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	4946      	ldr	r1, [pc, #280]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 8004208:	4313      	orrs	r3, r2
 800420a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800420c:	4b45      	ldr	r3, [pc, #276]	; (8004324 <HAL_RCC_OscConfig+0x280>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f7fd fa19 	bl	8001648 <HAL_InitTick>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d043      	beq.n	80042a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e249      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d023      	beq.n	8004270 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004228:	4b3d      	ldr	r3, [pc, #244]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a3c      	ldr	r2, [pc, #240]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 800422e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7fd fa54 	bl	80016e0 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800423c:	f7fd fa50 	bl	80016e0 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e232      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800424e:	4b34      	ldr	r3, [pc, #208]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f0      	beq.n	800423c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425a:	4b31      	ldr	r3, [pc, #196]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	061b      	lsls	r3, r3, #24
 8004268:	492d      	ldr	r1, [pc, #180]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 800426a:	4313      	orrs	r3, r2
 800426c:	604b      	str	r3, [r1, #4]
 800426e:	e01a      	b.n	80042a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004270:	4b2b      	ldr	r3, [pc, #172]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a2a      	ldr	r2, [pc, #168]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 8004276:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800427a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7fd fa30 	bl	80016e0 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004284:	f7fd fa2c 	bl	80016e0 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e20e      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004296:	4b22      	ldr	r3, [pc, #136]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x1e0>
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d041      	beq.n	8004336 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d01c      	beq.n	80042f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ba:	4b19      	ldr	r3, [pc, #100]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 80042bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c0:	4a17      	ldr	r2, [pc, #92]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ca:	f7fd fa09 	bl	80016e0 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d2:	f7fd fa05 	bl	80016e0 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e1e7      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 80042e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0ef      	beq.n	80042d2 <HAL_RCC_OscConfig+0x22e>
 80042f2:	e020      	b.n	8004336 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f4:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 80042f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042fa:	4a09      	ldr	r2, [pc, #36]	; (8004320 <HAL_RCC_OscConfig+0x27c>)
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004304:	f7fd f9ec 	bl	80016e0 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800430a:	e00d      	b.n	8004328 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800430c:	f7fd f9e8 	bl	80016e0 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d906      	bls.n	8004328 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e1ca      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
 800431e:	bf00      	nop
 8004320:	40021000 	.word	0x40021000
 8004324:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004328:	4b8c      	ldr	r3, [pc, #560]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 800432a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1ea      	bne.n	800430c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 80a6 	beq.w	8004490 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004344:	2300      	movs	r3, #0
 8004346:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004348:	4b84      	ldr	r3, [pc, #528]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 800434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_RCC_OscConfig+0x2b4>
 8004354:	2301      	movs	r3, #1
 8004356:	e000      	b.n	800435a <HAL_RCC_OscConfig+0x2b6>
 8004358:	2300      	movs	r3, #0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00d      	beq.n	800437a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800435e:	4b7f      	ldr	r3, [pc, #508]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	4a7e      	ldr	r2, [pc, #504]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 8004364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004368:	6593      	str	r3, [r2, #88]	; 0x58
 800436a:	4b7c      	ldr	r3, [pc, #496]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 800436c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004376:	2301      	movs	r3, #1
 8004378:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800437a:	4b79      	ldr	r3, [pc, #484]	; (8004560 <HAL_RCC_OscConfig+0x4bc>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004382:	2b00      	cmp	r3, #0
 8004384:	d118      	bne.n	80043b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004386:	4b76      	ldr	r3, [pc, #472]	; (8004560 <HAL_RCC_OscConfig+0x4bc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a75      	ldr	r2, [pc, #468]	; (8004560 <HAL_RCC_OscConfig+0x4bc>)
 800438c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004392:	f7fd f9a5 	bl	80016e0 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800439a:	f7fd f9a1 	bl	80016e0 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e183      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ac:	4b6c      	ldr	r3, [pc, #432]	; (8004560 <HAL_RCC_OscConfig+0x4bc>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d108      	bne.n	80043d2 <HAL_RCC_OscConfig+0x32e>
 80043c0:	4b66      	ldr	r3, [pc, #408]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c6:	4a65      	ldr	r2, [pc, #404]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 80043c8:	f043 0301 	orr.w	r3, r3, #1
 80043cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043d0:	e024      	b.n	800441c <HAL_RCC_OscConfig+0x378>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b05      	cmp	r3, #5
 80043d8:	d110      	bne.n	80043fc <HAL_RCC_OscConfig+0x358>
 80043da:	4b60      	ldr	r3, [pc, #384]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 80043dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e0:	4a5e      	ldr	r2, [pc, #376]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 80043e2:	f043 0304 	orr.w	r3, r3, #4
 80043e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043ea:	4b5c      	ldr	r3, [pc, #368]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f0:	4a5a      	ldr	r2, [pc, #360]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043fa:	e00f      	b.n	800441c <HAL_RCC_OscConfig+0x378>
 80043fc:	4b57      	ldr	r3, [pc, #348]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	4a56      	ldr	r2, [pc, #344]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800440c:	4b53      	ldr	r3, [pc, #332]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	4a52      	ldr	r2, [pc, #328]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 8004414:	f023 0304 	bic.w	r3, r3, #4
 8004418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d016      	beq.n	8004452 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004424:	f7fd f95c 	bl	80016e0 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800442a:	e00a      	b.n	8004442 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442c:	f7fd f958 	bl	80016e0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f241 3288 	movw	r2, #5000	; 0x1388
 800443a:	4293      	cmp	r3, r2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e138      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004442:	4b46      	ldr	r3, [pc, #280]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0ed      	beq.n	800442c <HAL_RCC_OscConfig+0x388>
 8004450:	e015      	b.n	800447e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004452:	f7fd f945 	bl	80016e0 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004458:	e00a      	b.n	8004470 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445a:	f7fd f941 	bl	80016e0 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	f241 3288 	movw	r2, #5000	; 0x1388
 8004468:	4293      	cmp	r3, r2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e121      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004470:	4b3a      	ldr	r3, [pc, #232]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1ed      	bne.n	800445a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800447e:	7ffb      	ldrb	r3, [r7, #31]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d105      	bne.n	8004490 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004484:	4b35      	ldr	r3, [pc, #212]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	4a34      	ldr	r2, [pc, #208]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 800448a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800448e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0320 	and.w	r3, r3, #32
 8004498:	2b00      	cmp	r3, #0
 800449a:	d03c      	beq.n	8004516 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01c      	beq.n	80044de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044a4:	4b2d      	ldr	r3, [pc, #180]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 80044a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044aa:	4a2c      	ldr	r2, [pc, #176]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fd f914 	bl	80016e0 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044bc:	f7fd f910 	bl	80016e0 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0f2      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044ce:	4b23      	ldr	r3, [pc, #140]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 80044d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0ef      	beq.n	80044bc <HAL_RCC_OscConfig+0x418>
 80044dc:	e01b      	b.n	8004516 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044de:	4b1f      	ldr	r3, [pc, #124]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 80044e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044e4:	4a1d      	ldr	r2, [pc, #116]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 80044e6:	f023 0301 	bic.w	r3, r3, #1
 80044ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ee:	f7fd f8f7 	bl	80016e0 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044f6:	f7fd f8f3 	bl	80016e0 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e0d5      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004508:	4b14      	ldr	r3, [pc, #80]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 800450a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1ef      	bne.n	80044f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80c9 	beq.w	80046b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004520:	4b0e      	ldr	r3, [pc, #56]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 030c 	and.w	r3, r3, #12
 8004528:	2b0c      	cmp	r3, #12
 800452a:	f000 8083 	beq.w	8004634 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d15e      	bne.n	80045f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004536:	4b09      	ldr	r3, [pc, #36]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a08      	ldr	r2, [pc, #32]	; (800455c <HAL_RCC_OscConfig+0x4b8>)
 800453c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004542:	f7fd f8cd 	bl	80016e0 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004548:	e00c      	b.n	8004564 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454a:	f7fd f8c9 	bl	80016e0 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d905      	bls.n	8004564 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e0ab      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
 800455c:	40021000 	.word	0x40021000
 8004560:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004564:	4b55      	ldr	r3, [pc, #340]	; (80046bc <HAL_RCC_OscConfig+0x618>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1ec      	bne.n	800454a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004570:	4b52      	ldr	r3, [pc, #328]	; (80046bc <HAL_RCC_OscConfig+0x618>)
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	4b52      	ldr	r3, [pc, #328]	; (80046c0 <HAL_RCC_OscConfig+0x61c>)
 8004576:	4013      	ands	r3, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6a11      	ldr	r1, [r2, #32]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004580:	3a01      	subs	r2, #1
 8004582:	0112      	lsls	r2, r2, #4
 8004584:	4311      	orrs	r1, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800458a:	0212      	lsls	r2, r2, #8
 800458c:	4311      	orrs	r1, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004592:	0852      	lsrs	r2, r2, #1
 8004594:	3a01      	subs	r2, #1
 8004596:	0552      	lsls	r2, r2, #21
 8004598:	4311      	orrs	r1, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800459e:	0852      	lsrs	r2, r2, #1
 80045a0:	3a01      	subs	r2, #1
 80045a2:	0652      	lsls	r2, r2, #25
 80045a4:	4311      	orrs	r1, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045aa:	06d2      	lsls	r2, r2, #27
 80045ac:	430a      	orrs	r2, r1
 80045ae:	4943      	ldr	r1, [pc, #268]	; (80046bc <HAL_RCC_OscConfig+0x618>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b4:	4b41      	ldr	r3, [pc, #260]	; (80046bc <HAL_RCC_OscConfig+0x618>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a40      	ldr	r2, [pc, #256]	; (80046bc <HAL_RCC_OscConfig+0x618>)
 80045ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045c0:	4b3e      	ldr	r3, [pc, #248]	; (80046bc <HAL_RCC_OscConfig+0x618>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4a3d      	ldr	r2, [pc, #244]	; (80046bc <HAL_RCC_OscConfig+0x618>)
 80045c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fd f888 	bl	80016e0 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d4:	f7fd f884 	bl	80016e0 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e066      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e6:	4b35      	ldr	r3, [pc, #212]	; (80046bc <HAL_RCC_OscConfig+0x618>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x530>
 80045f2:	e05e      	b.n	80046b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f4:	4b31      	ldr	r3, [pc, #196]	; (80046bc <HAL_RCC_OscConfig+0x618>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a30      	ldr	r2, [pc, #192]	; (80046bc <HAL_RCC_OscConfig+0x618>)
 80045fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fd f86e 	bl	80016e0 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004608:	f7fd f86a 	bl	80016e0 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e04c      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800461a:	4b28      	ldr	r3, [pc, #160]	; (80046bc <HAL_RCC_OscConfig+0x618>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004626:	4b25      	ldr	r3, [pc, #148]	; (80046bc <HAL_RCC_OscConfig+0x618>)
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	4924      	ldr	r1, [pc, #144]	; (80046bc <HAL_RCC_OscConfig+0x618>)
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <HAL_RCC_OscConfig+0x620>)
 800462e:	4013      	ands	r3, r2
 8004630:	60cb      	str	r3, [r1, #12]
 8004632:	e03e      	b.n	80046b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e039      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004640:	4b1e      	ldr	r3, [pc, #120]	; (80046bc <HAL_RCC_OscConfig+0x618>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 0203 	and.w	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	429a      	cmp	r2, r3
 8004652:	d12c      	bne.n	80046ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	3b01      	subs	r3, #1
 8004660:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d123      	bne.n	80046ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004672:	429a      	cmp	r2, r3
 8004674:	d11b      	bne.n	80046ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d113      	bne.n	80046ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	085b      	lsrs	r3, r3, #1
 8004692:	3b01      	subs	r3, #1
 8004694:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004696:	429a      	cmp	r2, r3
 8004698:	d109      	bne.n	80046ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	3b01      	subs	r3, #1
 80046a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3720      	adds	r7, #32
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40021000 	.word	0x40021000
 80046c0:	019f800c 	.word	0x019f800c
 80046c4:	feeefffc 	.word	0xfeeefffc

080046c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e11e      	b.n	800491e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046e0:	4b91      	ldr	r3, [pc, #580]	; (8004928 <HAL_RCC_ClockConfig+0x260>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 030f 	and.w	r3, r3, #15
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d910      	bls.n	8004710 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ee:	4b8e      	ldr	r3, [pc, #568]	; (8004928 <HAL_RCC_ClockConfig+0x260>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f023 020f 	bic.w	r2, r3, #15
 80046f6:	498c      	ldr	r1, [pc, #560]	; (8004928 <HAL_RCC_ClockConfig+0x260>)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fe:	4b8a      	ldr	r3, [pc, #552]	; (8004928 <HAL_RCC_ClockConfig+0x260>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d001      	beq.n	8004710 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e106      	b.n	800491e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d073      	beq.n	8004804 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d129      	bne.n	8004778 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004724:	4b81      	ldr	r3, [pc, #516]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0f4      	b.n	800491e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004734:	f000 f99e 	bl	8004a74 <RCC_GetSysClockFreqFromPLLSource>
 8004738:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4a7c      	ldr	r2, [pc, #496]	; (8004930 <HAL_RCC_ClockConfig+0x268>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d93f      	bls.n	80047c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004742:	4b7a      	ldr	r3, [pc, #488]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004756:	2b00      	cmp	r3, #0
 8004758:	d033      	beq.n	80047c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800475e:	2b00      	cmp	r3, #0
 8004760:	d12f      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004762:	4b72      	ldr	r3, [pc, #456]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800476a:	4a70      	ldr	r2, [pc, #448]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 800476c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004770:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004772:	2380      	movs	r3, #128	; 0x80
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	e024      	b.n	80047c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d107      	bne.n	8004790 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004780:	4b6a      	ldr	r3, [pc, #424]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d109      	bne.n	80047a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0c6      	b.n	800491e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004790:	4b66      	ldr	r3, [pc, #408]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0be      	b.n	800491e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80047a0:	f000 f8ce 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 80047a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4a61      	ldr	r2, [pc, #388]	; (8004930 <HAL_RCC_ClockConfig+0x268>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d909      	bls.n	80047c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047ae:	4b5f      	ldr	r3, [pc, #380]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047b6:	4a5d      	ldr	r2, [pc, #372]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 80047b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047c2:	4b5a      	ldr	r3, [pc, #360]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f023 0203 	bic.w	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	4957      	ldr	r1, [pc, #348]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d4:	f7fc ff84 	bl	80016e0 <HAL_GetTick>
 80047d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047da:	e00a      	b.n	80047f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047dc:	f7fc ff80 	bl	80016e0 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e095      	b.n	800491e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	4b4e      	ldr	r3, [pc, #312]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 020c 	and.w	r2, r3, #12
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	429a      	cmp	r2, r3
 8004802:	d1eb      	bne.n	80047dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d023      	beq.n	8004858 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800481c:	4b43      	ldr	r3, [pc, #268]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4a42      	ldr	r2, [pc, #264]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 8004822:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004826:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d007      	beq.n	8004844 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004834:	4b3d      	ldr	r3, [pc, #244]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800483c:	4a3b      	ldr	r2, [pc, #236]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 800483e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004842:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004844:	4b39      	ldr	r3, [pc, #228]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	4936      	ldr	r1, [pc, #216]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
 8004856:	e008      	b.n	800486a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2b80      	cmp	r3, #128	; 0x80
 800485c:	d105      	bne.n	800486a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800485e:	4b33      	ldr	r3, [pc, #204]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	4a32      	ldr	r2, [pc, #200]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 8004864:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004868:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800486a:	4b2f      	ldr	r3, [pc, #188]	; (8004928 <HAL_RCC_ClockConfig+0x260>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d21d      	bcs.n	80048b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004878:	4b2b      	ldr	r3, [pc, #172]	; (8004928 <HAL_RCC_ClockConfig+0x260>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f023 020f 	bic.w	r2, r3, #15
 8004880:	4929      	ldr	r1, [pc, #164]	; (8004928 <HAL_RCC_ClockConfig+0x260>)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	4313      	orrs	r3, r2
 8004886:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004888:	f7fc ff2a 	bl	80016e0 <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004890:	f7fc ff26 	bl	80016e0 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	; 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e03b      	b.n	800491e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	4b20      	ldr	r3, [pc, #128]	; (8004928 <HAL_RCC_ClockConfig+0x260>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d1ed      	bne.n	8004890 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c0:	4b1a      	ldr	r3, [pc, #104]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4917      	ldr	r1, [pc, #92]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048de:	4b13      	ldr	r3, [pc, #76]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	490f      	ldr	r1, [pc, #60]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048f2:	f000 f825 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 80048f6:	4602      	mov	r2, r0
 80048f8:	4b0c      	ldr	r3, [pc, #48]	; (800492c <HAL_RCC_ClockConfig+0x264>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	490c      	ldr	r1, [pc, #48]	; (8004934 <HAL_RCC_ClockConfig+0x26c>)
 8004904:	5ccb      	ldrb	r3, [r1, r3]
 8004906:	f003 031f 	and.w	r3, r3, #31
 800490a:	fa22 f303 	lsr.w	r3, r2, r3
 800490e:	4a0a      	ldr	r2, [pc, #40]	; (8004938 <HAL_RCC_ClockConfig+0x270>)
 8004910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004912:	4b0a      	ldr	r3, [pc, #40]	; (800493c <HAL_RCC_ClockConfig+0x274>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fc fe96 	bl	8001648 <HAL_InitTick>
 800491c:	4603      	mov	r3, r0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40022000 	.word	0x40022000
 800492c:	40021000 	.word	0x40021000
 8004930:	04c4b400 	.word	0x04c4b400
 8004934:	08007fd8 	.word	0x08007fd8
 8004938:	20000004 	.word	0x20000004
 800493c:	20000008 	.word	0x20000008

08004940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004946:	4b2c      	ldr	r3, [pc, #176]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 030c 	and.w	r3, r3, #12
 800494e:	2b04      	cmp	r3, #4
 8004950:	d102      	bne.n	8004958 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004952:	4b2a      	ldr	r3, [pc, #168]	; (80049fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004954:	613b      	str	r3, [r7, #16]
 8004956:	e047      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004958:	4b27      	ldr	r3, [pc, #156]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 030c 	and.w	r3, r3, #12
 8004960:	2b08      	cmp	r3, #8
 8004962:	d102      	bne.n	800496a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004964:	4b26      	ldr	r3, [pc, #152]	; (8004a00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	e03e      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800496a:	4b23      	ldr	r3, [pc, #140]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	2b0c      	cmp	r3, #12
 8004974:	d136      	bne.n	80049e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004976:	4b20      	ldr	r3, [pc, #128]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004980:	4b1d      	ldr	r3, [pc, #116]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	091b      	lsrs	r3, r3, #4
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	3301      	adds	r3, #1
 800498c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b03      	cmp	r3, #3
 8004992:	d10c      	bne.n	80049ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004994:	4a1a      	ldr	r2, [pc, #104]	; (8004a00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	4a16      	ldr	r2, [pc, #88]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800499e:	68d2      	ldr	r2, [r2, #12]
 80049a0:	0a12      	lsrs	r2, r2, #8
 80049a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	617b      	str	r3, [r7, #20]
      break;
 80049ac:	e00c      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049ae:	4a13      	ldr	r2, [pc, #76]	; (80049fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b6:	4a10      	ldr	r2, [pc, #64]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b8:	68d2      	ldr	r2, [r2, #12]
 80049ba:	0a12      	lsrs	r2, r2, #8
 80049bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049c0:	fb02 f303 	mul.w	r3, r2, r3
 80049c4:	617b      	str	r3, [r7, #20]
      break;
 80049c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	0e5b      	lsrs	r3, r3, #25
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	3301      	adds	r3, #1
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	e001      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049e8:	693b      	ldr	r3, [r7, #16]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40021000 	.word	0x40021000
 80049fc:	00f42400 	.word	0x00f42400
 8004a00:	016e3600 	.word	0x016e3600

08004a04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20000004 	.word	0x20000004

08004a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a20:	f7ff fff0 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a24:	4602      	mov	r2, r0
 8004a26:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	0a1b      	lsrs	r3, r3, #8
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	4904      	ldr	r1, [pc, #16]	; (8004a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a32:	5ccb      	ldrb	r3, [r1, r3]
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40021000 	.word	0x40021000
 8004a44:	08007fe8 	.word	0x08007fe8

08004a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a4c:	f7ff ffda 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	0adb      	lsrs	r3, r3, #11
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	4904      	ldr	r1, [pc, #16]	; (8004a70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a5e:	5ccb      	ldrb	r3, [r1, r3]
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	08007fe8 	.word	0x08007fe8

08004a74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a7a:	4b1e      	ldr	r3, [pc, #120]	; (8004af4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a84:	4b1b      	ldr	r3, [pc, #108]	; (8004af4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	091b      	lsrs	r3, r3, #4
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	3301      	adds	r3, #1
 8004a90:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d10c      	bne.n	8004ab2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a98:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	4a14      	ldr	r2, [pc, #80]	; (8004af4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aa2:	68d2      	ldr	r2, [r2, #12]
 8004aa4:	0a12      	lsrs	r2, r2, #8
 8004aa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	617b      	str	r3, [r7, #20]
    break;
 8004ab0:	e00c      	b.n	8004acc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ab2:	4a12      	ldr	r2, [pc, #72]	; (8004afc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aba:	4a0e      	ldr	r2, [pc, #56]	; (8004af4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004abc:	68d2      	ldr	r2, [r2, #12]
 8004abe:	0a12      	lsrs	r2, r2, #8
 8004ac0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ac4:	fb02 f303 	mul.w	r3, r2, r3
 8004ac8:	617b      	str	r3, [r7, #20]
    break;
 8004aca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004acc:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	0e5b      	lsrs	r3, r3, #25
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ae6:	687b      	ldr	r3, [r7, #4]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40021000 	.word	0x40021000
 8004af8:	016e3600 	.word	0x016e3600
 8004afc:	00f42400 	.word	0x00f42400

08004b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b08:	2300      	movs	r3, #0
 8004b0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 8098 	beq.w	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b22:	4b43      	ldr	r3, [pc, #268]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10d      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b2e:	4b40      	ldr	r3, [pc, #256]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b32:	4a3f      	ldr	r2, [pc, #252]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b38:	6593      	str	r3, [r2, #88]	; 0x58
 8004b3a:	4b3d      	ldr	r3, [pc, #244]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b42:	60bb      	str	r3, [r7, #8]
 8004b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b46:	2301      	movs	r3, #1
 8004b48:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b4a:	4b3a      	ldr	r3, [pc, #232]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a39      	ldr	r2, [pc, #228]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b56:	f7fc fdc3 	bl	80016e0 <HAL_GetTick>
 8004b5a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b5c:	e009      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5e:	f7fc fdbf 	bl	80016e0 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d902      	bls.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	74fb      	strb	r3, [r7, #19]
        break;
 8004b70:	e005      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b72:	4b30      	ldr	r3, [pc, #192]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0ef      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b7e:	7cfb      	ldrb	r3, [r7, #19]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d159      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b84:	4b2a      	ldr	r3, [pc, #168]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01e      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d019      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ba0:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004baa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bac:	4b20      	ldr	r3, [pc, #128]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb2:	4a1f      	ldr	r2, [pc, #124]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bbc:	4b1c      	ldr	r3, [pc, #112]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	4a1b      	ldr	r2, [pc, #108]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bcc:	4a18      	ldr	r2, [pc, #96]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d016      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bde:	f7fc fd7f 	bl	80016e0 <HAL_GetTick>
 8004be2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be4:	e00b      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be6:	f7fc fd7b 	bl	80016e0 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d902      	bls.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	74fb      	strb	r3, [r7, #19]
            break;
 8004bfc:	e006      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bfe:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0ec      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c0c:	7cfb      	ldrb	r3, [r7, #19]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10b      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c12:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c20:	4903      	ldr	r1, [pc, #12]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c28:	e008      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c2a:	7cfb      	ldrb	r3, [r7, #19]
 8004c2c:	74bb      	strb	r3, [r7, #18]
 8004c2e:	e005      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c30:	40021000 	.word	0x40021000
 8004c34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c38:	7cfb      	ldrb	r3, [r7, #19]
 8004c3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c3c:	7c7b      	ldrb	r3, [r7, #17]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d105      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c42:	4ba7      	ldr	r3, [pc, #668]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c46:	4aa6      	ldr	r2, [pc, #664]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c5a:	4ba1      	ldr	r3, [pc, #644]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c60:	f023 0203 	bic.w	r2, r3, #3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	499d      	ldr	r1, [pc, #628]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c7c:	4b98      	ldr	r3, [pc, #608]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c82:	f023 020c 	bic.w	r2, r3, #12
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	4995      	ldr	r1, [pc, #596]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c9e:	4b90      	ldr	r3, [pc, #576]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	498c      	ldr	r1, [pc, #560]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cc0:	4b87      	ldr	r3, [pc, #540]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	4984      	ldr	r1, [pc, #528]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0310 	and.w	r3, r3, #16
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ce2:	4b7f      	ldr	r3, [pc, #508]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	497b      	ldr	r1, [pc, #492]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d04:	4b76      	ldr	r3, [pc, #472]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	4973      	ldr	r1, [pc, #460]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d26:	4b6e      	ldr	r3, [pc, #440]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	496a      	ldr	r1, [pc, #424]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d48:	4b65      	ldr	r3, [pc, #404]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	4962      	ldr	r1, [pc, #392]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d6a:	4b5d      	ldr	r3, [pc, #372]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	4959      	ldr	r1, [pc, #356]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d8c:	4b54      	ldr	r3, [pc, #336]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d92:	f023 0203 	bic.w	r2, r3, #3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	4951      	ldr	r1, [pc, #324]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dae:	4b4c      	ldr	r3, [pc, #304]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	4948      	ldr	r1, [pc, #288]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d015      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dd0:	4b43      	ldr	r3, [pc, #268]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	4940      	ldr	r1, [pc, #256]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dee:	d105      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004df0:	4b3b      	ldr	r3, [pc, #236]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	4a3a      	ldr	r2, [pc, #232]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dfa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d015      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e08:	4b35      	ldr	r3, [pc, #212]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e16:	4932      	ldr	r1, [pc, #200]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e26:	d105      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e28:	4b2d      	ldr	r3, [pc, #180]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	4a2c      	ldr	r2, [pc, #176]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e32:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d015      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e40:	4b27      	ldr	r3, [pc, #156]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	4924      	ldr	r1, [pc, #144]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e5e:	d105      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e60:	4b1f      	ldr	r3, [pc, #124]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4a1e      	ldr	r2, [pc, #120]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e6a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d015      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e78:	4b19      	ldr	r3, [pc, #100]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e86:	4916      	ldr	r1, [pc, #88]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e96:	d105      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e98:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4a10      	ldr	r2, [pc, #64]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ea2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d019      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	4908      	ldr	r1, [pc, #32]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ece:	d109      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4a02      	ldr	r2, [pc, #8]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eda:	60d3      	str	r3, [r2, #12]
 8004edc:	e002      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004ede:	bf00      	nop
 8004ee0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d015      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ef0:	4b29      	ldr	r3, [pc, #164]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	4926      	ldr	r1, [pc, #152]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f0e:	d105      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f10:	4b21      	ldr	r3, [pc, #132]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	4a20      	ldr	r2, [pc, #128]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f1a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d015      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004f28:	4b1b      	ldr	r3, [pc, #108]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f36:	4918      	ldr	r1, [pc, #96]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f46:	d105      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f48:	4b13      	ldr	r3, [pc, #76]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4a12      	ldr	r2, [pc, #72]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f52:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d015      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f60:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6e:	490a      	ldr	r1, [pc, #40]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f7e:	d105      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f80:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4a04      	ldr	r2, [pc, #16]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004f8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40021000 	.word	0x40021000

08004f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e049      	b.n	8005042 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fc f950 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f000 fed0 	bl	8005d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b01      	cmp	r3, #1
 800505e:	d001      	beq.n	8005064 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e04c      	b.n	80050fe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a26      	ldr	r2, [pc, #152]	; (800510c <HAL_TIM_Base_Start+0xc0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d022      	beq.n	80050bc <HAL_TIM_Base_Start+0x70>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507e:	d01d      	beq.n	80050bc <HAL_TIM_Base_Start+0x70>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a22      	ldr	r2, [pc, #136]	; (8005110 <HAL_TIM_Base_Start+0xc4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d018      	beq.n	80050bc <HAL_TIM_Base_Start+0x70>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a21      	ldr	r2, [pc, #132]	; (8005114 <HAL_TIM_Base_Start+0xc8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <HAL_TIM_Base_Start+0x70>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1f      	ldr	r2, [pc, #124]	; (8005118 <HAL_TIM_Base_Start+0xcc>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00e      	beq.n	80050bc <HAL_TIM_Base_Start+0x70>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1e      	ldr	r2, [pc, #120]	; (800511c <HAL_TIM_Base_Start+0xd0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d009      	beq.n	80050bc <HAL_TIM_Base_Start+0x70>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1c      	ldr	r2, [pc, #112]	; (8005120 <HAL_TIM_Base_Start+0xd4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <HAL_TIM_Base_Start+0x70>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1b      	ldr	r2, [pc, #108]	; (8005124 <HAL_TIM_Base_Start+0xd8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d115      	bne.n	80050e8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	4b19      	ldr	r3, [pc, #100]	; (8005128 <HAL_TIM_Base_Start+0xdc>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b06      	cmp	r3, #6
 80050cc:	d015      	beq.n	80050fa <HAL_TIM_Base_Start+0xae>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d4:	d011      	beq.n	80050fa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0201 	orr.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e6:	e008      	b.n	80050fa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	e000      	b.n	80050fc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40012c00 	.word	0x40012c00
 8005110:	40000400 	.word	0x40000400
 8005114:	40000800 	.word	0x40000800
 8005118:	40000c00 	.word	0x40000c00
 800511c:	40013400 	.word	0x40013400
 8005120:	40014000 	.word	0x40014000
 8005124:	40015000 	.word	0x40015000
 8005128:	00010007 	.word	0x00010007

0800512c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	d001      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e054      	b.n	80051ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a26      	ldr	r2, [pc, #152]	; (80051fc <HAL_TIM_Base_Start_IT+0xd0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d022      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x80>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516e:	d01d      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x80>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a22      	ldr	r2, [pc, #136]	; (8005200 <HAL_TIM_Base_Start_IT+0xd4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d018      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x80>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a21      	ldr	r2, [pc, #132]	; (8005204 <HAL_TIM_Base_Start_IT+0xd8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x80>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1f      	ldr	r2, [pc, #124]	; (8005208 <HAL_TIM_Base_Start_IT+0xdc>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00e      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x80>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1e      	ldr	r2, [pc, #120]	; (800520c <HAL_TIM_Base_Start_IT+0xe0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d009      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x80>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1c      	ldr	r2, [pc, #112]	; (8005210 <HAL_TIM_Base_Start_IT+0xe4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x80>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1b      	ldr	r2, [pc, #108]	; (8005214 <HAL_TIM_Base_Start_IT+0xe8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d115      	bne.n	80051d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	4b19      	ldr	r3, [pc, #100]	; (8005218 <HAL_TIM_Base_Start_IT+0xec>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b06      	cmp	r3, #6
 80051bc:	d015      	beq.n	80051ea <HAL_TIM_Base_Start_IT+0xbe>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c4:	d011      	beq.n	80051ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d6:	e008      	b.n	80051ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e000      	b.n	80051ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40012c00 	.word	0x40012c00
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800
 8005208:	40000c00 	.word	0x40000c00
 800520c:	40013400 	.word	0x40013400
 8005210:	40014000 	.word	0x40014000
 8005214:	40015000 	.word	0x40015000
 8005218:	00010007 	.word	0x00010007

0800521c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e049      	b.n	80052c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fb fff0 	bl	8001228 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f000 fd90 	bl	8005d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d109      	bne.n	80052f0 <HAL_TIM_PWM_Start+0x24>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	bf14      	ite	ne
 80052e8:	2301      	movne	r3, #1
 80052ea:	2300      	moveq	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	e03c      	b.n	800536a <HAL_TIM_PWM_Start+0x9e>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d109      	bne.n	800530a <HAL_TIM_PWM_Start+0x3e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b01      	cmp	r3, #1
 8005300:	bf14      	ite	ne
 8005302:	2301      	movne	r3, #1
 8005304:	2300      	moveq	r3, #0
 8005306:	b2db      	uxtb	r3, r3
 8005308:	e02f      	b.n	800536a <HAL_TIM_PWM_Start+0x9e>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b08      	cmp	r3, #8
 800530e:	d109      	bne.n	8005324 <HAL_TIM_PWM_Start+0x58>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	bf14      	ite	ne
 800531c:	2301      	movne	r3, #1
 800531e:	2300      	moveq	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	e022      	b.n	800536a <HAL_TIM_PWM_Start+0x9e>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b0c      	cmp	r3, #12
 8005328:	d109      	bne.n	800533e <HAL_TIM_PWM_Start+0x72>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b01      	cmp	r3, #1
 8005334:	bf14      	ite	ne
 8005336:	2301      	movne	r3, #1
 8005338:	2300      	moveq	r3, #0
 800533a:	b2db      	uxtb	r3, r3
 800533c:	e015      	b.n	800536a <HAL_TIM_PWM_Start+0x9e>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b10      	cmp	r3, #16
 8005342:	d109      	bne.n	8005358 <HAL_TIM_PWM_Start+0x8c>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b01      	cmp	r3, #1
 800534e:	bf14      	ite	ne
 8005350:	2301      	movne	r3, #1
 8005352:	2300      	moveq	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	e008      	b.n	800536a <HAL_TIM_PWM_Start+0x9e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b01      	cmp	r3, #1
 8005362:	bf14      	ite	ne
 8005364:	2301      	movne	r3, #1
 8005366:	2300      	moveq	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e0a6      	b.n	80054c0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d104      	bne.n	8005382 <HAL_TIM_PWM_Start+0xb6>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005380:	e023      	b.n	80053ca <HAL_TIM_PWM_Start+0xfe>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b04      	cmp	r3, #4
 8005386:	d104      	bne.n	8005392 <HAL_TIM_PWM_Start+0xc6>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005390:	e01b      	b.n	80053ca <HAL_TIM_PWM_Start+0xfe>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b08      	cmp	r3, #8
 8005396:	d104      	bne.n	80053a2 <HAL_TIM_PWM_Start+0xd6>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a0:	e013      	b.n	80053ca <HAL_TIM_PWM_Start+0xfe>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b0c      	cmp	r3, #12
 80053a6:	d104      	bne.n	80053b2 <HAL_TIM_PWM_Start+0xe6>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053b0:	e00b      	b.n	80053ca <HAL_TIM_PWM_Start+0xfe>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b10      	cmp	r3, #16
 80053b6:	d104      	bne.n	80053c2 <HAL_TIM_PWM_Start+0xf6>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c0:	e003      	b.n	80053ca <HAL_TIM_PWM_Start+0xfe>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2202      	movs	r2, #2
 80053c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2201      	movs	r2, #1
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f001 f94e 	bl	8006674 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a3a      	ldr	r2, [pc, #232]	; (80054c8 <HAL_TIM_PWM_Start+0x1fc>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d018      	beq.n	8005414 <HAL_TIM_PWM_Start+0x148>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a39      	ldr	r2, [pc, #228]	; (80054cc <HAL_TIM_PWM_Start+0x200>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d013      	beq.n	8005414 <HAL_TIM_PWM_Start+0x148>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a37      	ldr	r2, [pc, #220]	; (80054d0 <HAL_TIM_PWM_Start+0x204>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00e      	beq.n	8005414 <HAL_TIM_PWM_Start+0x148>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a36      	ldr	r2, [pc, #216]	; (80054d4 <HAL_TIM_PWM_Start+0x208>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d009      	beq.n	8005414 <HAL_TIM_PWM_Start+0x148>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a34      	ldr	r2, [pc, #208]	; (80054d8 <HAL_TIM_PWM_Start+0x20c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d004      	beq.n	8005414 <HAL_TIM_PWM_Start+0x148>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a33      	ldr	r2, [pc, #204]	; (80054dc <HAL_TIM_PWM_Start+0x210>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d101      	bne.n	8005418 <HAL_TIM_PWM_Start+0x14c>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <HAL_TIM_PWM_Start+0x14e>
 8005418:	2300      	movs	r3, #0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d007      	beq.n	800542e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800542c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a25      	ldr	r2, [pc, #148]	; (80054c8 <HAL_TIM_PWM_Start+0x1fc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d022      	beq.n	800547e <HAL_TIM_PWM_Start+0x1b2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005440:	d01d      	beq.n	800547e <HAL_TIM_PWM_Start+0x1b2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a26      	ldr	r2, [pc, #152]	; (80054e0 <HAL_TIM_PWM_Start+0x214>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d018      	beq.n	800547e <HAL_TIM_PWM_Start+0x1b2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a24      	ldr	r2, [pc, #144]	; (80054e4 <HAL_TIM_PWM_Start+0x218>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d013      	beq.n	800547e <HAL_TIM_PWM_Start+0x1b2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a23      	ldr	r2, [pc, #140]	; (80054e8 <HAL_TIM_PWM_Start+0x21c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00e      	beq.n	800547e <HAL_TIM_PWM_Start+0x1b2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a19      	ldr	r2, [pc, #100]	; (80054cc <HAL_TIM_PWM_Start+0x200>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d009      	beq.n	800547e <HAL_TIM_PWM_Start+0x1b2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a18      	ldr	r2, [pc, #96]	; (80054d0 <HAL_TIM_PWM_Start+0x204>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d004      	beq.n	800547e <HAL_TIM_PWM_Start+0x1b2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a18      	ldr	r2, [pc, #96]	; (80054dc <HAL_TIM_PWM_Start+0x210>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d115      	bne.n	80054aa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	4b19      	ldr	r3, [pc, #100]	; (80054ec <HAL_TIM_PWM_Start+0x220>)
 8005486:	4013      	ands	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b06      	cmp	r3, #6
 800548e:	d015      	beq.n	80054bc <HAL_TIM_PWM_Start+0x1f0>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005496:	d011      	beq.n	80054bc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a8:	e008      	b.n	80054bc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0201 	orr.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	e000      	b.n	80054be <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40012c00 	.word	0x40012c00
 80054cc:	40013400 	.word	0x40013400
 80054d0:	40014000 	.word	0x40014000
 80054d4:	40014400 	.word	0x40014400
 80054d8:	40014800 	.word	0x40014800
 80054dc:	40015000 	.word	0x40015000
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40000c00 	.word	0x40000c00
 80054ec:	00010007 	.word	0x00010007

080054f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e097      	b.n	8005634 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d106      	bne.n	800551e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7fb fe43 	bl	80011a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6812      	ldr	r2, [r2, #0]
 8005530:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005534:	f023 0307 	bic.w	r3, r3, #7
 8005538:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3304      	adds	r3, #4
 8005542:	4619      	mov	r1, r3
 8005544:	4610      	mov	r0, r2
 8005546:	f000 fc1b 	bl	8005d80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005572:	f023 0303 	bic.w	r3, r3, #3
 8005576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	4313      	orrs	r3, r2
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005590:	f023 030c 	bic.w	r3, r3, #12
 8005594:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800559c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	4313      	orrs	r3, r2
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	011a      	lsls	r2, r3, #4
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	031b      	lsls	r3, r3, #12
 80055c0:	4313      	orrs	r3, r2
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80055ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80055d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	4313      	orrs	r3, r2
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d020      	beq.n	80056a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01b      	beq.n	80056a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0202 	mvn.w	r2, #2
 8005670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fb5c 	bl	8005d44 <HAL_TIM_IC_CaptureCallback>
 800568c:	e005      	b.n	800569a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fb4e 	bl	8005d30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fb5f 	bl	8005d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d020      	beq.n	80056ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01b      	beq.n	80056ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0204 	mvn.w	r2, #4
 80056bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fb36 	bl	8005d44 <HAL_TIM_IC_CaptureCallback>
 80056d8:	e005      	b.n	80056e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fb28 	bl	8005d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fb39 	bl	8005d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d020      	beq.n	8005738 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01b      	beq.n	8005738 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0208 	mvn.w	r2, #8
 8005708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2204      	movs	r2, #4
 800570e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fb10 	bl	8005d44 <HAL_TIM_IC_CaptureCallback>
 8005724:	e005      	b.n	8005732 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fb02 	bl	8005d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fb13 	bl	8005d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 0310 	and.w	r3, r3, #16
 800573e:	2b00      	cmp	r3, #0
 8005740:	d020      	beq.n	8005784 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01b      	beq.n	8005784 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0210 	mvn.w	r2, #16
 8005754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2208      	movs	r2, #8
 800575a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 faea 	bl	8005d44 <HAL_TIM_IC_CaptureCallback>
 8005770:	e005      	b.n	800577e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fadc 	bl	8005d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 faed 	bl	8005d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00c      	beq.n	80057a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0201 	mvn.w	r2, #1
 80057a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fb fa80 	bl	8000ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d104      	bne.n	80057bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00c      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80057ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f001 f815 	bl	8006800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00c      	beq.n	80057fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d007      	beq.n	80057fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f001 f80d 	bl	8006814 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00c      	beq.n	800581e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d007      	beq.n	800581e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 faa7 	bl	8005d6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f003 0320 	and.w	r3, r3, #32
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00c      	beq.n	8005842 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f06f 0220 	mvn.w	r2, #32
 800583a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 ffd5 	bl	80067ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00c      	beq.n	8005866 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d007      	beq.n	8005866 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800585e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 ffe1 	bl	8006828 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00c      	beq.n	800588a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d007      	beq.n	800588a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 ffd9 	bl	800683c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00c      	beq.n	80058ae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d007      	beq.n	80058ae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80058a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 ffd1 	bl	8006850 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00c      	beq.n	80058d2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d007      	beq.n	80058d2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80058ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 ffc9 	bl	8006864 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058d2:	bf00      	nop
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e0ff      	b.n	8005afa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b14      	cmp	r3, #20
 8005906:	f200 80f0 	bhi.w	8005aea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800590a:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800590c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005910:	08005965 	.word	0x08005965
 8005914:	08005aeb 	.word	0x08005aeb
 8005918:	08005aeb 	.word	0x08005aeb
 800591c:	08005aeb 	.word	0x08005aeb
 8005920:	080059a5 	.word	0x080059a5
 8005924:	08005aeb 	.word	0x08005aeb
 8005928:	08005aeb 	.word	0x08005aeb
 800592c:	08005aeb 	.word	0x08005aeb
 8005930:	080059e7 	.word	0x080059e7
 8005934:	08005aeb 	.word	0x08005aeb
 8005938:	08005aeb 	.word	0x08005aeb
 800593c:	08005aeb 	.word	0x08005aeb
 8005940:	08005a27 	.word	0x08005a27
 8005944:	08005aeb 	.word	0x08005aeb
 8005948:	08005aeb 	.word	0x08005aeb
 800594c:	08005aeb 	.word	0x08005aeb
 8005950:	08005a69 	.word	0x08005a69
 8005954:	08005aeb 	.word	0x08005aeb
 8005958:	08005aeb 	.word	0x08005aeb
 800595c:	08005aeb 	.word	0x08005aeb
 8005960:	08005aa9 	.word	0x08005aa9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fabc 	bl	8005ee8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0208 	orr.w	r2, r2, #8
 800597e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0204 	bic.w	r2, r2, #4
 800598e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6999      	ldr	r1, [r3, #24]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	619a      	str	r2, [r3, #24]
      break;
 80059a2:	e0a5      	b.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68b9      	ldr	r1, [r7, #8]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fb36 	bl	800601c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6999      	ldr	r1, [r3, #24]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	021a      	lsls	r2, r3, #8
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	619a      	str	r2, [r3, #24]
      break;
 80059e4:	e084      	b.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fba9 	bl	8006144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0208 	orr.w	r2, r2, #8
 8005a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0204 	bic.w	r2, r2, #4
 8005a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69d9      	ldr	r1, [r3, #28]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	61da      	str	r2, [r3, #28]
      break;
 8005a24:	e064      	b.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fc1b 	bl	8006268 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69da      	ldr	r2, [r3, #28]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69da      	ldr	r2, [r3, #28]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69d9      	ldr	r1, [r3, #28]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	021a      	lsls	r2, r3, #8
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	61da      	str	r2, [r3, #28]
      break;
 8005a66:	e043      	b.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fc8e 	bl	8006390 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0208 	orr.w	r2, r2, #8
 8005a82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0204 	bic.w	r2, r2, #4
 8005a92:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005aa6:	e023      	b.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fcd8 	bl	8006464 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ac2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	021a      	lsls	r2, r3, #8
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005ae8:	e002      	b.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	75fb      	strb	r3, [r7, #23]
      break;
 8005aee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop

08005b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_TIM_ConfigClockSource+0x1c>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e0f6      	b.n	8005d0e <HAL_TIM_ConfigClockSource+0x20a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005b3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a6f      	ldr	r2, [pc, #444]	; (8005d18 <HAL_TIM_ConfigClockSource+0x214>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	f000 80c1 	beq.w	8005ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8005b60:	4a6d      	ldr	r2, [pc, #436]	; (8005d18 <HAL_TIM_ConfigClockSource+0x214>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	f200 80c6 	bhi.w	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b68:	4a6c      	ldr	r2, [pc, #432]	; (8005d1c <HAL_TIM_ConfigClockSource+0x218>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	f000 80b9 	beq.w	8005ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8005b70:	4a6a      	ldr	r2, [pc, #424]	; (8005d1c <HAL_TIM_ConfigClockSource+0x218>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	f200 80be 	bhi.w	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b78:	4a69      	ldr	r2, [pc, #420]	; (8005d20 <HAL_TIM_ConfigClockSource+0x21c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	f000 80b1 	beq.w	8005ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8005b80:	4a67      	ldr	r2, [pc, #412]	; (8005d20 <HAL_TIM_ConfigClockSource+0x21c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	f200 80b6 	bhi.w	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b88:	4a66      	ldr	r2, [pc, #408]	; (8005d24 <HAL_TIM_ConfigClockSource+0x220>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	f000 80a9 	beq.w	8005ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8005b90:	4a64      	ldr	r2, [pc, #400]	; (8005d24 <HAL_TIM_ConfigClockSource+0x220>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	f200 80ae 	bhi.w	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b98:	4a63      	ldr	r2, [pc, #396]	; (8005d28 <HAL_TIM_ConfigClockSource+0x224>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	f000 80a1 	beq.w	8005ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8005ba0:	4a61      	ldr	r2, [pc, #388]	; (8005d28 <HAL_TIM_ConfigClockSource+0x224>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	f200 80a6 	bhi.w	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ba8:	4a60      	ldr	r2, [pc, #384]	; (8005d2c <HAL_TIM_ConfigClockSource+0x228>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	f000 8099 	beq.w	8005ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8005bb0:	4a5e      	ldr	r2, [pc, #376]	; (8005d2c <HAL_TIM_ConfigClockSource+0x228>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	f200 809e 	bhi.w	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bb8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005bbc:	f000 8091 	beq.w	8005ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8005bc0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005bc4:	f200 8096 	bhi.w	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bcc:	f000 8089 	beq.w	8005ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8005bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bd4:	f200 808e 	bhi.w	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bdc:	d03e      	beq.n	8005c5c <HAL_TIM_ConfigClockSource+0x158>
 8005bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be2:	f200 8087 	bhi.w	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bea:	f000 8086 	beq.w	8005cfa <HAL_TIM_ConfigClockSource+0x1f6>
 8005bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf2:	d87f      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bf4:	2b70      	cmp	r3, #112	; 0x70
 8005bf6:	d01a      	beq.n	8005c2e <HAL_TIM_ConfigClockSource+0x12a>
 8005bf8:	2b70      	cmp	r3, #112	; 0x70
 8005bfa:	d87b      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bfc:	2b60      	cmp	r3, #96	; 0x60
 8005bfe:	d050      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0x19e>
 8005c00:	2b60      	cmp	r3, #96	; 0x60
 8005c02:	d877      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c04:	2b50      	cmp	r3, #80	; 0x50
 8005c06:	d03c      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x17e>
 8005c08:	2b50      	cmp	r3, #80	; 0x50
 8005c0a:	d873      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c0c:	2b40      	cmp	r3, #64	; 0x40
 8005c0e:	d058      	beq.n	8005cc2 <HAL_TIM_ConfigClockSource+0x1be>
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d86f      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c14:	2b30      	cmp	r3, #48	; 0x30
 8005c16:	d064      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8005c18:	2b30      	cmp	r3, #48	; 0x30
 8005c1a:	d86b      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d060      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d867      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d05c      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8005c28:	2b10      	cmp	r3, #16
 8005c2a:	d05a      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8005c2c:	e062      	b.n	8005cf4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c3e:	f000 fcf9 	bl	8006634 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	609a      	str	r2, [r3, #8]
      break;
 8005c5a:	e04f      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c6c:	f000 fce2 	bl	8006634 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c7e:	609a      	str	r2, [r3, #8]
      break;
 8005c80:	e03c      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f000 fc54 	bl	800653c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2150      	movs	r1, #80	; 0x50
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fcad 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 8005ca0:	e02c      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f000 fc73 	bl	800659a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2160      	movs	r1, #96	; 0x60
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fc9d 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 8005cc0:	e01c      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f000 fc34 	bl	800653c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2140      	movs	r1, #64	; 0x40
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fc8d 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 8005ce0:	e00c      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4619      	mov	r1, r3
 8005cec:	4610      	mov	r0, r2
 8005cee:	f000 fc84 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 8005cf2:	e003      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf8:	e000      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	00100070 	.word	0x00100070
 8005d1c:	00100060 	.word	0x00100060
 8005d20:	00100050 	.word	0x00100050
 8005d24:	00100040 	.word	0x00100040
 8005d28:	00100030 	.word	0x00100030
 8005d2c:	00100020 	.word	0x00100020

08005d30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a4c      	ldr	r2, [pc, #304]	; (8005ec4 <TIM_Base_SetConfig+0x144>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d017      	beq.n	8005dc8 <TIM_Base_SetConfig+0x48>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9e:	d013      	beq.n	8005dc8 <TIM_Base_SetConfig+0x48>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a49      	ldr	r2, [pc, #292]	; (8005ec8 <TIM_Base_SetConfig+0x148>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00f      	beq.n	8005dc8 <TIM_Base_SetConfig+0x48>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a48      	ldr	r2, [pc, #288]	; (8005ecc <TIM_Base_SetConfig+0x14c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00b      	beq.n	8005dc8 <TIM_Base_SetConfig+0x48>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a47      	ldr	r2, [pc, #284]	; (8005ed0 <TIM_Base_SetConfig+0x150>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d007      	beq.n	8005dc8 <TIM_Base_SetConfig+0x48>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a46      	ldr	r2, [pc, #280]	; (8005ed4 <TIM_Base_SetConfig+0x154>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_Base_SetConfig+0x48>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a45      	ldr	r2, [pc, #276]	; (8005ed8 <TIM_Base_SetConfig+0x158>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d108      	bne.n	8005dda <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a39      	ldr	r2, [pc, #228]	; (8005ec4 <TIM_Base_SetConfig+0x144>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d023      	beq.n	8005e2a <TIM_Base_SetConfig+0xaa>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de8:	d01f      	beq.n	8005e2a <TIM_Base_SetConfig+0xaa>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a36      	ldr	r2, [pc, #216]	; (8005ec8 <TIM_Base_SetConfig+0x148>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d01b      	beq.n	8005e2a <TIM_Base_SetConfig+0xaa>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a35      	ldr	r2, [pc, #212]	; (8005ecc <TIM_Base_SetConfig+0x14c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d017      	beq.n	8005e2a <TIM_Base_SetConfig+0xaa>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a34      	ldr	r2, [pc, #208]	; (8005ed0 <TIM_Base_SetConfig+0x150>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <TIM_Base_SetConfig+0xaa>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a33      	ldr	r2, [pc, #204]	; (8005ed4 <TIM_Base_SetConfig+0x154>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00f      	beq.n	8005e2a <TIM_Base_SetConfig+0xaa>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a33      	ldr	r2, [pc, #204]	; (8005edc <TIM_Base_SetConfig+0x15c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00b      	beq.n	8005e2a <TIM_Base_SetConfig+0xaa>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a32      	ldr	r2, [pc, #200]	; (8005ee0 <TIM_Base_SetConfig+0x160>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d007      	beq.n	8005e2a <TIM_Base_SetConfig+0xaa>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a31      	ldr	r2, [pc, #196]	; (8005ee4 <TIM_Base_SetConfig+0x164>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d003      	beq.n	8005e2a <TIM_Base_SetConfig+0xaa>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a2c      	ldr	r2, [pc, #176]	; (8005ed8 <TIM_Base_SetConfig+0x158>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d108      	bne.n	8005e3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a18      	ldr	r2, [pc, #96]	; (8005ec4 <TIM_Base_SetConfig+0x144>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d013      	beq.n	8005e90 <TIM_Base_SetConfig+0x110>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a1a      	ldr	r2, [pc, #104]	; (8005ed4 <TIM_Base_SetConfig+0x154>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00f      	beq.n	8005e90 <TIM_Base_SetConfig+0x110>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a1a      	ldr	r2, [pc, #104]	; (8005edc <TIM_Base_SetConfig+0x15c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00b      	beq.n	8005e90 <TIM_Base_SetConfig+0x110>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a19      	ldr	r2, [pc, #100]	; (8005ee0 <TIM_Base_SetConfig+0x160>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d007      	beq.n	8005e90 <TIM_Base_SetConfig+0x110>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a18      	ldr	r2, [pc, #96]	; (8005ee4 <TIM_Base_SetConfig+0x164>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <TIM_Base_SetConfig+0x110>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a13      	ldr	r2, [pc, #76]	; (8005ed8 <TIM_Base_SetConfig+0x158>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d103      	bne.n	8005e98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d105      	bne.n	8005eb6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f023 0201 	bic.w	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	611a      	str	r2, [r3, #16]
  }
}
 8005eb6:	bf00      	nop
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40000800 	.word	0x40000800
 8005ed0:	40000c00 	.word	0x40000c00
 8005ed4:	40013400 	.word	0x40013400
 8005ed8:	40015000 	.word	0x40015000
 8005edc:	40014000 	.word	0x40014000
 8005ee0:	40014400 	.word	0x40014400
 8005ee4:	40014800 	.word	0x40014800

08005ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	f023 0201 	bic.w	r2, r3, #1
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0303 	bic.w	r3, r3, #3
 8005f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f023 0302 	bic.w	r3, r3, #2
 8005f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a30      	ldr	r2, [pc, #192]	; (8006004 <TIM_OC1_SetConfig+0x11c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d013      	beq.n	8005f70 <TIM_OC1_SetConfig+0x88>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a2f      	ldr	r2, [pc, #188]	; (8006008 <TIM_OC1_SetConfig+0x120>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00f      	beq.n	8005f70 <TIM_OC1_SetConfig+0x88>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a2e      	ldr	r2, [pc, #184]	; (800600c <TIM_OC1_SetConfig+0x124>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00b      	beq.n	8005f70 <TIM_OC1_SetConfig+0x88>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a2d      	ldr	r2, [pc, #180]	; (8006010 <TIM_OC1_SetConfig+0x128>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d007      	beq.n	8005f70 <TIM_OC1_SetConfig+0x88>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a2c      	ldr	r2, [pc, #176]	; (8006014 <TIM_OC1_SetConfig+0x12c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d003      	beq.n	8005f70 <TIM_OC1_SetConfig+0x88>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a2b      	ldr	r2, [pc, #172]	; (8006018 <TIM_OC1_SetConfig+0x130>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d10c      	bne.n	8005f8a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f023 0308 	bic.w	r3, r3, #8
 8005f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f023 0304 	bic.w	r3, r3, #4
 8005f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <TIM_OC1_SetConfig+0x11c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d013      	beq.n	8005fba <TIM_OC1_SetConfig+0xd2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a1c      	ldr	r2, [pc, #112]	; (8006008 <TIM_OC1_SetConfig+0x120>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00f      	beq.n	8005fba <TIM_OC1_SetConfig+0xd2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a1b      	ldr	r2, [pc, #108]	; (800600c <TIM_OC1_SetConfig+0x124>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00b      	beq.n	8005fba <TIM_OC1_SetConfig+0xd2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a1a      	ldr	r2, [pc, #104]	; (8006010 <TIM_OC1_SetConfig+0x128>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d007      	beq.n	8005fba <TIM_OC1_SetConfig+0xd2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a19      	ldr	r2, [pc, #100]	; (8006014 <TIM_OC1_SetConfig+0x12c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d003      	beq.n	8005fba <TIM_OC1_SetConfig+0xd2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a18      	ldr	r2, [pc, #96]	; (8006018 <TIM_OC1_SetConfig+0x130>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d111      	bne.n	8005fde <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	621a      	str	r2, [r3, #32]
}
 8005ff8:	bf00      	nop
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	40012c00 	.word	0x40012c00
 8006008:	40013400 	.word	0x40013400
 800600c:	40014000 	.word	0x40014000
 8006010:	40014400 	.word	0x40014400
 8006014:	40014800 	.word	0x40014800
 8006018:	40015000 	.word	0x40015000

0800601c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	f023 0210 	bic.w	r2, r3, #16
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800604a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f023 0320 	bic.w	r3, r3, #32
 800606a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a2c      	ldr	r2, [pc, #176]	; (800612c <TIM_OC2_SetConfig+0x110>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d007      	beq.n	8006090 <TIM_OC2_SetConfig+0x74>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a2b      	ldr	r2, [pc, #172]	; (8006130 <TIM_OC2_SetConfig+0x114>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_OC2_SetConfig+0x74>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a2a      	ldr	r2, [pc, #168]	; (8006134 <TIM_OC2_SetConfig+0x118>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10d      	bne.n	80060ac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	011b      	lsls	r3, r3, #4
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a1f      	ldr	r2, [pc, #124]	; (800612c <TIM_OC2_SetConfig+0x110>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d013      	beq.n	80060dc <TIM_OC2_SetConfig+0xc0>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a1e      	ldr	r2, [pc, #120]	; (8006130 <TIM_OC2_SetConfig+0x114>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00f      	beq.n	80060dc <TIM_OC2_SetConfig+0xc0>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a1e      	ldr	r2, [pc, #120]	; (8006138 <TIM_OC2_SetConfig+0x11c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00b      	beq.n	80060dc <TIM_OC2_SetConfig+0xc0>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a1d      	ldr	r2, [pc, #116]	; (800613c <TIM_OC2_SetConfig+0x120>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d007      	beq.n	80060dc <TIM_OC2_SetConfig+0xc0>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a1c      	ldr	r2, [pc, #112]	; (8006140 <TIM_OC2_SetConfig+0x124>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d003      	beq.n	80060dc <TIM_OC2_SetConfig+0xc0>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a17      	ldr	r2, [pc, #92]	; (8006134 <TIM_OC2_SetConfig+0x118>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d113      	bne.n	8006104 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40012c00 	.word	0x40012c00
 8006130:	40013400 	.word	0x40013400
 8006134:	40015000 	.word	0x40015000
 8006138:	40014000 	.word	0x40014000
 800613c:	40014400 	.word	0x40014400
 8006140:	40014800 	.word	0x40014800

08006144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0303 	bic.w	r3, r3, #3
 800617e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	021b      	lsls	r3, r3, #8
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a2b      	ldr	r2, [pc, #172]	; (8006250 <TIM_OC3_SetConfig+0x10c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d007      	beq.n	80061b6 <TIM_OC3_SetConfig+0x72>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a2a      	ldr	r2, [pc, #168]	; (8006254 <TIM_OC3_SetConfig+0x110>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d003      	beq.n	80061b6 <TIM_OC3_SetConfig+0x72>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a29      	ldr	r2, [pc, #164]	; (8006258 <TIM_OC3_SetConfig+0x114>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d10d      	bne.n	80061d2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a1e      	ldr	r2, [pc, #120]	; (8006250 <TIM_OC3_SetConfig+0x10c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <TIM_OC3_SetConfig+0xbe>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a1d      	ldr	r2, [pc, #116]	; (8006254 <TIM_OC3_SetConfig+0x110>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00f      	beq.n	8006202 <TIM_OC3_SetConfig+0xbe>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a1d      	ldr	r2, [pc, #116]	; (800625c <TIM_OC3_SetConfig+0x118>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00b      	beq.n	8006202 <TIM_OC3_SetConfig+0xbe>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1c      	ldr	r2, [pc, #112]	; (8006260 <TIM_OC3_SetConfig+0x11c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d007      	beq.n	8006202 <TIM_OC3_SetConfig+0xbe>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a1b      	ldr	r2, [pc, #108]	; (8006264 <TIM_OC3_SetConfig+0x120>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_OC3_SetConfig+0xbe>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a16      	ldr	r2, [pc, #88]	; (8006258 <TIM_OC3_SetConfig+0x114>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d113      	bne.n	800622a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4313      	orrs	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	4313      	orrs	r3, r2
 8006228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	621a      	str	r2, [r3, #32]
}
 8006244:	bf00      	nop
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	40012c00 	.word	0x40012c00
 8006254:	40013400 	.word	0x40013400
 8006258:	40015000 	.word	0x40015000
 800625c:	40014000 	.word	0x40014000
 8006260:	40014400 	.word	0x40014400
 8006264:	40014800 	.word	0x40014800

08006268 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	021b      	lsls	r3, r3, #8
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	031b      	lsls	r3, r3, #12
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a2c      	ldr	r2, [pc, #176]	; (8006378 <TIM_OC4_SetConfig+0x110>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d007      	beq.n	80062dc <TIM_OC4_SetConfig+0x74>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a2b      	ldr	r2, [pc, #172]	; (800637c <TIM_OC4_SetConfig+0x114>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_OC4_SetConfig+0x74>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a2a      	ldr	r2, [pc, #168]	; (8006380 <TIM_OC4_SetConfig+0x118>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d10d      	bne.n	80062f8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	031b      	lsls	r3, r3, #12
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a1f      	ldr	r2, [pc, #124]	; (8006378 <TIM_OC4_SetConfig+0x110>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d013      	beq.n	8006328 <TIM_OC4_SetConfig+0xc0>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a1e      	ldr	r2, [pc, #120]	; (800637c <TIM_OC4_SetConfig+0x114>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00f      	beq.n	8006328 <TIM_OC4_SetConfig+0xc0>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a1e      	ldr	r2, [pc, #120]	; (8006384 <TIM_OC4_SetConfig+0x11c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00b      	beq.n	8006328 <TIM_OC4_SetConfig+0xc0>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a1d      	ldr	r2, [pc, #116]	; (8006388 <TIM_OC4_SetConfig+0x120>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d007      	beq.n	8006328 <TIM_OC4_SetConfig+0xc0>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a1c      	ldr	r2, [pc, #112]	; (800638c <TIM_OC4_SetConfig+0x124>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_OC4_SetConfig+0xc0>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a17      	ldr	r2, [pc, #92]	; (8006380 <TIM_OC4_SetConfig+0x118>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d113      	bne.n	8006350 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800632e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006336:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	019b      	lsls	r3, r3, #6
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	019b      	lsls	r3, r3, #6
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	621a      	str	r2, [r3, #32]
}
 800636a:	bf00      	nop
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	40012c00 	.word	0x40012c00
 800637c:	40013400 	.word	0x40013400
 8006380:	40015000 	.word	0x40015000
 8006384:	40014000 	.word	0x40014000
 8006388:	40014400 	.word	0x40014400
 800638c:	40014800 	.word	0x40014800

08006390 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	041b      	lsls	r3, r3, #16
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4313      	orrs	r3, r2
 80063e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a19      	ldr	r2, [pc, #100]	; (800644c <TIM_OC5_SetConfig+0xbc>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d013      	beq.n	8006412 <TIM_OC5_SetConfig+0x82>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a18      	ldr	r2, [pc, #96]	; (8006450 <TIM_OC5_SetConfig+0xc0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00f      	beq.n	8006412 <TIM_OC5_SetConfig+0x82>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a17      	ldr	r2, [pc, #92]	; (8006454 <TIM_OC5_SetConfig+0xc4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00b      	beq.n	8006412 <TIM_OC5_SetConfig+0x82>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a16      	ldr	r2, [pc, #88]	; (8006458 <TIM_OC5_SetConfig+0xc8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d007      	beq.n	8006412 <TIM_OC5_SetConfig+0x82>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a15      	ldr	r2, [pc, #84]	; (800645c <TIM_OC5_SetConfig+0xcc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d003      	beq.n	8006412 <TIM_OC5_SetConfig+0x82>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a14      	ldr	r2, [pc, #80]	; (8006460 <TIM_OC5_SetConfig+0xd0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d109      	bne.n	8006426 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006418:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	021b      	lsls	r3, r3, #8
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	621a      	str	r2, [r3, #32]
}
 8006440:	bf00      	nop
 8006442:	371c      	adds	r7, #28
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	40012c00 	.word	0x40012c00
 8006450:	40013400 	.word	0x40013400
 8006454:	40014000 	.word	0x40014000
 8006458:	40014400 	.word	0x40014400
 800645c:	40014800 	.word	0x40014800
 8006460:	40015000 	.word	0x40015000

08006464 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	021b      	lsls	r3, r3, #8
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	051b      	lsls	r3, r3, #20
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a1a      	ldr	r2, [pc, #104]	; (8006524 <TIM_OC6_SetConfig+0xc0>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d013      	beq.n	80064e8 <TIM_OC6_SetConfig+0x84>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a19      	ldr	r2, [pc, #100]	; (8006528 <TIM_OC6_SetConfig+0xc4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d00f      	beq.n	80064e8 <TIM_OC6_SetConfig+0x84>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a18      	ldr	r2, [pc, #96]	; (800652c <TIM_OC6_SetConfig+0xc8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d00b      	beq.n	80064e8 <TIM_OC6_SetConfig+0x84>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a17      	ldr	r2, [pc, #92]	; (8006530 <TIM_OC6_SetConfig+0xcc>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d007      	beq.n	80064e8 <TIM_OC6_SetConfig+0x84>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a16      	ldr	r2, [pc, #88]	; (8006534 <TIM_OC6_SetConfig+0xd0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d003      	beq.n	80064e8 <TIM_OC6_SetConfig+0x84>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a15      	ldr	r2, [pc, #84]	; (8006538 <TIM_OC6_SetConfig+0xd4>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d109      	bne.n	80064fc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	029b      	lsls	r3, r3, #10
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	621a      	str	r2, [r3, #32]
}
 8006516:	bf00      	nop
 8006518:	371c      	adds	r7, #28
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	40012c00 	.word	0x40012c00
 8006528:	40013400 	.word	0x40013400
 800652c:	40014000 	.word	0x40014000
 8006530:	40014400 	.word	0x40014400
 8006534:	40014800 	.word	0x40014800
 8006538:	40015000 	.word	0x40015000

0800653c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	f023 0201 	bic.w	r2, r3, #1
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	4313      	orrs	r3, r2
 8006570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f023 030a 	bic.w	r3, r3, #10
 8006578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	621a      	str	r2, [r3, #32]
}
 800658e:	bf00      	nop
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800659a:	b480      	push	{r7}
 800659c:	b087      	sub	sp, #28
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	f023 0210 	bic.w	r2, r3, #16
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	031b      	lsls	r3, r3, #12
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006614:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4313      	orrs	r3, r2
 800661c:	f043 0307 	orr.w	r3, r3, #7
 8006620:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	609a      	str	r2, [r3, #8]
}
 8006628:	bf00      	nop
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800664e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	021a      	lsls	r2, r3, #8
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	431a      	orrs	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	4313      	orrs	r3, r2
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	609a      	str	r2, [r3, #8]
}
 8006668:	bf00      	nop
 800666a:	371c      	adds	r7, #28
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f003 031f 	and.w	r3, r3, #31
 8006686:	2201      	movs	r2, #1
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1a      	ldr	r2, [r3, #32]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	43db      	mvns	r3, r3
 8006696:	401a      	ands	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a1a      	ldr	r2, [r3, #32]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f003 031f 	and.w	r3, r3, #31
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	fa01 f303 	lsl.w	r3, r1, r3
 80066ac:	431a      	orrs	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	621a      	str	r2, [r3, #32]
}
 80066b2:	bf00      	nop
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
	...

080066c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066d4:	2302      	movs	r3, #2
 80066d6:	e074      	b.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a34      	ldr	r2, [pc, #208]	; (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d009      	beq.n	8006716 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a33      	ldr	r2, [pc, #204]	; (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d004      	beq.n	8006716 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a31      	ldr	r2, [pc, #196]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d108      	bne.n	8006728 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800671c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800672e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a21      	ldr	r2, [pc, #132]	; (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d022      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006758:	d01d      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a1f      	ldr	r2, [pc, #124]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d018      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1c      	ldr	r2, [pc, #112]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00e      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a15      	ldr	r2, [pc, #84]	; (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d009      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a18      	ldr	r2, [pc, #96]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d004      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a11      	ldr	r2, [pc, #68]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d10c      	bne.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800679c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	40012c00 	.word	0x40012c00
 80067d4:	40013400 	.word	0x40013400
 80067d8:	40015000 	.word	0x40015000
 80067dc:	40000400 	.word	0x40000400
 80067e0:	40000800 	.word	0x40000800
 80067e4:	40000c00 	.word	0x40000c00
 80067e8:	40014000 	.word	0x40014000

080067ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e042      	b.n	8006910 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006890:	2b00      	cmp	r3, #0
 8006892:	d106      	bne.n	80068a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7fa fd55 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2224      	movs	r2, #36	; 0x24
 80068a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0201 	bic.w	r2, r2, #1
 80068b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fef2 	bl	80076ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fbf3 	bl	80070b4 <UART_SetConfig>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d101      	bne.n	80068d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e01b      	b.n	8006910 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0201 	orr.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 ff71 	bl	80077f0 <UART_CheckIdleState>
 800690e:	4603      	mov	r3, r0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b08a      	sub	sp, #40	; 0x28
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	4613      	mov	r3, r2
 8006924:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692c:	2b20      	cmp	r3, #32
 800692e:	d167      	bne.n	8006a00 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <HAL_UART_Transmit_DMA+0x24>
 8006936:	88fb      	ldrh	r3, [r7, #6]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e060      	b.n	8006a02 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	88fa      	ldrh	r2, [r7, #6]
 800694a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	88fa      	ldrh	r2, [r7, #6]
 8006952:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2221      	movs	r2, #33	; 0x21
 8006962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d028      	beq.n	80069c0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006972:	4a26      	ldr	r2, [pc, #152]	; (8006a0c <HAL_UART_Transmit_DMA+0xf4>)
 8006974:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800697a:	4a25      	ldr	r2, [pc, #148]	; (8006a10 <HAL_UART_Transmit_DMA+0xf8>)
 800697c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006982:	4a24      	ldr	r2, [pc, #144]	; (8006a14 <HAL_UART_Transmit_DMA+0xfc>)
 8006984:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800698a:	2200      	movs	r2, #0
 800698c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006996:	4619      	mov	r1, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3328      	adds	r3, #40	; 0x28
 800699e:	461a      	mov	r2, r3
 80069a0:	88fb      	ldrh	r3, [r7, #6]
 80069a2:	f7fc fe83 	bl	80036ac <HAL_DMA_Start_IT>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d009      	beq.n	80069c0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2210      	movs	r2, #16
 80069b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e020      	b.n	8006a02 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2240      	movs	r2, #64	; 0x40
 80069c6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3308      	adds	r3, #8
 80069ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	613b      	str	r3, [r7, #16]
   return(result);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3308      	adds	r3, #8
 80069e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e8:	623a      	str	r2, [r7, #32]
 80069ea:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	69f9      	ldr	r1, [r7, #28]
 80069ee:	6a3a      	ldr	r2, [r7, #32]
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e5      	bne.n	80069c8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	e000      	b.n	8006a02 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006a00:	2302      	movs	r3, #2
  }
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3728      	adds	r7, #40	; 0x28
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	08007b6d 	.word	0x08007b6d
 8006a10:	08007c07 	.word	0x08007c07
 8006a14:	08007c23 	.word	0x08007c23

08006a18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b0ba      	sub	sp, #232	; 0xe8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a42:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a46:	4013      	ands	r3, r2
 8006a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006a4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d11b      	bne.n	8006a8c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d015      	beq.n	8006a8c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d009      	beq.n	8006a8c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 82e3 	beq.w	8007048 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	4798      	blx	r3
      }
      return;
 8006a8a:	e2dd      	b.n	8007048 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 8123 	beq.w	8006cdc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006a9a:	4b8d      	ldr	r3, [pc, #564]	; (8006cd0 <HAL_UART_IRQHandler+0x2b8>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006aa2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006aa6:	4b8b      	ldr	r3, [pc, #556]	; (8006cd4 <HAL_UART_IRQHandler+0x2bc>)
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 8116 	beq.w	8006cdc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d011      	beq.n	8006ae0 <HAL_UART_IRQHandler+0xc8>
 8006abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00b      	beq.n	8006ae0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2201      	movs	r2, #1
 8006ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad6:	f043 0201 	orr.w	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d011      	beq.n	8006b10 <HAL_UART_IRQHandler+0xf8>
 8006aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00b      	beq.n	8006b10 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2202      	movs	r2, #2
 8006afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b06:	f043 0204 	orr.w	r2, r3, #4
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d011      	beq.n	8006b40 <HAL_UART_IRQHandler+0x128>
 8006b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00b      	beq.n	8006b40 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b36:	f043 0202 	orr.w	r2, r3, #2
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b44:	f003 0308 	and.w	r3, r3, #8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d017      	beq.n	8006b7c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d105      	bne.n	8006b64 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006b5c:	4b5c      	ldr	r3, [pc, #368]	; (8006cd0 <HAL_UART_IRQHandler+0x2b8>)
 8006b5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00b      	beq.n	8006b7c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2208      	movs	r2, #8
 8006b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b72:	f043 0208 	orr.w	r2, r3, #8
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d012      	beq.n	8006bae <HAL_UART_IRQHandler+0x196>
 8006b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00c      	beq.n	8006bae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba4:	f043 0220 	orr.w	r2, r3, #32
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 8249 	beq.w	800704c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d013      	beq.n	8006bee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d105      	bne.n	8006bde <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c02:	2b40      	cmp	r3, #64	; 0x40
 8006c04:	d005      	beq.n	8006c12 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d054      	beq.n	8006cbc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 ff44 	bl	8007aa0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c22:	2b40      	cmp	r3, #64	; 0x40
 8006c24:	d146      	bne.n	8006cb4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c62:	e841 2300 	strex	r3, r2, [r1]
 8006c66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1d9      	bne.n	8006c26 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d017      	beq.n	8006cac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c82:	4a15      	ldr	r2, [pc, #84]	; (8006cd8 <HAL_UART_IRQHandler+0x2c0>)
 8006c84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fc fde1 	bl	8003854 <HAL_DMA_Abort_IT>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d019      	beq.n	8006ccc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006caa:	e00f      	b.n	8006ccc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f9eb 	bl	8007088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb2:	e00b      	b.n	8006ccc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f9e7 	bl	8007088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cba:	e007      	b.n	8006ccc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f9e3 	bl	8007088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006cca:	e1bf      	b.n	800704c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ccc:	bf00      	nop
    return;
 8006cce:	e1bd      	b.n	800704c <HAL_UART_IRQHandler+0x634>
 8006cd0:	10000001 	.word	0x10000001
 8006cd4:	04000120 	.word	0x04000120
 8006cd8:	08007ca3 	.word	0x08007ca3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	f040 8153 	bne.w	8006f8c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cea:	f003 0310 	and.w	r3, r3, #16
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 814c 	beq.w	8006f8c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf8:	f003 0310 	and.w	r3, r3, #16
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 8145 	beq.w	8006f8c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2210      	movs	r2, #16
 8006d08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d14:	2b40      	cmp	r3, #64	; 0x40
 8006d16:	f040 80bb 	bne.w	8006e90 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 818f 	beq.w	8007050 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	f080 8187 	bcs.w	8007050 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f040 8087 	bne.w	8006e6e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	461a      	mov	r2, r3
 8006d86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1da      	bne.n	8006d60 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3308      	adds	r3, #8
 8006db0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dbc:	f023 0301 	bic.w	r3, r3, #1
 8006dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3308      	adds	r3, #8
 8006dca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006dce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006dd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006dd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e1      	bne.n	8006daa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3308      	adds	r3, #8
 8006dec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3308      	adds	r3, #8
 8006e06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e3      	bne.n	8006de6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e34:	e853 3f00 	ldrex	r3, [r3]
 8006e38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e3c:	f023 0310 	bic.w	r3, r3, #16
 8006e40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e4      	bne.n	8006e2c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fc fc9a 	bl	80037a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2202      	movs	r2, #2
 8006e72:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f907 	bl	800709c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e8e:	e0df      	b.n	8007050 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 80d1 	beq.w	8007054 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006eb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 80cc 	beq.w	8007054 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ede:	647b      	str	r3, [r7, #68]	; 0x44
 8006ee0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e4      	bne.n	8006ebc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	623b      	str	r3, [r7, #32]
   return(result);
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f08:	f023 0301 	bic.w	r3, r3, #1
 8006f0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3308      	adds	r3, #8
 8006f16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f1a:	633a      	str	r2, [r7, #48]	; 0x30
 8006f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e1      	bne.n	8006ef2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 0310 	bic.w	r3, r3, #16
 8006f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f64:	61fb      	str	r3, [r7, #28]
 8006f66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	69b9      	ldr	r1, [r7, #24]
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	617b      	str	r3, [r7, #20]
   return(result);
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e4      	bne.n	8006f42 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f889 	bl	800709c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f8a:	e063      	b.n	8007054 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00e      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x59e>
 8006f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d008      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006fac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 feb8 	bl	8007d24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fb4:	e051      	b.n	800705a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d014      	beq.n	8006fec <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d105      	bne.n	8006fda <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d008      	beq.n	8006fec <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d03a      	beq.n	8007058 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
    }
    return;
 8006fea:	e035      	b.n	8007058 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d009      	beq.n	800700c <HAL_UART_IRQHandler+0x5f4>
 8006ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fe62 	bl	8007cce <UART_EndTransmit_IT>
    return;
 800700a:	e026      	b.n	800705a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800700c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007010:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d009      	beq.n	800702c <HAL_UART_IRQHandler+0x614>
 8007018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800701c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fe91 	bl	8007d4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800702a:	e016      	b.n	800705a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800702c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d010      	beq.n	800705a <HAL_UART_IRQHandler+0x642>
 8007038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800703c:	2b00      	cmp	r3, #0
 800703e:	da0c      	bge.n	800705a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fe79 	bl	8007d38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007046:	e008      	b.n	800705a <HAL_UART_IRQHandler+0x642>
      return;
 8007048:	bf00      	nop
 800704a:	e006      	b.n	800705a <HAL_UART_IRQHandler+0x642>
    return;
 800704c:	bf00      	nop
 800704e:	e004      	b.n	800705a <HAL_UART_IRQHandler+0x642>
      return;
 8007050:	bf00      	nop
 8007052:	e002      	b.n	800705a <HAL_UART_IRQHandler+0x642>
      return;
 8007054:	bf00      	nop
 8007056:	e000      	b.n	800705a <HAL_UART_IRQHandler+0x642>
    return;
 8007058:	bf00      	nop
  }
}
 800705a:	37e8      	adds	r7, #232	; 0xe8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	460b      	mov	r3, r1
 80070a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070b8:	b08c      	sub	sp, #48	; 0x30
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	689a      	ldr	r2, [r3, #8]
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	431a      	orrs	r2, r3
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	431a      	orrs	r2, r3
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	4313      	orrs	r3, r2
 80070da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	4baa      	ldr	r3, [pc, #680]	; (800738c <UART_SetConfig+0x2d8>)
 80070e4:	4013      	ands	r3, r2
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	6812      	ldr	r2, [r2, #0]
 80070ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070ec:	430b      	orrs	r3, r1
 80070ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a9f      	ldr	r2, [pc, #636]	; (8007390 <UART_SetConfig+0x2dc>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d004      	beq.n	8007120 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800711c:	4313      	orrs	r3, r2
 800711e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800712a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	6812      	ldr	r2, [r2, #0]
 8007132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007134:	430b      	orrs	r3, r1
 8007136:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713e:	f023 010f 	bic.w	r1, r3, #15
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a90      	ldr	r2, [pc, #576]	; (8007394 <UART_SetConfig+0x2e0>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d125      	bne.n	80071a4 <UART_SetConfig+0xf0>
 8007158:	4b8f      	ldr	r3, [pc, #572]	; (8007398 <UART_SetConfig+0x2e4>)
 800715a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800715e:	f003 0303 	and.w	r3, r3, #3
 8007162:	2b03      	cmp	r3, #3
 8007164:	d81a      	bhi.n	800719c <UART_SetConfig+0xe8>
 8007166:	a201      	add	r2, pc, #4	; (adr r2, 800716c <UART_SetConfig+0xb8>)
 8007168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716c:	0800717d 	.word	0x0800717d
 8007170:	0800718d 	.word	0x0800718d
 8007174:	08007185 	.word	0x08007185
 8007178:	08007195 	.word	0x08007195
 800717c:	2301      	movs	r3, #1
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007182:	e116      	b.n	80073b2 <UART_SetConfig+0x2fe>
 8007184:	2302      	movs	r3, #2
 8007186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800718a:	e112      	b.n	80073b2 <UART_SetConfig+0x2fe>
 800718c:	2304      	movs	r3, #4
 800718e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007192:	e10e      	b.n	80073b2 <UART_SetConfig+0x2fe>
 8007194:	2308      	movs	r3, #8
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800719a:	e10a      	b.n	80073b2 <UART_SetConfig+0x2fe>
 800719c:	2310      	movs	r3, #16
 800719e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071a2:	e106      	b.n	80073b2 <UART_SetConfig+0x2fe>
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a7c      	ldr	r2, [pc, #496]	; (800739c <UART_SetConfig+0x2e8>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d138      	bne.n	8007220 <UART_SetConfig+0x16c>
 80071ae:	4b7a      	ldr	r3, [pc, #488]	; (8007398 <UART_SetConfig+0x2e4>)
 80071b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b4:	f003 030c 	and.w	r3, r3, #12
 80071b8:	2b0c      	cmp	r3, #12
 80071ba:	d82d      	bhi.n	8007218 <UART_SetConfig+0x164>
 80071bc:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <UART_SetConfig+0x110>)
 80071be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c2:	bf00      	nop
 80071c4:	080071f9 	.word	0x080071f9
 80071c8:	08007219 	.word	0x08007219
 80071cc:	08007219 	.word	0x08007219
 80071d0:	08007219 	.word	0x08007219
 80071d4:	08007209 	.word	0x08007209
 80071d8:	08007219 	.word	0x08007219
 80071dc:	08007219 	.word	0x08007219
 80071e0:	08007219 	.word	0x08007219
 80071e4:	08007201 	.word	0x08007201
 80071e8:	08007219 	.word	0x08007219
 80071ec:	08007219 	.word	0x08007219
 80071f0:	08007219 	.word	0x08007219
 80071f4:	08007211 	.word	0x08007211
 80071f8:	2300      	movs	r3, #0
 80071fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071fe:	e0d8      	b.n	80073b2 <UART_SetConfig+0x2fe>
 8007200:	2302      	movs	r3, #2
 8007202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007206:	e0d4      	b.n	80073b2 <UART_SetConfig+0x2fe>
 8007208:	2304      	movs	r3, #4
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800720e:	e0d0      	b.n	80073b2 <UART_SetConfig+0x2fe>
 8007210:	2308      	movs	r3, #8
 8007212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007216:	e0cc      	b.n	80073b2 <UART_SetConfig+0x2fe>
 8007218:	2310      	movs	r3, #16
 800721a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800721e:	e0c8      	b.n	80073b2 <UART_SetConfig+0x2fe>
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a5e      	ldr	r2, [pc, #376]	; (80073a0 <UART_SetConfig+0x2ec>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d125      	bne.n	8007276 <UART_SetConfig+0x1c2>
 800722a:	4b5b      	ldr	r3, [pc, #364]	; (8007398 <UART_SetConfig+0x2e4>)
 800722c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007230:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007234:	2b30      	cmp	r3, #48	; 0x30
 8007236:	d016      	beq.n	8007266 <UART_SetConfig+0x1b2>
 8007238:	2b30      	cmp	r3, #48	; 0x30
 800723a:	d818      	bhi.n	800726e <UART_SetConfig+0x1ba>
 800723c:	2b20      	cmp	r3, #32
 800723e:	d00a      	beq.n	8007256 <UART_SetConfig+0x1a2>
 8007240:	2b20      	cmp	r3, #32
 8007242:	d814      	bhi.n	800726e <UART_SetConfig+0x1ba>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <UART_SetConfig+0x19a>
 8007248:	2b10      	cmp	r3, #16
 800724a:	d008      	beq.n	800725e <UART_SetConfig+0x1aa>
 800724c:	e00f      	b.n	800726e <UART_SetConfig+0x1ba>
 800724e:	2300      	movs	r3, #0
 8007250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007254:	e0ad      	b.n	80073b2 <UART_SetConfig+0x2fe>
 8007256:	2302      	movs	r3, #2
 8007258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800725c:	e0a9      	b.n	80073b2 <UART_SetConfig+0x2fe>
 800725e:	2304      	movs	r3, #4
 8007260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007264:	e0a5      	b.n	80073b2 <UART_SetConfig+0x2fe>
 8007266:	2308      	movs	r3, #8
 8007268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726c:	e0a1      	b.n	80073b2 <UART_SetConfig+0x2fe>
 800726e:	2310      	movs	r3, #16
 8007270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007274:	e09d      	b.n	80073b2 <UART_SetConfig+0x2fe>
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a4a      	ldr	r2, [pc, #296]	; (80073a4 <UART_SetConfig+0x2f0>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d125      	bne.n	80072cc <UART_SetConfig+0x218>
 8007280:	4b45      	ldr	r3, [pc, #276]	; (8007398 <UART_SetConfig+0x2e4>)
 8007282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007286:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800728a:	2bc0      	cmp	r3, #192	; 0xc0
 800728c:	d016      	beq.n	80072bc <UART_SetConfig+0x208>
 800728e:	2bc0      	cmp	r3, #192	; 0xc0
 8007290:	d818      	bhi.n	80072c4 <UART_SetConfig+0x210>
 8007292:	2b80      	cmp	r3, #128	; 0x80
 8007294:	d00a      	beq.n	80072ac <UART_SetConfig+0x1f8>
 8007296:	2b80      	cmp	r3, #128	; 0x80
 8007298:	d814      	bhi.n	80072c4 <UART_SetConfig+0x210>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <UART_SetConfig+0x1f0>
 800729e:	2b40      	cmp	r3, #64	; 0x40
 80072a0:	d008      	beq.n	80072b4 <UART_SetConfig+0x200>
 80072a2:	e00f      	b.n	80072c4 <UART_SetConfig+0x210>
 80072a4:	2300      	movs	r3, #0
 80072a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072aa:	e082      	b.n	80073b2 <UART_SetConfig+0x2fe>
 80072ac:	2302      	movs	r3, #2
 80072ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072b2:	e07e      	b.n	80073b2 <UART_SetConfig+0x2fe>
 80072b4:	2304      	movs	r3, #4
 80072b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ba:	e07a      	b.n	80073b2 <UART_SetConfig+0x2fe>
 80072bc:	2308      	movs	r3, #8
 80072be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c2:	e076      	b.n	80073b2 <UART_SetConfig+0x2fe>
 80072c4:	2310      	movs	r3, #16
 80072c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ca:	e072      	b.n	80073b2 <UART_SetConfig+0x2fe>
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a35      	ldr	r2, [pc, #212]	; (80073a8 <UART_SetConfig+0x2f4>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d12a      	bne.n	800732c <UART_SetConfig+0x278>
 80072d6:	4b30      	ldr	r3, [pc, #192]	; (8007398 <UART_SetConfig+0x2e4>)
 80072d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072e4:	d01a      	beq.n	800731c <UART_SetConfig+0x268>
 80072e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ea:	d81b      	bhi.n	8007324 <UART_SetConfig+0x270>
 80072ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f0:	d00c      	beq.n	800730c <UART_SetConfig+0x258>
 80072f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f6:	d815      	bhi.n	8007324 <UART_SetConfig+0x270>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <UART_SetConfig+0x250>
 80072fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007300:	d008      	beq.n	8007314 <UART_SetConfig+0x260>
 8007302:	e00f      	b.n	8007324 <UART_SetConfig+0x270>
 8007304:	2300      	movs	r3, #0
 8007306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800730a:	e052      	b.n	80073b2 <UART_SetConfig+0x2fe>
 800730c:	2302      	movs	r3, #2
 800730e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007312:	e04e      	b.n	80073b2 <UART_SetConfig+0x2fe>
 8007314:	2304      	movs	r3, #4
 8007316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800731a:	e04a      	b.n	80073b2 <UART_SetConfig+0x2fe>
 800731c:	2308      	movs	r3, #8
 800731e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007322:	e046      	b.n	80073b2 <UART_SetConfig+0x2fe>
 8007324:	2310      	movs	r3, #16
 8007326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800732a:	e042      	b.n	80073b2 <UART_SetConfig+0x2fe>
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a17      	ldr	r2, [pc, #92]	; (8007390 <UART_SetConfig+0x2dc>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d13a      	bne.n	80073ac <UART_SetConfig+0x2f8>
 8007336:	4b18      	ldr	r3, [pc, #96]	; (8007398 <UART_SetConfig+0x2e4>)
 8007338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800733c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007340:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007344:	d01a      	beq.n	800737c <UART_SetConfig+0x2c8>
 8007346:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800734a:	d81b      	bhi.n	8007384 <UART_SetConfig+0x2d0>
 800734c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007350:	d00c      	beq.n	800736c <UART_SetConfig+0x2b8>
 8007352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007356:	d815      	bhi.n	8007384 <UART_SetConfig+0x2d0>
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <UART_SetConfig+0x2b0>
 800735c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007360:	d008      	beq.n	8007374 <UART_SetConfig+0x2c0>
 8007362:	e00f      	b.n	8007384 <UART_SetConfig+0x2d0>
 8007364:	2300      	movs	r3, #0
 8007366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800736a:	e022      	b.n	80073b2 <UART_SetConfig+0x2fe>
 800736c:	2302      	movs	r3, #2
 800736e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007372:	e01e      	b.n	80073b2 <UART_SetConfig+0x2fe>
 8007374:	2304      	movs	r3, #4
 8007376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800737a:	e01a      	b.n	80073b2 <UART_SetConfig+0x2fe>
 800737c:	2308      	movs	r3, #8
 800737e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007382:	e016      	b.n	80073b2 <UART_SetConfig+0x2fe>
 8007384:	2310      	movs	r3, #16
 8007386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800738a:	e012      	b.n	80073b2 <UART_SetConfig+0x2fe>
 800738c:	cfff69f3 	.word	0xcfff69f3
 8007390:	40008000 	.word	0x40008000
 8007394:	40013800 	.word	0x40013800
 8007398:	40021000 	.word	0x40021000
 800739c:	40004400 	.word	0x40004400
 80073a0:	40004800 	.word	0x40004800
 80073a4:	40004c00 	.word	0x40004c00
 80073a8:	40005000 	.word	0x40005000
 80073ac:	2310      	movs	r3, #16
 80073ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4aae      	ldr	r2, [pc, #696]	; (8007670 <UART_SetConfig+0x5bc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	f040 8097 	bne.w	80074ec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073c2:	2b08      	cmp	r3, #8
 80073c4:	d823      	bhi.n	800740e <UART_SetConfig+0x35a>
 80073c6:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <UART_SetConfig+0x318>)
 80073c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073cc:	080073f1 	.word	0x080073f1
 80073d0:	0800740f 	.word	0x0800740f
 80073d4:	080073f9 	.word	0x080073f9
 80073d8:	0800740f 	.word	0x0800740f
 80073dc:	080073ff 	.word	0x080073ff
 80073e0:	0800740f 	.word	0x0800740f
 80073e4:	0800740f 	.word	0x0800740f
 80073e8:	0800740f 	.word	0x0800740f
 80073ec:	08007407 	.word	0x08007407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073f0:	f7fd fb14 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 80073f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073f6:	e010      	b.n	800741a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073f8:	4b9e      	ldr	r3, [pc, #632]	; (8007674 <UART_SetConfig+0x5c0>)
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073fc:	e00d      	b.n	800741a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073fe:	f7fd fa9f 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 8007402:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007404:	e009      	b.n	800741a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800740a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800740c:	e005      	b.n	800741a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007418:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 8130 	beq.w	8007682 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	4a94      	ldr	r2, [pc, #592]	; (8007678 <UART_SetConfig+0x5c4>)
 8007428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800742c:	461a      	mov	r2, r3
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	fbb3 f3f2 	udiv	r3, r3, r2
 8007434:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	4613      	mov	r3, r2
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	4413      	add	r3, r2
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	429a      	cmp	r2, r3
 8007444:	d305      	bcc.n	8007452 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	429a      	cmp	r2, r3
 8007450:	d903      	bls.n	800745a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007458:	e113      	b.n	8007682 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	2200      	movs	r2, #0
 800745e:	60bb      	str	r3, [r7, #8]
 8007460:	60fa      	str	r2, [r7, #12]
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	4a84      	ldr	r2, [pc, #528]	; (8007678 <UART_SetConfig+0x5c4>)
 8007468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800746c:	b29b      	uxth	r3, r3
 800746e:	2200      	movs	r2, #0
 8007470:	603b      	str	r3, [r7, #0]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007478:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800747c:	f7f8 fecc 	bl	8000218 <__aeabi_uldivmod>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4610      	mov	r0, r2
 8007486:	4619      	mov	r1, r3
 8007488:	f04f 0200 	mov.w	r2, #0
 800748c:	f04f 0300 	mov.w	r3, #0
 8007490:	020b      	lsls	r3, r1, #8
 8007492:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007496:	0202      	lsls	r2, r0, #8
 8007498:	6979      	ldr	r1, [r7, #20]
 800749a:	6849      	ldr	r1, [r1, #4]
 800749c:	0849      	lsrs	r1, r1, #1
 800749e:	2000      	movs	r0, #0
 80074a0:	460c      	mov	r4, r1
 80074a2:	4605      	mov	r5, r0
 80074a4:	eb12 0804 	adds.w	r8, r2, r4
 80074a8:	eb43 0905 	adc.w	r9, r3, r5
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	469a      	mov	sl, r3
 80074b4:	4693      	mov	fp, r2
 80074b6:	4652      	mov	r2, sl
 80074b8:	465b      	mov	r3, fp
 80074ba:	4640      	mov	r0, r8
 80074bc:	4649      	mov	r1, r9
 80074be:	f7f8 feab 	bl	8000218 <__aeabi_uldivmod>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	4613      	mov	r3, r2
 80074c8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074d0:	d308      	bcc.n	80074e4 <UART_SetConfig+0x430>
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074d8:	d204      	bcs.n	80074e4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6a3a      	ldr	r2, [r7, #32]
 80074e0:	60da      	str	r2, [r3, #12]
 80074e2:	e0ce      	b.n	8007682 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074ea:	e0ca      	b.n	8007682 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074f4:	d166      	bne.n	80075c4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80074f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074fa:	2b08      	cmp	r3, #8
 80074fc:	d827      	bhi.n	800754e <UART_SetConfig+0x49a>
 80074fe:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <UART_SetConfig+0x450>)
 8007500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007504:	08007529 	.word	0x08007529
 8007508:	08007531 	.word	0x08007531
 800750c:	08007539 	.word	0x08007539
 8007510:	0800754f 	.word	0x0800754f
 8007514:	0800753f 	.word	0x0800753f
 8007518:	0800754f 	.word	0x0800754f
 800751c:	0800754f 	.word	0x0800754f
 8007520:	0800754f 	.word	0x0800754f
 8007524:	08007547 	.word	0x08007547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007528:	f7fd fa78 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 800752c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800752e:	e014      	b.n	800755a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007530:	f7fd fa8a 	bl	8004a48 <HAL_RCC_GetPCLK2Freq>
 8007534:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007536:	e010      	b.n	800755a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007538:	4b4e      	ldr	r3, [pc, #312]	; (8007674 <UART_SetConfig+0x5c0>)
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800753c:	e00d      	b.n	800755a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800753e:	f7fd f9ff 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 8007542:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007544:	e009      	b.n	800755a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800754a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800754c:	e005      	b.n	800755a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007558:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 8090 	beq.w	8007682 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	4a44      	ldr	r2, [pc, #272]	; (8007678 <UART_SetConfig+0x5c4>)
 8007568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800756c:	461a      	mov	r2, r3
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	fbb3 f3f2 	udiv	r3, r3, r2
 8007574:	005a      	lsls	r2, r3, #1
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	085b      	lsrs	r3, r3, #1
 800757c:	441a      	add	r2, r3
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	fbb2 f3f3 	udiv	r3, r2, r3
 8007586:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	2b0f      	cmp	r3, #15
 800758c:	d916      	bls.n	80075bc <UART_SetConfig+0x508>
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007594:	d212      	bcs.n	80075bc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	b29b      	uxth	r3, r3
 800759a:	f023 030f 	bic.w	r3, r3, #15
 800759e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	085b      	lsrs	r3, r3, #1
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	8bfb      	ldrh	r3, [r7, #30]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	8bfa      	ldrh	r2, [r7, #30]
 80075b8:	60da      	str	r2, [r3, #12]
 80075ba:	e062      	b.n	8007682 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80075c2:	e05e      	b.n	8007682 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d828      	bhi.n	800761e <UART_SetConfig+0x56a>
 80075cc:	a201      	add	r2, pc, #4	; (adr r2, 80075d4 <UART_SetConfig+0x520>)
 80075ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d2:	bf00      	nop
 80075d4:	080075f9 	.word	0x080075f9
 80075d8:	08007601 	.word	0x08007601
 80075dc:	08007609 	.word	0x08007609
 80075e0:	0800761f 	.word	0x0800761f
 80075e4:	0800760f 	.word	0x0800760f
 80075e8:	0800761f 	.word	0x0800761f
 80075ec:	0800761f 	.word	0x0800761f
 80075f0:	0800761f 	.word	0x0800761f
 80075f4:	08007617 	.word	0x08007617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075f8:	f7fd fa10 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 80075fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075fe:	e014      	b.n	800762a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007600:	f7fd fa22 	bl	8004a48 <HAL_RCC_GetPCLK2Freq>
 8007604:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007606:	e010      	b.n	800762a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007608:	4b1a      	ldr	r3, [pc, #104]	; (8007674 <UART_SetConfig+0x5c0>)
 800760a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800760c:	e00d      	b.n	800762a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800760e:	f7fd f997 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 8007612:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007614:	e009      	b.n	800762a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800761a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800761c:	e005      	b.n	800762a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007628:	bf00      	nop
    }

    if (pclk != 0U)
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	2b00      	cmp	r3, #0
 800762e:	d028      	beq.n	8007682 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	4a10      	ldr	r2, [pc, #64]	; (8007678 <UART_SetConfig+0x5c4>)
 8007636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800763a:	461a      	mov	r2, r3
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	085b      	lsrs	r3, r3, #1
 8007648:	441a      	add	r2, r3
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007652:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	2b0f      	cmp	r3, #15
 8007658:	d910      	bls.n	800767c <UART_SetConfig+0x5c8>
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007660:	d20c      	bcs.n	800767c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	b29a      	uxth	r2, r3
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	60da      	str	r2, [r3, #12]
 800766c:	e009      	b.n	8007682 <UART_SetConfig+0x5ce>
 800766e:	bf00      	nop
 8007670:	40008000 	.word	0x40008000
 8007674:	00f42400 	.word	0x00f42400
 8007678:	08007ff0 	.word	0x08007ff0
      }
      else
      {
        ret = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2201      	movs	r2, #1
 8007686:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2201      	movs	r2, #1
 800768e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2200      	movs	r2, #0
 8007696:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	2200      	movs	r2, #0
 800769c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800769e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3730      	adds	r7, #48	; 0x30
 80076a6:	46bd      	mov	sp, r7
 80076a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080076ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b8:	f003 0308 	and.w	r3, r3, #8
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00a      	beq.n	800771a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00a      	beq.n	800773c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007740:	f003 0310 	and.w	r3, r3, #16
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00a      	beq.n	800775e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007762:	f003 0320 	and.w	r3, r3, #32
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007788:	2b00      	cmp	r3, #0
 800778a:	d01a      	beq.n	80077c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077aa:	d10a      	bne.n	80077c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	430a      	orrs	r2, r1
 80077e2:	605a      	str	r2, [r3, #4]
  }
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b098      	sub	sp, #96	; 0x60
 80077f4:	af02      	add	r7, sp, #8
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007800:	f7f9 ff6e 	bl	80016e0 <HAL_GetTick>
 8007804:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0308 	and.w	r3, r3, #8
 8007810:	2b08      	cmp	r3, #8
 8007812:	d12f      	bne.n	8007874 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800781c:	2200      	movs	r2, #0
 800781e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f88e 	bl	8007944 <UART_WaitOnFlagUntilTimeout>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d022      	beq.n	8007874 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007836:	e853 3f00 	ldrex	r3, [r3]
 800783a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800783c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007842:	653b      	str	r3, [r7, #80]	; 0x50
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800784c:	647b      	str	r3, [r7, #68]	; 0x44
 800784e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007854:	e841 2300 	strex	r3, r2, [r1]
 8007858:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800785a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e6      	bne.n	800782e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e063      	b.n	800793c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0304 	and.w	r3, r3, #4
 800787e:	2b04      	cmp	r3, #4
 8007880:	d149      	bne.n	8007916 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007882:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800788a:	2200      	movs	r2, #0
 800788c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f857 	bl	8007944 <UART_WaitOnFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d03c      	beq.n	8007916 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	623b      	str	r3, [r7, #32]
   return(result);
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ba:	633b      	str	r3, [r7, #48]	; 0x30
 80078bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1e6      	bne.n	800789c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3308      	adds	r3, #8
 80078d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f023 0301 	bic.w	r3, r3, #1
 80078e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3308      	adds	r3, #8
 80078ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ee:	61fa      	str	r2, [r7, #28]
 80078f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f2:	69b9      	ldr	r1, [r7, #24]
 80078f4:	69fa      	ldr	r2, [r7, #28]
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	617b      	str	r3, [r7, #20]
   return(result);
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1e5      	bne.n	80078ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2220      	movs	r2, #32
 8007906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e012      	b.n	800793c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2220      	movs	r2, #32
 8007922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3758      	adds	r7, #88	; 0x58
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	603b      	str	r3, [r7, #0]
 8007950:	4613      	mov	r3, r2
 8007952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007954:	e04f      	b.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795c:	d04b      	beq.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800795e:	f7f9 febf 	bl	80016e0 <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	429a      	cmp	r2, r3
 800796c:	d302      	bcc.n	8007974 <UART_WaitOnFlagUntilTimeout+0x30>
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e04e      	b.n	8007a16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0304 	and.w	r3, r3, #4
 8007982:	2b00      	cmp	r3, #0
 8007984:	d037      	beq.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b80      	cmp	r3, #128	; 0x80
 800798a:	d034      	beq.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2b40      	cmp	r3, #64	; 0x40
 8007990:	d031      	beq.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	f003 0308 	and.w	r3, r3, #8
 800799c:	2b08      	cmp	r3, #8
 800799e:	d110      	bne.n	80079c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2208      	movs	r2, #8
 80079a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 f879 	bl	8007aa0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2208      	movs	r2, #8
 80079b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e029      	b.n	8007a16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079d0:	d111      	bne.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f85f 	bl	8007aa0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2220      	movs	r2, #32
 80079e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e00f      	b.n	8007a16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69da      	ldr	r2, [r3, #28]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	4013      	ands	r3, r2
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	bf0c      	ite	eq
 8007a06:	2301      	moveq	r3, #1
 8007a08:	2300      	movne	r3, #0
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	79fb      	ldrb	r3, [r7, #7]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d0a0      	beq.n	8007956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b08f      	sub	sp, #60	; 0x3c
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a46:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e6      	bne.n	8007a26 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	e853 3f00 	ldrex	r3, [r3]
 8007a66:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3308      	adds	r3, #8
 8007a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a78:	61ba      	str	r2, [r7, #24]
 8007a7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7c:	6979      	ldr	r1, [r7, #20]
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	e841 2300 	strex	r3, r2, [r1]
 8007a84:	613b      	str	r3, [r7, #16]
   return(result);
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1e5      	bne.n	8007a58 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007a94:	bf00      	nop
 8007a96:	373c      	adds	r7, #60	; 0x3c
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b095      	sub	sp, #84	; 0x54
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007abc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ac8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007acc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e6      	bne.n	8007aa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3308      	adds	r3, #8
 8007ae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007af0:	f023 0301 	bic.w	r3, r3, #1
 8007af4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3308      	adds	r3, #8
 8007afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007afe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b06:	e841 2300 	strex	r3, r2, [r1]
 8007b0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e3      	bne.n	8007ada <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d118      	bne.n	8007b4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	e853 3f00 	ldrex	r3, [r3]
 8007b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f023 0310 	bic.w	r3, r3, #16
 8007b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	461a      	mov	r2, r3
 8007b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b38:	61bb      	str	r3, [r7, #24]
 8007b3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3c:	6979      	ldr	r1, [r7, #20]
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	e841 2300 	strex	r3, r2, [r1]
 8007b44:	613b      	str	r3, [r7, #16]
   return(result);
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e6      	bne.n	8007b1a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007b60:	bf00      	nop
 8007b62:	3754      	adds	r7, #84	; 0x54
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b090      	sub	sp, #64	; 0x40
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b78:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0320 	and.w	r3, r3, #32
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d137      	bne.n	8007bf8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3308      	adds	r3, #8
 8007b96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	623b      	str	r3, [r7, #32]
   return(result);
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ba6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3308      	adds	r3, #8
 8007bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bb0:	633a      	str	r2, [r7, #48]	; 0x30
 8007bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e5      	bne.n	8007b90 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be2:	61fb      	str	r3, [r7, #28]
 8007be4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	69b9      	ldr	r1, [r7, #24]
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	617b      	str	r3, [r7, #20]
   return(result);
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e6      	bne.n	8007bc4 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bf6:	e002      	b.n	8007bfe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007bf8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007bfa:	f7ff fa31 	bl	8007060 <HAL_UART_TxCpltCallback>
}
 8007bfe:	bf00      	nop
 8007c00:	3740      	adds	r7, #64	; 0x40
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c12:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f7ff fa2d 	bl	8007074 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c1a:	bf00      	nop
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b086      	sub	sp, #24
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c36:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4a:	2b80      	cmp	r3, #128	; 0x80
 8007c4c:	d109      	bne.n	8007c62 <UART_DMAError+0x40>
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	2b21      	cmp	r3, #33	; 0x21
 8007c52:	d106      	bne.n	8007c62 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007c5c:	6978      	ldr	r0, [r7, #20]
 8007c5e:	f7ff fede 	bl	8007a1e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6c:	2b40      	cmp	r3, #64	; 0x40
 8007c6e:	d109      	bne.n	8007c84 <UART_DMAError+0x62>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b22      	cmp	r3, #34	; 0x22
 8007c74:	d106      	bne.n	8007c84 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007c7e:	6978      	ldr	r0, [r7, #20]
 8007c80:	f7ff ff0e 	bl	8007aa0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c8a:	f043 0210 	orr.w	r2, r3, #16
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c94:	6978      	ldr	r0, [r7, #20]
 8007c96:	f7ff f9f7 	bl	8007088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c9a:	bf00      	nop
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f7ff f9e1 	bl	8007088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b088      	sub	sp, #32
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	e853 3f00 	ldrex	r3, [r3]
 8007ce2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cea:	61fb      	str	r3, [r7, #28]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	61bb      	str	r3, [r7, #24]
 8007cf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf8:	6979      	ldr	r1, [r7, #20]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	e841 2300 	strex	r3, r2, [r1]
 8007d00:	613b      	str	r3, [r7, #16]
   return(result);
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e6      	bne.n	8007cd6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7ff f9a2 	bl	8007060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d1c:	bf00      	nop
 8007d1e:	3720      	adds	r7, #32
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d101      	bne.n	8007d76 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d72:	2302      	movs	r3, #2
 8007d74:	e027      	b.n	8007dc6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2224      	movs	r2, #36	; 0x24
 8007d82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0201 	bic.w	r2, r2, #1
 8007d9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007da4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2220      	movs	r2, #32
 8007db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d101      	bne.n	8007dea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007de6:	2302      	movs	r3, #2
 8007de8:	e02d      	b.n	8007e46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2224      	movs	r2, #36	; 0x24
 8007df6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 0201 	bic.w	r2, r2, #1
 8007e10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	430a      	orrs	r2, r1
 8007e24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f850 	bl	8007ecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2220      	movs	r2, #32
 8007e38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d101      	bne.n	8007e66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e62:	2302      	movs	r3, #2
 8007e64:	e02d      	b.n	8007ec2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2224      	movs	r2, #36	; 0x24
 8007e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0201 	bic.w	r2, r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f812 	bl	8007ecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
	...

08007ecc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d108      	bne.n	8007eee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007eec:	e031      	b.n	8007f52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007eee:	2308      	movs	r3, #8
 8007ef0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ef2:	2308      	movs	r3, #8
 8007ef4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	0e5b      	lsrs	r3, r3, #25
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	f003 0307 	and.w	r3, r3, #7
 8007f04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	0f5b      	lsrs	r3, r3, #29
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	f003 0307 	and.w	r3, r3, #7
 8007f14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f16:	7bbb      	ldrb	r3, [r7, #14]
 8007f18:	7b3a      	ldrb	r2, [r7, #12]
 8007f1a:	4911      	ldr	r1, [pc, #68]	; (8007f60 <UARTEx_SetNbDataToProcess+0x94>)
 8007f1c:	5c8a      	ldrb	r2, [r1, r2]
 8007f1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f22:	7b3a      	ldrb	r2, [r7, #12]
 8007f24:	490f      	ldr	r1, [pc, #60]	; (8007f64 <UARTEx_SetNbDataToProcess+0x98>)
 8007f26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f28:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	7b7a      	ldrb	r2, [r7, #13]
 8007f38:	4909      	ldr	r1, [pc, #36]	; (8007f60 <UARTEx_SetNbDataToProcess+0x94>)
 8007f3a:	5c8a      	ldrb	r2, [r1, r2]
 8007f3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f40:	7b7a      	ldrb	r2, [r7, #13]
 8007f42:	4908      	ldr	r1, [pc, #32]	; (8007f64 <UARTEx_SetNbDataToProcess+0x98>)
 8007f44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f46:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f52:	bf00      	nop
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	08008008 	.word	0x08008008
 8007f64:	08008010 	.word	0x08008010

08007f68 <memset>:
 8007f68:	4402      	add	r2, r0
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d100      	bne.n	8007f72 <memset+0xa>
 8007f70:	4770      	bx	lr
 8007f72:	f803 1b01 	strb.w	r1, [r3], #1
 8007f76:	e7f9      	b.n	8007f6c <memset+0x4>

08007f78 <__libc_init_array>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	4d0d      	ldr	r5, [pc, #52]	; (8007fb0 <__libc_init_array+0x38>)
 8007f7c:	4c0d      	ldr	r4, [pc, #52]	; (8007fb4 <__libc_init_array+0x3c>)
 8007f7e:	1b64      	subs	r4, r4, r5
 8007f80:	10a4      	asrs	r4, r4, #2
 8007f82:	2600      	movs	r6, #0
 8007f84:	42a6      	cmp	r6, r4
 8007f86:	d109      	bne.n	8007f9c <__libc_init_array+0x24>
 8007f88:	4d0b      	ldr	r5, [pc, #44]	; (8007fb8 <__libc_init_array+0x40>)
 8007f8a:	4c0c      	ldr	r4, [pc, #48]	; (8007fbc <__libc_init_array+0x44>)
 8007f8c:	f000 f818 	bl	8007fc0 <_init>
 8007f90:	1b64      	subs	r4, r4, r5
 8007f92:	10a4      	asrs	r4, r4, #2
 8007f94:	2600      	movs	r6, #0
 8007f96:	42a6      	cmp	r6, r4
 8007f98:	d105      	bne.n	8007fa6 <__libc_init_array+0x2e>
 8007f9a:	bd70      	pop	{r4, r5, r6, pc}
 8007f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa0:	4798      	blx	r3
 8007fa2:	3601      	adds	r6, #1
 8007fa4:	e7ee      	b.n	8007f84 <__libc_init_array+0xc>
 8007fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007faa:	4798      	blx	r3
 8007fac:	3601      	adds	r6, #1
 8007fae:	e7f2      	b.n	8007f96 <__libc_init_array+0x1e>
 8007fb0:	08008020 	.word	0x08008020
 8007fb4:	08008020 	.word	0x08008020
 8007fb8:	08008020 	.word	0x08008020
 8007fbc:	08008024 	.word	0x08008024

08007fc0 <_init>:
 8007fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc2:	bf00      	nop
 8007fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc6:	bc08      	pop	{r3}
 8007fc8:	469e      	mov	lr, r3
 8007fca:	4770      	bx	lr

08007fcc <_fini>:
 8007fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fce:	bf00      	nop
 8007fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd2:	bc08      	pop	{r3}
 8007fd4:	469e      	mov	lr, r3
 8007fd6:	4770      	bx	lr
